<!-- Order Timeline Section -->
<div class="order-timeline-section">
  <div class="delivery-status-container border-1 border-solid border-color rounded-12 p-24">
    <!-- Loading Spinner -->
    <div class="loading-spinner" id="loading-spinner" style="text-align: center; margin: 20px 0;">
      {% render 'spinner' %}
    </div>

    <!-- Error Message -->
    <div class="error-message" id="error-message" style="display: none; text-align: center; margin: 20px 0;">
      <div class="ff-general-sans fs-14-lh-16-ls-0 text-red-600">
        Unable to load delivery timeline. Please try again later.
      </div>
    </div>

    <!-- Visual Timeline -->
    <div
      class="timeline-visual"
      id="visual-timeline"
      style="display: none; align-items: center; margin: 30px 0; padding: 0 20px;"
    >
      <div
        class="timeline-step flex flex-col items-center relative flex-1 gap-16"
        data-status="accepted"
      >
        <div>{% render 'icon-package' %}</div>
        <div
          class="step-circle bg-bg w-32 h-32 rounded-full  border-2 border-color border-solid flex items-center justify-center relative z-2"
        >
          <span class="tick-icon" style="display: none;">{% render 'icon-tick' %}</span>
          <span
            class="dot-icon w-8 h-8 rounded-full text-primary-optional inline-block  "
          ></span>
        </div>
        <h2
          class="step-label m-0 ff-general-sans fs-16-lh-20-ls-0_1  fw-500 text-primary-optional"
        >
          {{ 'customer.order.accepted' | t }}
        </h2>
      </div>
      <div
        class="timeline-step flex flex-col items-center relative flex-1 gap-16"
        data-status="picked"
      >
        <div>{% render 'icon-picked' %}</div>
        <div
          class="step-circle bg-bg w-32 h-32 rounded-full  border-2 border-color border-solid flex items-center justify-center relative z-2"
        >
          <span class="tick-icon" style="display: none;">{% render 'icon-tick' %}</span>
          <span
            class="dot-icon w-8 h-8 rounded-full text-primary-optional inline-block"
          ></span>
        </div>
        <h2
          class="step-label m-0 ff-general-sans fs-16-lh-20-ls-0_1  fw-500 text-primary-optional "
        >
          {{ 'customer.order.picked' | t }}
        </h2>
      </div>
      <div
        class="timeline-step flex flex-col items-center relative flex-1 gap-16"
        data-status="in-transit"
      >
        <div>{% render 'icon-track' %}</div>
        <div
          class="step-circle bg-bg w-32 h-32 rounded-full  border-2 border-color border-solid flex items-center justify-center relative z-2"
        >
          <span class="tick-icon" style="display: none;">{% render 'icon-tick' %}</span>
          <span
            class="dot-icon w-8 h-8 rounded-full text-primary-optional inline-block"
          ></span>
        </div>
        <h2
          class="step-label m-0 ff-general-sans fs-16-lh-20-ls-0_1  fw-500 text-primary-optional"
        >
          {{ 'customer.order.in-transit' | t }}
        </h2>
      </div>
      <div
        class="timeline-step flex flex-col items-center relative flex-1 gap-16"
        data-status="out-for-delivery"
      >
        <div>{% render 'icon-out-for-delivery' %}</div>
        <div
          class="step-circle bg-bg w-32 h-32 rounded-full  border-2 border-color border-solid flex items-center justify-center relative z-2"
        >
          <span class="tick-icon" style="display: none;">{% render 'icon-tick' %}</span>
          <span
            class="dot-icon w-8 h-8 rounded-full text-primary-optional inline-block"
          ></span>
        </div>
        <h2
          class="step-label m-0 ff-general-sans fs-16-lh-20-ls-0_1  fw-500 text-primary-optional"
        >
          {{ 'customer.order.out-for-delivery' | t }}
        </h2>
      </div>
      <div
        class="timeline-step flex flex-col items-center relative flex-1 gap-16"
        data-status="delivered"
      >
        <div>{% render 'icon-delivery' %}</div>
        <div
          class="step-circle bg-bg w-32 h-32 rounded-full  border-2 border-color border-solid flex items-center justify-center relative z-2"
        >
          <span class="tick-icon" style="display: none;">{% render 'icon-tick' %}</span>
          <span
            class="dot-icon w-8 h-8 rounded-full text-primary-optional inline-block"
          ></span>
        </div>
        <h2
          class="step-label m-0 ff-general-sans fs-16-lh-20-ls-0_1  fw-500 text-primary-optional"
        >
          {{ 'customer.order.delivered' | t }}
        </h2>
      </div>
    </div>

    <!-- Timeline will be populated by JavaScript -->
    <div id="order-timeline" class="mt-16" style="display: none;">
      <!-- Timeline content will be inserted here -->
    </div>
  </div>
</div>

<style>
  /* Spinner animation */
  @keyframes spin {
    0% {
      transform: rotate(0deg);
    }
    100% {
      transform: rotate(360deg);
    }
  }

  /* Timeline connecting lines */
  .timeline-step:not(:last-child)::after {
    content: '';
    position: absolute;
    top: calc(50% + 10px);
    left: calc(50% + 10px);
    right: calc(-50% + 10px);
    height: 3px;
    background-color: #e5e5e5;
    z-index: 1;
  }

  .timeline-step.completed:not(:last-child)::after {
    background-color: #28a745;
  }

  /* Completed steps - Green background with white tick icon */
  .step-circle.completed {
    border-color: #28a745 !important;
  }

  .step-circle.completed .tick-icon {
    display: inline !important;
    color: white;
  }

  .step-circle.completed .dot-icon {
    display: none !important;
  }

  /* Current step - Green background with white tick icon */
  .step-circle.current {
    border-color: #28a745 !important;
  }

  .step-circle.current .tick-icon {
    display: inline !important;
    color: white;
  }

  .step-circle.current .dot-icon {
    display: none !important;
  }

  /* Pending steps - White background with gray border and dot */

  .tick-icon {
    display: none;
  }
  .step-circle .dot-icon {
    background-color: rgb(167, 165, 165);
  }

  /* Icon styling */
  .tick-icon svg {
    color: rgb(var(--color-background));
    fill: rgb(var(--color-background));
  }
</style>

<script>
  // Order delivery status functionality
  let orderDeliveryStatusLoaded = false;

  // Status order mapping
  const statusOrder = ['accepted', 'picked', 'in-transit', 'out-for-delivery', 'delivered'];

  // Function to show/hide loading spinner
  function toggleSpinner(show) {
    const spinner = document.getElementById('loading-spinner');
    if (spinner) {
      spinner.style.display = show ? 'block' : 'none';
    }
  }

  // Function to show/hide error message
  function toggleError(show) {
    const errorMessage = document.getElementById('error-message');
    if (errorMessage) {
      errorMessage.style.display = show ? 'block' : 'none';
    }
  }

  // Function to show/hide timeline
  function toggleTimeline(show) {
    const visualTimeline = document.getElementById('visual-timeline');
    const orderTimeline = document.getElementById('order-timeline');

    if (visualTimeline) {
      visualTimeline.style.display = show ? 'flex' : 'none';
    }
    if (orderTimeline) {
      orderTimeline.style.display = show ? 'block' : 'none';
    }
  }

  // Function to update visual timeline
  function updateVisualTimeline(currentStatus) {
    const timelineSteps = document.querySelectorAll('.timeline-step');
    const normalizedStatus = currentStatus.toLowerCase().replace(/\s+/g, '-');
    const currentStatusIndex = statusOrder.indexOf(normalizedStatus);

    timelineSteps.forEach((step, index) => {
      const circle = step.querySelector('.step-circle');
      const label = step.querySelector('.step-label');
      const tickIcon = circle.querySelector('.tick-icon');
      const dotIcon = circle.querySelector('.dot-icon');

      // Reset classes
      circle.classList.remove('completed', 'current');
      label.classList.remove('completed', 'current');
      step.classList.remove('completed');

      if (index <= currentStatusIndex) {
        // Completed and current steps (green background with tick icon)
        circle.classList.add('completed');
        label.classList.add('completed');
        step.classList.add('completed');
        if (tickIcon) {
          tickIcon.style.display = 'inline';
        }
        if (dotIcon) {
          dotIcon.style.display = 'none';
        }
      } else {
        // Future steps (white background with gray dot)
        if (tickIcon) {
          tickIcon.style.display = 'none';
        }
        if (dotIcon) {
          dotIcon.style.display = 'inline-block';
        }
      }
    });
  }

  // Function to fetch delivery status for single order
  async function fetchOrderDeliveryStatus() {
    if (orderDeliveryStatusLoaded) return;

    const orderId = 'gid://shopify/Order/{{ order.id }}'; // Get order ID

    // Show loading spinner, hide timeline and error
    toggleSpinner(true);
    toggleError(false);
    toggleTimeline(false);

    try {
      const apiUrl = `/apps/${APP_SUB_PATH}/customer/account/delivery-status?order_ids=${encodeURIComponent(orderId)}`;

      const response = await fetch(apiUrl, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
          Accept: 'application/json',
        },
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const result = await response.json();

      if (result.success && result.data && result.data[orderId]) {
        const orderData = result.data[orderId];

        // Hide spinner and error, show timeline
        toggleSpinner(false);
        toggleError(false);
        toggleTimeline(true);

        // Update visual timeline based on API response
        updateVisualTimeline(orderData.deliveryStatus);

        // Create timeline if events data is available
        if (orderData.events && Array.isArray(orderData.events)) {
          createOrderTimeline(orderData.events);
        }
      } else {
        // Hide spinner, show timeline with default state
        toggleSpinner(false);
        toggleError(false);
        toggleTimeline(true);

        // Update visual timeline to default state
        updateVisualTimeline('Accepted');
      }
    } catch (error) {
      console.error('Error fetching delivery status:', error);

      // Hide spinner and timeline, show error
      toggleSpinner(false);
      toggleTimeline(false);
      toggleError(true);
    }

    orderDeliveryStatusLoaded = true;
  }

  // Function to create order timeline from events
  function createOrderTimeline(events) {
    const container = document.getElementById('order-timeline');
    if (!container || !events || events.length === 0) return;

    const timelineHTML = events
      .map((event, index) => {
        const isLast = index === events.length - 1;
        const eventDate = event.happenedAt ? new Date(event.happenedAt).toLocaleString() : 'Unknown date';

        return `
        <div class="timeline-item flex gap-16 pb-16 ${!isLast ? 'border-b border-b-color border-b-solid' : ''}">
          <div class="timeline-marker flex-shrink-0 w-12 h-12 rounded-full ${
            isLast ? 'bg-green-500' : 'bg-blue-500'
          } flex items-center justify-center">
            <div class="w-6 h-6 rounded-full bg-white"></div>
          </div>
          <div class="timeline-content flex-1">
            <div class="ff-general-sans fw-500 fs-14-lh-16-ls-0 text-brand mb-4">
              ${event.status || 'Status Update'}
            </div>
            <div class="ff-general-sans fw-400 fs-12-lh-14-ls-0 text-primary-70pct">
              ${eventDate}
            </div>
            ${
              event.description
                ? `
              <div class="ff-general-sans fw-400 fs-13-lh-16-ls-0 text-primary-80pct mt-4">
                ${event.description}
              </div>
            `
                : ''
            }
          </div>
        </div>
      `;
      })
      .join('');

    container.innerHTML = `
      <div class="timeline-container">
        <h4 class="ff-general-sans fw-500 fs-16-lh-18-ls-0 mb-16">Delivery Timeline</h4>
        ${timelineHTML}
      </div>
    `;
  }

  // Initialize when DOM is ready
  document.addEventListener('DOMContentLoaded', function () {
    setTimeout(() => {
      fetchOrderDeliveryStatus();
    }, 300);
  });
</script>
