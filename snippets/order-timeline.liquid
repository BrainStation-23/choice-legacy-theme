<!-- Order Timeline Section -->
<div class="order-timeline-section">
  <div class="delivery-status-container border-1 border-solid border-color rounded-12 p-24 sm:p-16">
    <!-- Loading Spinner -->
    <div class="loading-spinner" id="loading-spinner" style="text-align: center; margin: 20px 0;">
      <spinner-component size="large" color="primary"></spinner-component>
    </div>

    <!-- Error Message -->
    <div class="error-message" id="error-message" style="display: none; text-align: center; margin: 20px 0;">
      <div class="ff-general-sans fs-14-lh-16-ls-0 text-red-600">
        Unable to load delivery timeline. Please try again later.
      </div>
    </div>

    <!-- Visual Timeline -->
    <div
      class="timeline-visual sm:flex-col sm:gap-20"
      id="visual-timeline"
      style="display: none;"
    >
      <div
        class="timeline-step flex flex-col items-center relative flex-1 gap-16 sm:flex-row"
        data-status="accepted"
      >
        <div>{% render 'icon-package' %}</div>
        <div
          class="step-circle bg-bg w-32 h-32 rounded-full  border-2 border-color border-solid flex items-center justify-center relative z-2"
        >
          <span class="tick-icon" style="display: none;">{% render 'icon-tick' %}</span>
          <span class="cross-icon" style="display: none;">
            {%- render 'icon-close', height: '12px', width: '12px' -%}
          </span>
          <span
            class="dot-icon w-8 h-8 rounded-full text-primary-optional inline-block  "
          ></span>
        </div>
        <h2
          class="step-label m-0 ff-general-sans fs-16-lh-20-ls-0_1  fw-500 text-primary-optional"
        >
          {{ 'customer.order.accepted' | t }}
        </h2>
      </div>
      <div
        class="timeline-step flex flex-col items-center relative flex-1 gap-16 sm:flex-row"
        data-status="picked"
      >
        <div>{% render 'icon-picked' %}</div>
        <div
          class="step-circle bg-bg w-32 h-32 rounded-full  border-2 border-color border-solid flex items-center justify-center relative z-2"
        >
          <span class="tick-icon" style="display: none;">{% render 'icon-tick' %}</span>
          <span class="cross-icon" style="display: none;">
            {%- render 'icon-close', height: '12px', width: '12px' -%}
          </span>
          <span
            class="dot-icon w-8 h-8 rounded-full text-primary-optional inline-block"
          ></span>
        </div>
        <h2
          class="step-label m-0 ff-general-sans fs-16-lh-20-ls-0_1  fw-500 text-primary-optional "
        >
          {{ 'customer.order.picked' | t }}
        </h2>
      </div>
      <div
        class="timeline-step flex flex-col items-center relative flex-1 gap-16 sm:flex-row"
        data-status="in-transit"
      >
        <div>{% render 'icon-track' %}</div>
        <div
          class="step-circle bg-bg w-32 h-32 rounded-full  border-2 border-color border-solid flex items-center justify-center relative z-2"
        >
          <span class="tick-icon" style="display: none;">{% render 'icon-tick' %}</span>
          <span class="cross-icon" style="display: none;">
            {%- render 'icon-close', height: '12px', width: '12px' -%}
          </span>
          <span
            class="dot-icon w-8 h-8 rounded-full text-primary-optional inline-block"
          ></span>
        </div>
        <h2
          class="step-label m-0 ff-general-sans fs-16-lh-20-ls-0_1  fw-500 text-primary-optional"
        >
          {{ 'customer.order.in-transit' | t }}
        </h2>
      </div>
      <div
        class="timeline-step flex flex-col items-center relative flex-1 gap-16 sm:flex-row"
        data-status="out-for-delivery"
      >
        <div>{% render 'icon-out-for-delivery' %}</div>
        <div
          class="step-circle bg-bg w-32 h-32 rounded-full  border-2 border-color border-solid flex items-center justify-center relative z-2"
        >
          <span class="tick-icon" style="display: none;">{% render 'icon-tick' %}</span>
          <span class="cross-icon" style="display: none;">
            {%- render 'icon-close', height: '12px', width: '12px' -%}
          </span>
          <span
            class="dot-icon w-8 h-8 rounded-full text-primary-optional inline-block"
          ></span>
        </div>
        <h2
          class="step-label m-0 ff-general-sans fs-16-lh-20-ls-0_1  fw-500 text-primary-optional"
        >
          {{ 'customer.order.out-for-delivery' | t }}
        </h2>
      </div>
      <div
        class="timeline-step flex flex-col items-center relative flex-1 gap-16 sm:flex-row"
        data-status="delivered"
      >
        <div>{% render 'icon-delivery' %}</div>
        <div
          class="step-circle bg-bg w-32 h-32 rounded-full  border-2 border-color border-solid flex items-center justify-center relative z-2"
        >
          <span class="tick-icon" style="display: none;">{% render 'icon-tick' %}</span>
          <span class="cross-icon" style="display: none;">
            {%- render 'icon-close', height: '12px', width: '12px' -%}
          </span>
          <span
            class="dot-icon w-8 h-8 rounded-full text-primary-optional inline-block"
          ></span>
        </div>
        <h2
          class="step-label m-0 ff-general-sans fs-16-lh-20-ls-0_1  fw-500 text-primary-optional"
        >
          <span class="delivered-text">{{ 'customer.order.delivered' | t }}</span>
          {% comment %} <span class="cancelled-text" style="display: none;">Cancelled</span> {% endcomment %}
        </h2>
      </div>
    </div>
  </div>
</div>

<style>
  @keyframes spin {
    0% {
      transform: rotate(0deg);
    }
    100% {
      transform: rotate(360deg);
    }
  }

  .timeline-step:not(:last-child)::after {
    content: '';
    position: absolute;
    top: calc(50% + 10px);
    left: calc(50% + 10px);
    right: calc(-50% + 10px);
    height: 3px;
    background-color: rgba(var(--color-primary-text), 0.3);
    z-index: 1;
  }

  .timeline-step.completed:not(:last-child)::after {
    background-color: #28a745;
  }

  /* Gray line before cancelled step */
  .timeline-step.completed + .timeline-step.cancelled::before {
    content: '';
    position: absolute;
    top: calc(50% + 10px);
    left: calc(-50% + 10px);
    right: calc(50% + 10px);
    height: 3px;
    background-color: rgba(var(--color-primary-text), 0.3) !important;
    z-index: 1;
  }

  /* Override green line when next step is cancelled */
  .timeline-step.completed:has(+ .timeline-step.cancelled)::after {
    background-color: rgba(var(--color-primary-text), 0.3) !important;
  }

  /* Gray line for steps completed before cancellation */
  .timeline-step.completed-before-cancel:not(:last-child)::after {
    background-color: rgba(var(--color-primary-text), 0.3) !important;
  }

  /* No green line after current step in normal flow */
  .timeline-step.current-step:not(:last-child)::after {
    background-color: rgba(var(--color-primary-text), 0.3) !important;
  }

  .step-circle.completed {
    border-color: #28a745 !important;
  }

  .step-circle.completed .tick-icon {
    display: inline !important;
    color: rgb(var(--color-background));
  }

  .step-circle.completed .dot-icon {
    display: none !important;
  }

  /* Current step - Green background with white tick icon */
  .step-circle.current {
    border-color: #28a745 !important;
  }

  .step-circle.current .tick-icon {
    display: inline !important;
    color: rgb(var(--color-background));
  }

  .step-circle.current .dot-icon {
    display: none !important;
  }

  /* Cancelled status styling */
  .step-circle.cancelled {
  }

  .step-circle.cancelled .cross-icon {
    display: inline !important;
    color: white;
    font-size: 16px;
    font-weight: bold;
  }

  .step-circle.cancelled .tick-icon,
  .step-circle.cancelled .dot-icon {
    display: none !important;
  }

  .timeline-step.cancelled .step-circle {
    border-color: #dc3545 !important;
  }

  .tick-icon {
    display: none;
  }
  .step-circle .dot-icon {
    background-color: rgba(var(--color-primary-text), 0.3);
  }

  /* Cross icon styling */
  .cross-icon svg {
    color: red;
    fill: red;
  }

  .cross-icon svg path {
    color: red;
    fill: red;
    stroke: red;
  }
  /* Icon styling */
  .tick-icon svg {
    color: rgb(var(--color-background));
    fill: rgb(var(--color-background));
  }

  /* Mobile styles */
  @media screen and (max-width: 767px) {
    .timeline-step:not(:last-child)::after {
      content: '';
      position: absolute;
      left: 73px;
      top: calc(100% - 11px);
      width: 2px;
      height: 100%;
      background-color: rgba(var(--color-primary-text), 0.3);
      right: auto;
    }

    .timeline-step.completed:not(:last-child)::after {
      background-color: #28a745;
    }

    /* Gray line for steps completed before cancellation (mobile) */
    .timeline-step.completed-before-cancel:not(:last-child)::after {
      background-color: rgba(var(--color-primary-text), 0.3) !important;
    }

    /* No green line after current step in normal flow (mobile) */
    .timeline-step.current-step:not(:last-child)::after {
      background-color: rgba(var(--color-primary-text), 0.3) !important;
    }
  }

  @media screen and (min-width: 768px) and (max-width: 1023px) {
    .step-label {
      font-size: 14px !important;
    }
    .delivery-status-container {
      padding: 16px !important;
    }
  }

  @media screen and (min-width: 1024px) and (max-width: 1439px) {
    .step-label {
      font-size: 12px !important;
    }
    .delivery-status-container {
      padding: 10px !important;
    }
  }
</style>

<script>
  // Order delivery status functionality
  let orderDeliveryStatusLoaded = false;

  // Status order mapping
  const statusOrder = ['accepted', 'picked', 'in-transit', 'out-for-delivery', 'delivered'];

  // Function to show/hide loading spinner
  function toggleSpinner(show) {
    const spinner = document.getElementById('loading-spinner');
    if (spinner) {
      spinner.style.display = show ? 'block' : 'none';
    }
  }

  // Function to show/hide error message
  function toggleError(show) {
    const errorMessage = document.getElementById('error-message');
    if (errorMessage) {
      errorMessage.style.display = show ? 'block' : 'none';
    }
  }

  // Function to show/hide timeline
  function toggleTimeline(show) {
    const visualTimeline = document.getElementById('visual-timeline');
    const orderTimeline = document.getElementById('order-timeline');

    if (visualTimeline) {
      visualTimeline.style.display = show ? 'flex' : 'none';
    }
    if (orderTimeline) {
      orderTimeline.style.display = show ? 'block' : 'none';
    }
  }

  // Function to update visual timeline
  function updateVisualTimeline(currentStatus, isCancelled = false) {
    const timelineSteps = document.querySelectorAll('.timeline-step');
    const normalizedStatus = currentStatus.toLowerCase().replace(/\s+/g, '-');
    const currentStatusIndex = statusOrder.indexOf(normalizedStatus);

    timelineSteps.forEach((step, index) => {
      const circle = step.querySelector('.step-circle');
      const label = step.querySelector('.step-label');
      const tickIcon = circle.querySelector('.tick-icon');
      const dotIcon = circle.querySelector('.dot-icon');
      const crossIcon = circle.querySelector('.cross-icon');

      // Reset classes
      circle.classList.remove('completed', 'current', 'cancelled');
      label.classList.remove('completed', 'current');
      step.classList.remove('completed', 'cancelled', 'completed-before-cancel', 'current-step');

      if (isCancelled) {
        // For cancelled orders: show steps up to currentStatus as completed,
        // then show cancellation at the next step
        if (index < currentStatusIndex) {
          // Steps before the last completed step - show as completed with green lines
          circle.classList.add('completed');
          label.classList.add('completed');
          step.classList.add('completed');
          if (tickIcon) {
            tickIcon.style.display = 'inline';
          }
          if (dotIcon) {
            dotIcon.style.display = 'none';
          }
          if (crossIcon) {
            crossIcon.style.display = 'none';
          }
        } else if (index === currentStatusIndex) {
          // Last completed step before cancellation - show as completed but gray line after
          circle.classList.add('completed');
          label.classList.add('completed');
          step.classList.add('completed', 'completed-before-cancel');
          if (tickIcon) {
            tickIcon.style.display = 'inline';
          }
          if (dotIcon) {
            dotIcon.style.display = 'none';
          }
          if (crossIcon) {
            crossIcon.style.display = 'none';
          }
        } else if (index === currentStatusIndex + 1) {
          // Next step after currentStatus - show as cancelled with red circle and cross
          circle.classList.add('cancelled');
          step.classList.add('cancelled');
          if (crossIcon) {
            crossIcon.style.display = 'inline';
          }
          if (tickIcon) {
            tickIcon.style.display = 'none';
          }
          if (dotIcon) {
            dotIcon.style.display = 'none';
          }
        } else {
          // Steps after cancellation - show as pending/gray
          if (crossIcon) {
            crossIcon.style.display = 'none';
          }
          if (tickIcon) {
            tickIcon.style.display = 'none';
          }
          if (dotIcon) {
            dotIcon.style.display = 'inline-block';
          }
        }
      } else {
        // Normal flow (not cancelled)
        if (crossIcon) {
          crossIcon.style.display = 'none';
        }

        if (index < currentStatusIndex) {
          // Completed steps (green background with tick icon and green line)
          circle.classList.add('completed');
          label.classList.add('completed');
          step.classList.add('completed');
          if (tickIcon) {
            tickIcon.style.display = 'inline';
          }
          if (dotIcon) {
            dotIcon.style.display = 'none';
          }
        } else if (index === currentStatusIndex) {
          // Current step (green background with tick icon but no green line after)
          circle.classList.add('completed');
          label.classList.add('completed');
          step.classList.add('completed', 'current-step');
          if (tickIcon) {
            tickIcon.style.display = 'inline';
          }
          if (dotIcon) {
            dotIcon.style.display = 'none';
          }
        } else {
          // Future steps (white background with gray dot)
          if (tickIcon) {
            tickIcon.style.display = 'none';
          }
          if (dotIcon) {
            dotIcon.style.display = 'inline-block';
          }
        }
      }
    });
  }

  // Function to fetch delivery status for single order
  async function fetchOrderDeliveryStatus() {
    if (orderDeliveryStatusLoaded) return;

    const orderId = 'gid://shopify/Order/{{ order.id }}'; // Get order ID

    // Show loading spinner, hide timeline and error
    toggleSpinner(true);
    toggleError(false);
    toggleTimeline(false);

    try {
      // Changed from order_ids to order_id
      const apiUrl = `/apps/${APP_SUB_PATH}/customer/account/delivery-status?order_id=${orderId}`;

      const response = await fetch(apiUrl, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
          Accept: 'application/json',
        },
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const result = await response.json();

      // Updated to access result.data directly since it's now a single object, not a map
      if (result.success && result.data) {
        const orderData = result.data;

        // Hide spinner and error, show timeline
        toggleSpinner(false);
        toggleError(false);
        toggleTimeline(true);

        // Update visual timeline based on API response
        updateVisualTimeline(orderData.deliveryStatus, orderData.isCancelled);

        const deliveryStatusEvent = new CustomEvent('deliveryStatusUpdated', {
          detail: {
            status: orderData.deliveryStatus,
            happenedAt: orderData.lastEventDate,
            returnStatus: orderData.returnStatus || null,
            isCancelled: orderData.isCancelled || false,
          },
        });
        document.dispatchEvent(deliveryStatusEvent);

        // Create timeline if events data is available
        if (orderData.events && Array.isArray(orderData.events)) {
          createOrderTimeline(orderData.events);
        }
      } else {
        // Hide spinner, show timeline with default state
        toggleSpinner(false);
        toggleError(false);
        toggleTimeline(true);

        // Update visual timeline to default state
        updateVisualTimeline('Accepted', false);

        // Dispatch event with default status
        const deliveryStatusEvent = new CustomEvent('deliveryStatusUpdated', {
          detail: {
            status: 'Accepted',
            returnStatus: null,
          },
        });
        document.dispatchEvent(deliveryStatusEvent);
      }
    } catch (error) {
      console.error('Error fetching delivery status:', error);

      // Hide spinner and timeline, show error
      toggleSpinner(false);
      toggleTimeline(false);
      toggleError(true);
    }

    orderDeliveryStatusLoaded = true;
  }

  // Function to create order timeline from events
  function createOrderTimeline(events) {
    const container = document.getElementById('order-timeline');
    if (!container || !events || events.length === 0) return;

    const timelineHTML = events
      .map((event, index) => {
        const isLast = index === events.length - 1;
        const eventDate = event.happenedAt ? new Date(event.happenedAt).toLocaleString() : 'Unknown date';

        return `
        <div class="timeline-item flex gap-16 pb-16 ${!isLast ? 'border-b border-b-color border-b-solid' : ''}">
          <div class="timeline-marker flex-shrink-0 w-12 h-12 rounded-full ${
            isLast ? 'bg-green-500' : 'bg-blue-500'
          } flex items-center justify-center">
            <div class="w-6 h-6 rounded-full bg-white"></div>
          </div>
          <div class="timeline-content flex-1">
            <div class="ff-general-sans fw-500 fs-14-lh-16-ls-0 text-brand mb-4">
              ${event.status || 'Status Update'}
            </div>
            <div class="ff-general-sans fw-400 fs-12-lh-14-ls-0 text-primary-70pct">
              ${eventDate}
            </div>
            ${
              event.description
                ? `
              <div class="ff-general-sans fw-400 fs-13-lh-16-ls-0 text-primary-80pct mt-4">
                ${event.description}
              </div>
            `
                : ''
            }
          </div>
        </div>
      `;
      })
      .join('');

    container.innerHTML = `
      <div class="timeline-container">
        <h4 class="ff-general-sans fw-500 fs-16-lh-18-ls-0 mb-16">Delivery Timeline</h4>
        ${timelineHTML}
      </div>
    `;
  }

  // Initialize when DOM is ready
  document.addEventListener('DOMContentLoaded', function () {
    setTimeout(() => {
      fetchOrderDeliveryStatus();
    }, 300);
  });
</script>
