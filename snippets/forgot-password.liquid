<style>
  .forgot-password-container {
    width: 100%;
    display: flex;
    justify-content: center;
    padding-top: 40px;
    padding-bottom: 16px;
  }
  .login-container {
    padding: 0px 0px;
  }

  .forgot-password-form {
    display: flex;
    flex-direction: column;
    min-width: 406px;
  }

  .forgot-password-header {
    text-align: center;
    display: flex;
    flex-direction: column;
  }

  .forgot-password-title {
    text-transform: uppercase;
  }

  .forgot-password-subtitle {
    display: flex;
    align-items: center;
    flex-direction: row;
    justify-content: center;
    gap: 12px;
  }

  .forgot-password-subtitle a {
    color: rgb(var(--color-primary-brand));
    text-decoration: none;
  }

  .forgot-password-form-container {
    display: flex;
    flex-direction: column;
  }

  .forgot-password-form-container form,
  .forgot-password-submit-form {
    display: flex;
    flex-direction: column;
    gap: 16px;
  }

  .forgot-password-button {
    width: 100%;
    background: rgb(var(--color-primary-brand));
    color: rgb(var(--color-background));
    border: none;
    padding: 14px;
    border-radius: 6px;
    cursor: pointer;
  }

  .forgot-password-button:disabled {
    background: #999;
    cursor: not-allowed;
  }

  .alert {
    padding: 12px 16px;
    border-radius: 8px;
    margin-bottom: 20px;
    font-size: 14px;
  }

  .alert-error {
    background-color: #fee;
    color: #c33;
    border: 1px solid #fcc;
  }

  .alert-success {
    background-color: #efe;
    color: #363;
    border: 1px solid #cfc;
  }

  .send-otp-btn {
    background: rgb(var(--color-primary-brand));
    color: rgb(var(--color-background));
    border: none;
    padding: 18px 10px;
    border-radius: 6px;
    cursor: pointer;
    white-space: nowrap;
  }

  .send-otp-btn:disabled {
    background: #999;
    cursor: not-allowed;
  }

  .back-link {
    text-align: center;
  }

  .back-link a {
    color: rgb(var(--color-primary-brand));
    text-decoration: none;
  }

  .forgot-password-phone {
    display: flex !important;
    flex-direction: column;
    gap: 16px;
  }

  /* Step Styles */
  .forgot-step {
    display: none !important;
  }

  .forgot-step.active {
    display: flex !important;
    flex-direction: column;
    gap: 16px;
  }

  .resend-otp {
    display: flex;
    text-align: center;
    justify-content: center;
    gap: 8px;
  }

  .resend-text {
    font-size: 14px;
    color: #666;
    margin: 0;
  }

  .resend-link {
    color: rgb(var(--color-primary-brand));
    text-decoration: none;
    font-weight: 600;
    cursor: pointer;
  }

  .resend-link:hover {
    text-decoration: underline;
  }

  .resend-link:disabled {
    color: #999;
    cursor: not-allowed;
  }

  /* Response Message Styles */
  .response-message {
    padding: 12px 16px;
    border-radius: 8px;
    margin-top: 16px;
    font-size: 14px;
    text-align: center;
    display: none;
  }

  .response-message.success {
    background-color: #efe;
    color: #363;
    border: 1px solid #cfc;
  }

  .response-message.error {
    background-color: #fee;
    color: #c33;
    border: 1px solid #fcc;
  }

  .response-message.show {
    display: block;
  }
</style>

<div class="forgot-password-container">
  <div id="forgot-password" class="forgot-password-form gap-32">
    <div class="forgot-password-header">
      <h1 class="forgot-password-title ff-bebas-neue fs-36-lh-40-ls-0 fw-400">
        {{ 'customer.recover_password.title' | t }}
      </h1>
    </div>

    <div class="forgot-password-form-container gap-16">
      <!-- Step 1: Phone Input -->
      <div id="step-phone" class="forgot-step  forgot-password-phone gap-16 active">
        <div class="forgot-input-phone-field-container">
          {% assign phoneLabel = 'customer.login.phone' | t -%}
          {% assign phonePlaceholder = 'customer.register.phone_placeholder' | t -%}
          <div class="phone-input-wrapper gap-16">
            {% render 'input',
              type: 'tel',
              id: 'forgot-phone',
              name: 'phone',
              label: phoneLabel,
              placeholder: phonePlaceholder,
              autocomplete: 'tel',
              required: true,
              class: 'forgot-input-phone-field phone-input',
              value: ''
            %}
          </div>
        </div>
        <button type="button" id="send-otp-button" class="send-otp-btn ff-general-sans fs-14-lh-100pct-ls-0 fw-600">
          {{ 'customer.register.send_otp' | t }}
        </button>
      </div>

      <div id="step-otp" class="forgot-step">
        {% render 'otp-input' %}

        <button
          id="verify-otp-button"
          class="forgot-password-button ff-general-sans fs-14-lh-100pct-ls-0 fw-600"
        >
          {{ 'customer.login.verify_otp' | t | default: 'Verify OTP' }}
        </button>

        <div class="resend-otp">
          <p class="resend-text ff-general-sans fs-14-lh-20-ls-0_1 fw-400">
            {{ 'customer.login.otp_not_received' | t }}
            <span id="resend-otp-link" class="resend-link ff-general-sans fs-14-lh-20-ls-0_1 fw-600">
              {{ 'customer.login.resend_otp' | t }}
            </span>
          </p>
        </div>
      </div>

      <!-- Step 3: Password Fields -->
      <div id="step-password" class="forgot-step">
        <!-- New Password -->
        {%- assign newPasswordLabel = 'customer.recover_password.new_password' | t | default: 'New Password' -%}
        {%- assign newPasswordPlaceholder = 'customer.recover_password.new_password' | t | default: 'New Password' -%}
        {% render 'input',
          type: 'password',
          id: 'forgot-new-password',
          name: 'new_password',
          label: newPasswordLabel,
          placeholder: newPasswordPlaceholder,
          autocomplete: 'new-password',
          required: true,
          class: 'forgot-input-new-password-field',
          value: ''
        %}

        <!-- Confirm New Password -->
        {%- assign confirmPasswordLabel = 'customer.recover_password.confirm_password' | t -%}
        {%- assign confirmPasswordPlaceholder = 'customer.recover_password.confirm_password' | t -%}
        {% render 'input',
          type: 'password',
          id: 'forgot-confirm-password',
          name: 'confirm_password',
          label: confirmPasswordLabel,
          placeholder: confirmPasswordPlaceholder,
          autocomplete: 'new-password',
          required: true,
          class: 'forgot-input-confirm-password-field',
          value: ''
        %}

        <button
          id="reset-password-button"
          class="forgot-password-button ff-general-sans fs-14-lh-100pct-ls-0 fw-600"
        >
          {{ 'customer.recover_password.submit' | t | default: 'Reset Password' }}
        </button>
      </div>

      <!-- Response Message -->
      <div id="response-message" class="response-message"></div>

      <div class="back-link">
        <a
          href="{{ routes.account_login_url }}"
          class="ff-general-sans fs-14-lh-100pct-ls-0 fw-600"
          aria-label="{{ 'customer.recover_password.cancel' | t  }}"
        >
          {{ 'customer.register.log_in' | t }}
        </a>
      </div>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    // Password toggles (from your existing code)
    const passwordToggles = document.querySelectorAll('.toggle-password');

    passwordToggles.forEach((toggle) => {
      toggle.addEventListener('click', function () {
        const targetId = this.getAttribute('data-target');
        const passwordInput = document.getElementById(targetId);
        const openEye = passwordInput.parentElement.querySelector('.password-toggle-eye-open');
        const closeEye = passwordInput.parentElement.querySelector('.password-toggle-eye-close');

        if (passwordInput.type === 'password') {
          passwordInput.type = 'text';
          if (openEye) openEye.style.display = 'none';
          if (closeEye) closeEye.style.display = 'flex';
        } else {
          passwordInput.type = 'password';
          if (closeEye) closeEye.style.display = 'none';
          if (openEye) openEye.style.display = 'flex';
        }
      });
    });

    // Form elements
    const phoneInput = document.getElementById('forgot-phone');
    const newPasswordInput = document.getElementById('forgot-new-password');
    const confirmPasswordInput = document.getElementById('forgot-confirm-password');
    const sendOtpButton = document.getElementById('send-otp-button');
    const verifyOtpButton = document.getElementById('verify-otp-button');
    const resetPasswordButton = document.getElementById('reset-password-button');
    const resendOtpLink = document.getElementById('resend-otp-link');
    const otpContainer = document.getElementById('otp-container');
    const otpMessage = document.getElementById('otp-message');
    const otpDigits = document.querySelectorAll('.otp-digit');
    const otpHiddenInput = document.getElementById('customer-otp-hidden');
    const responseMessage = document.getElementById('response-message');

    // Step elements
    const stepPhone = document.getElementById('step-phone');
    const stepOtp = document.getElementById('step-otp');
    const stepPassword = document.getElementById('step-password');

    const API_BASE_URL = `/apps/${APP_SUB_PATH}/customer/account`;

    let isOtpSent = false;
    let phoneNumber = '';
    let resendTimeout = null;

    // Phone validation - Bangladesh numbers
    function validatePhoneNumber(phone) {
      if (!phone || phone.trim() === '') return false;
      let cleanedPhone = phone.replace(/[\s-]/g, '');

      // Check if it's a valid BD number with or without +88
      if (cleanedPhone.startsWith('+88')) {
        cleanedPhone = cleanedPhone.substring(3);
      }

      return /^01\d{9}$/.test(cleanedPhone);
    }

    // Clean phone number - smart +88 handling
    function cleanPhoneNumber(phone) {
      if (!phone || phone.trim() === '') return '';
      let cleanedPhone = phone.replace(/[\s-]/g, '');

      // If already has +88, keep it
      if (cleanedPhone.startsWith('+88')) {
        return cleanedPhone;
      }

      // If doesn't have +88, add it
      return '+88' + cleanedPhone;
    }

    // Show response message
    function showResponseMessage(message, type) {
      responseMessage.textContent = message;
      responseMessage.className = `response-message ${type} show`;

      // Auto hide after 5 seconds for success messages
      if (type === 'success') {
        setTimeout(() => {
          responseMessage.classList.remove('show');
        }, 5000);
      }
    }

    // Hide response message
    function hideResponseMessage() {
      responseMessage.classList.remove('show');
    }

    // Show message in OTP section
    function showMessage(element, message, type) {
      element.textContent = message;
      element.className = `otp-message ${type}`;
    }

    // Show specific step
    function showStep(stepNumber) {
      // Hide all steps
      stepPhone.classList.remove('active');
      stepOtp.classList.remove('active');
      stepPassword.classList.remove('active');

      // Show selected step
      switch (stepNumber) {
        case 1:
          stepPhone.classList.add('active');
          break;
        case 2:
          stepOtp.classList.add('active');
          if (otpContainer) otpContainer.classList.add('active');
          break;
        case 3:
          stepPassword.classList.add('active');
          break;
      }

      hideResponseMessage();
    }

    // OTP Input Handling (same as your registration code)
    function setupOtpInputs() {
      otpDigits.forEach((input, index) => {
        // Handle input
        input.addEventListener('input', function (e) {
          const value = e.target.value;

          // Only allow numbers
          if (!/^\d*$/.test(value)) {
            e.target.value = '';
            return;
          }

          // Add filled class
          if (value) {
            e.target.classList.add('filled');
            // Move to next input
            if (index < otpDigits.length - 1) {
              otpDigits[index + 1].focus();
            }
          } else {
            e.target.classList.remove('filled');
          }

          // Update hidden input
          updateOtpValue();
        });

        // Handle backspace
        input.addEventListener('keydown', function (e) {
          if (e.key === 'Backspace' && !e.target.value && index > 0) {
            otpDigits[index - 1].focus();
          }
        });

        // Handle paste
        input.addEventListener('paste', function (e) {
          e.preventDefault();
          const pastedData = e.clipboardData.getData('text');
          const digits = pastedData.replace(/\D/g, '').split('').slice(0, 6);

          digits.forEach((digit, i) => {
            if (otpDigits[i]) {
              otpDigits[i].value = digit;
              otpDigits[i].classList.add('filled');
            }
          });

          // Focus the next empty input or last input
          const nextEmptyIndex = digits.length < 6 ? digits.length : 5;
          if (otpDigits[nextEmptyIndex]) {
            otpDigits[nextEmptyIndex].focus();
          }
          updateOtpValue();
        });
      });
    }

    // Update hidden OTP input value
    function updateOtpValue() {
      const otpValue = Array.from(otpDigits)
        .map((input) => input.value)
        .join('');
      if (otpHiddenInput) otpHiddenInput.value = otpValue;
    }

    // Clear OTP inputs
    function clearOtpInputs() {
      otpDigits.forEach((input) => {
        input.value = '';
        input.classList.remove('filled');
      });
      if (otpHiddenInput) otpHiddenInput.value = '';
      if (otpDigits[0]) otpDigits[0].focus();
    }

    // Get OTP value
    function getOtpValue() {
      return Array.from(otpDigits)
        .map((input) => input.value)
        .join('');
    }

    // Step 1: Send OTP
    if (sendOtpButton) {
      sendOtpButton.addEventListener('click', async () => {
        const phone = phoneInput.value.trim();
        hideResponseMessage();

        if (!phone) {
          showResponseMessage('Please enter your phone number first.', 'error');
          return;
        }

        if (!validatePhoneNumber(phone)) {
          showResponseMessage('Please enter a valid Bangladesh phone number.', 'error');
          return;
        }

        phoneNumber = cleanPhoneNumber(phone);

        phoneInput.disabled = true;
        sendOtpButton.disabled = true;
        sendOtpButton.textContent = 'Sending...';
        showMessage(otpMessage, '', '');
        isOtpSent = false;

        try {
          const response = await fetch(`${API_BASE_URL}/send-otp`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ phone: phoneNumber, register: false }),
          });
          const data = await response.json();

          if (response.ok) {
            showStep(2);
            clearOtpInputs();
            showMessage(otpMessage, 'OTP sent to your phone.', 'success');
            isOtpSent = true;
          } else {
            showResponseMessage(data.message || 'Failed to send OTP. Please try again.', 'error');
          }

          phoneInput.disabled = false;
          sendOtpButton.disabled = false;
          sendOtpButton.textContent = '{{ "customer.register.send_otp" | t }}';
        } catch (error) {
          showResponseMessage('An error occurred while trying to send OTP.', 'error');
          phoneInput.disabled = false;
          sendOtpButton.disabled = false;
          sendOtpButton.textContent = '{{ "customer.register.send_otp" | t }}';
        }
      });
    }

    // Step 2: Verify OTP
    if (verifyOtpButton) {
      verifyOtpButton.addEventListener('click', async () => {
        const otpValue = getOtpValue();
        hideResponseMessage();

        if (otpValue.length !== 6) {
          showResponseMessage('Please enter the complete 6-digit OTP.', 'error');
          return;
        }

        verifyOtpButton.disabled = true;
        verifyOtpButton.textContent = 'Verifying...';

        try {
          const response = await fetch(`${API_BASE_URL}/confirm-otp`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ phone: phoneNumber, otp: otpValue }),
          });

          const data = await response.json();

          if (response.ok) {
            showStep(3);
            showResponseMessage('OTP verified successfully! Please set your new password.', 'success');
          } else {
            showResponseMessage(data.message || 'Invalid OTP. Please try again.', 'error');
            showMessage(otpMessage, 'Invalid OTP. Please check and try again.', 'error');
          }
        } catch (error) {
          showResponseMessage('OTP verification failed. Please try again.', 'error');
        } finally {
          verifyOtpButton.disabled = false;
          verifyOtpButton.textContent = '{{ "customer.login.verify_otp" | t | default: "Verify OTP" }}';
        }
      });
    }

    // Resend OTP
    if (resendOtpLink) {
      resendOtpLink.addEventListener('click', async (e) => {
        e.preventDefault();

        if (resendOtpLink.classList.contains('disabled')) return;

        // Disable resend temporarily
        resendOtpLink.classList.add('disabled');
        const originalText = resendOtpLink.textContent;
        resendOtpLink.textContent = 'Sending...';

        try {
          const response = await fetch(`${API_BASE_URL}/send-otp`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ phone: phoneNumber, register: false }),
          });

          const data = await response.json();

          if (response.ok) {
            showMessage(otpMessage, 'New OTP sent to your phone!', 'success');
            clearOtpInputs();
          } else {
            showMessage(otpMessage, 'Failed to resend OTP. Please try again.', 'error');
          }
        } catch (error) {
          showMessage(otpMessage, 'Failed to resend OTP. Please try again.', 'error');
        } finally {
          // Re-enable resend link after API call completes
          resendOtpLink.textContent = originalText;
          resendOtpLink.classList.remove('disabled');
        }
      });
    }

    // Step 3: Reset Password
    if (resetPasswordButton) {
      resetPasswordButton.addEventListener('click', async () => {
        const newPassword = newPasswordInput.value;
        const confirmPassword = confirmPasswordInput.value;
        hideResponseMessage();

        if (!newPassword || !confirmPassword) {
          showResponseMessage('Please fill in both password fields.', 'error');
          return;
        }

        if (newPassword.length < 6) {
          showResponseMessage('Password must be at least 6 characters long.', 'error');
          return;
        }

        if (newPassword !== confirmPassword) {
          showResponseMessage('Passwords do not match.', 'error');
          return;
        }

        resetPasswordButton.disabled = true;
        resetPasswordButton.textContent = 'Resetting...';

        try {
          const response = await fetch(`${API_BASE_URL}/forgot-password`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              phone: phoneNumber,
              password: newPassword,
            }),
          });

          const result = await response.json();

          if (response.ok) {
            showResponseMessage('Password reset successful! Redirecting to login...', 'success');
            setTimeout(() => {
              window.location.href = '/account/login';
            }, 2000);
          } else {
            showResponseMessage(result.message || 'Password reset failed. Please try again.', 'error');
          }
        } catch (error) {
          showResponseMessage('An error occurred during password reset. Please try again.', 'error');
        } finally {
          resetPasswordButton.disabled = false;
          resetPasswordButton.textContent = '{{ "customer.recover_password.submit" | t | default: "Reset Password" }}';
        }
      });
    }

    // Initialize OTP inputs
    setupOtpInputs();

    // Initial form check
    showStep(1);
  });
</script>
