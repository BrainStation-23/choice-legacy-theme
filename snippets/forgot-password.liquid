<style>
  /* Step Styles */
  .forgot-step {
    display: none !important;
  }

  .forgot-step.active {
    display: flex !important;
    flex-direction: column;
    gap: 16px;
  }

  .resend-link:disabled {
    color: #999;
    cursor: not-allowed !important;
  }

  .field-message {
    display: none;
    margin-top: 8px;
    font-size: 12px;
    font-weight: 500;
  }

  .field-message.show {
    display: flex;
    align-items: center;
  }

  .field-message.error-text {
    color: #c33;
  }

  .field-message.success-text {
    color: #363;
  }

  .response-message.success {
    color: #363;
  }

  .response-message.error {
    color: #c33;
  }
  .response-message {
    display: none !important;
  }

  .response-message.show {
    display: block;
  }

  .resend-link.disabled {
    color: #464c4f !important;
    cursor: not-allowed !important;
    pointer-events: none;
  }
</style>

<div class="w-full  ">
  <div id="forgot-password" class=" flex flex-col gap-32">
    <div class=" flex flex-col items-center">
      <h1 class="ff-bebas-neue fs-36-lh-40-ls-0 fw-400 uppercase">
        {{ 'customer.recover_password.title' | t }}
      </h1>
    </div>

    <div class=" flex flex-col gap-16">
      <!-- Step 1: Phone Input -->
      <div id="step-phone" class="forgot-step  flex flex-col gap-16 active">
        <div>
          {% assign phoneLabel = 'customer.login.phone' | t -%}
          {% assign phonePlaceholder = 'customer.register.phone_placeholder' | t -%}

          {% render 'input',
            type: 'tel',
            id: 'forgot-phone',
            name: 'phone',
            label: phoneLabel,
            placeholder: phonePlaceholder,
            autocomplete: 'tel',
            required: true,
            class: '',
            value: ''
          %}
          <div id="forgot-phone-message" class="field-message ff-general-sans"></div>
        </div>
        <button
          type="button"
          id="send-otp-button"
          class="button--solid  border-none rounded-6 cursor-pointer  ff-general-sans fs-14-lh-100pct-ls-0 fw-600 h-44 p-0"
        >
          {{ 'customer.register.send_otp' | t }}
        </button>
      </div>

      <div id="step-otp" class="forgot-step">
        {% render 'otp-input' %}
        <div id="forgot-otp-message" class="field-message ff-general-sans"></div>

        <button
          id="verify-otp-button"
          class="button--solid  border-none rounded-6 cursor-pointer  ff-general-sans fs-14-lh-100pct-ls-0 fw-600 h-44 p-0"
        >
          {{ 'customer.login.verify_otp' | t | default: 'Verify OTP' }}
        </button>

        <div class="resend-otp flex items-center justify-center gap-8">
          <p class="resend-text ff-general-sans fs-14-lh-20-ls-0_1 fw-400">
            {{ 'customer.login.otp_not_received' | t }}
            <span
              id="resend-otp-link"
              class="resend-link ff-general-sans fs-14-lh-20-ls-0_1 fw-600 text-brand  cursor-pointer "
            >
              {{ 'customer.login.resend_otp' | t }}
            </span>
          </p>
        </div>
      </div>

      <!-- Step 3: Password Fields -->
      <div id="step-password" class="forgot-step">
        <!-- New Password -->
        {%- assign newPasswordLabel = 'customer.recover_password.new_password' | t | default: 'New Password' -%}
        {%- assign newPasswordPlaceholder = 'customer.recover_password.new_password' | t | default: 'New Password' -%}
        {% render 'input',
          type: 'password',
          id: 'forgot-new-password',
          name: 'new_password',
          label: newPasswordLabel,
          placeholder: newPasswordPlaceholder,
          autocomplete: 'new-password',
          required: true,
          class: 'forgot-input-new-password-field',
          value: ''
        %}
        <div id="forgot-new-password-message" class="field-message ff-general-sans"></div>

        <!-- Confirm New Password -->
        {%- assign confirmPasswordLabel = 'customer.recover_password.confirm_password' | t -%}
        {%- assign confirmPasswordPlaceholder = 'customer.recover_password.confirm_password' | t -%}
        {% render 'input',
          type: 'password',
          id: 'forgot-confirm-password',
          name: 'confirm_password',
          label: confirmPasswordLabel,
          placeholder: confirmPasswordPlaceholder,
          autocomplete: 'new-password',
          required: true,
          class: 'forgot-input-confirm-password-field',
          value: ''
        %}
        <div id="forgot-confirm-password-message" class="field-message ff-general-sans"></div>

        <button
          id="reset-password-button"
          class=" button--solid  border-none rounded-6 cursor-pointer  ff-general-sans fs-14-lh-100pct-ls-0 fw-600 h-44 p-0"
        >
          {{ 'customer.recover_password.submit' | t }}
        </button>
      </div>

      <!-- Response Message -->
      <div
        id="response-message"
        class="response-message pt-12 pb-16 rounded-8 mt-16 fs-14-lh-20-ls-0_1 ff-general-sans fw-600 text-center"
      ></div>

      <div class="back-link text-brand text-center">
        <a
          href="{{ routes.account_login_url }}"
          class="ff-general-sans fs-14-lh-100pct-ls-0 fw-600 text-brand  no-underline"
          aria-label="{{ 'customer.recover_password.cancel' | t  }}"
        >
          {{ 'customer.register.log_in' | t }}
        </a>
      </div>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    // Use global toast manager if available, otherwise create new one
    let toastManager;
    if (window.globalToastManager) {
      toastManager = window.globalToastManager;
    } else {
      try {
        toastManager = new ToastNotificationManager();
      } catch (error) {
        console.error('Failed to initialize toast manager:', error);
      }
    }

    const phoneInput = document.getElementById('forgot-phone');
    const newPasswordInput = document.getElementById('forgot-new-password');
    const confirmPasswordInput = document.getElementById('forgot-confirm-password');
    const sendOtpButton = document.getElementById('send-otp-button');
    const verifyOtpButton = document.getElementById('verify-otp-button');
    const resetPasswordButton = document.getElementById('reset-password-button');
    const resendOtpLink = document.getElementById('resend-otp-link');

    const responseMessage = document.getElementById('response-message');

    // Field message elements
    const phoneMessage = document.getElementById('forgot-phone-message');
    const otpFieldMessage = document.getElementById('forgot-otp-message');
    const newPasswordMessage = document.getElementById('forgot-new-password-message');
    const confirmPasswordMessage = document.getElementById('forgot-confirm-password-message');

    // Step elements
    const stepPhone = document.getElementById('step-phone');
    const stepOtp = document.getElementById('step-otp');
    const stepPassword = document.getElementById('step-password');

    const API_BASE_URL = `/apps/${APP_SUB_PATH}/customer/account`;

    let isOtpSent = false;
    let phoneNumber = '';
    let verifiedOtp = null;

    // Timer variables
    let sendOtpTimer = null;
    let sendOtpCountdown = 0;
    let resendOtpTimer = null;
    let resendOtpCountdown = 0;

    // Phone validation - Bangladesh numbers
    function validatePhoneNumber(phone) {
      if (!phone || phone.trim() === '') return false;
      let cleanedPhone = phone.replace(/[\s-]/g, '');

      // Check if it's a valid BD number with or without +88
      if (cleanedPhone.startsWith('+88')) {
        cleanedPhone = cleanedPhone.substring(3);
      }

      return /^01\d{9}$/.test(cleanedPhone);
    }

    // Clean phone number - smart +88 handling
    function cleanPhoneNumber(phone) {
      if (!phone || phone.trim() === '') return '';
      let cleanedPhone = phone.replace(/[\s-]/g, '');

      // If already has +88, keep it
      if (cleanedPhone.startsWith('+88')) {
        return cleanedPhone;
      }

      // If doesn't have +88, add it
      return '+88' + cleanedPhone;
    }

    // Timer functions for Send OTP button
    function startSendOtpTimer() {
      sendOtpCountdown = 120; // 2 minutes
      sendOtpButton.disabled = true;

      sendOtpTimer = setInterval(() => {
        const minutes = Math.floor(sendOtpCountdown / 60);
        const seconds = sendOtpCountdown % 60;
        const timeString = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;

        sendOtpButton.textContent = `Retry in ${timeString}s`;

        sendOtpCountdown--;

        if (sendOtpCountdown < 0) {
          clearInterval(sendOtpTimer);
          sendOtpButton.disabled = false;
          sendOtpButton.textContent = 'Retry';
          sendOtpTimer = null;
        }
      }, 1000);
    }

    function clearSendOtpTimer() {
      if (sendOtpTimer) {
        clearInterval(sendOtpTimer);
        sendOtpTimer = null;
        sendOtpCountdown = 0;
        sendOtpButton.disabled = false;
        sendOtpButton.textContent = '{{ "customer.register.send_otp" | t }}';
      }
    }

    // Timer functions for Resend OTP link
    function startResendOtpTimer() {
      resendOtpCountdown = 120; // 2 minutes
      resendOtpLink.classList.add('disabled');

      const originalText = resendOtpLink.textContent;

      // Immediately show the initial countdown text
      const initialMinutes = Math.floor(resendOtpCountdown / 60);
      const initialSeconds = resendOtpCountdown % 60;
      const initialTimeString = `${initialMinutes.toString().padStart(2, '0')}:${initialSeconds
        .toString()
        .padStart(2, '0')}`;
      resendOtpLink.textContent = `Retry in ${initialTimeString}s`;

      resendOtpTimer = setInterval(() => {
        resendOtpCountdown--;

        if (resendOtpCountdown >= 0) {
          const minutes = Math.floor(resendOtpCountdown / 60);
          const seconds = resendOtpCountdown % 60;
          const timeString = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
          resendOtpLink.textContent = `Retry in ${timeString}s`;
        } else {
          clearInterval(resendOtpTimer);
          resendOtpLink.classList.remove('disabled');
          resendOtpLink.textContent = originalText;
          resendOtpTimer = null;
        }
      }, 1000);
    }

    function clearResendOtpTimer() {
      if (resendOtpTimer) {
        clearInterval(resendOtpTimer);
        resendOtpTimer = null;
        resendOtpCountdown = 0;
        resendOtpLink.classList.remove('disabled');
        resendOtpLink.textContent = '{{ "customer.login.resend_otp" | t }}';
      }
    }

    // Clear timers when phone number changes
    phoneInput.addEventListener('input', () => {
      clearSendOtpTimer();
      clearResendOtpTimer();
      hideFieldMessage(phoneMessage);
      isOtpSent = false;
    });

    // Field message functions
    function showFieldMessage(messageElement, message, type) {
      if (messageElement) {
        messageElement.textContent = message;
        messageElement.className = `field-message ${type} show ff-general-sans`;
      }
    }

    function hideFieldMessage(messageElement) {
      if (messageElement) {
        messageElement.className = 'field-message ff-general-sans';
      }
    }

    function hideAllFieldMessages() {
      hideFieldMessage(phoneMessage);
      hideFieldMessage(otpFieldMessage);
      hideFieldMessage(newPasswordMessage);
      hideFieldMessage(confirmPasswordMessage);
    }

    // Show response message (keeping for backward compatibility)
    function showResponseMessage(message, type) {
      responseMessage.textContent = message;
      responseMessage.className = `response-message ${type} show`;

      // Auto hide after 5 seconds for success messages
      if (type === 'success') {
        setTimeout(() => {
          responseMessage.classList.remove('show');
        }, 5000);
      }
    }

    // Hide response message
    function hideResponseMessage() {
      responseMessage.classList.remove('show');
    }

    // Get OTP utilities from the otp-input snippet
    const { otpContainer, otpMessage, showMessage, clearOtpInputs, getOtpValue } = window.otpUtils || {};

    // Show specific step
    function showStep(stepNumber) {
      // Hide all steps
      stepPhone.classList.remove('active');
      stepOtp.classList.remove('active');
      stepPassword.classList.remove('active');

      // Show selected step
      switch (stepNumber) {
        case 1:
          stepPhone.classList.add('active');
          break;
        case 2:
          stepOtp.classList.add('active');
          if (otpContainer) otpContainer.classList.add('active');
          break;
        case 3:
          stepPassword.classList.add('active');
          break;
      }

      hideResponseMessage();
      hideAllFieldMessages();
    }

    // Step 1: Send OTP
    if (sendOtpButton) {
      sendOtpButton.addEventListener('click', async () => {
        const phone = phoneInput.value.trim();
        hideAllFieldMessages();

        if (!phone) {
          showFieldMessage(phoneMessage, 'Please enter your phone number first.', 'error-text');
          return;
        }

        if (!validatePhoneNumber(phone)) {
          showFieldMessage(phoneMessage, 'Please enter a valid Bangladesh phone number.', 'error-text');
          return;
        }

        phoneNumber = cleanPhoneNumber(phone);

        phoneInput.disabled = true;
        sendOtpButton.disabled = true;
        sendOtpButton.innerHTML = '<spinner-component size="small" color="white"></spinner-component>';
        if (showMessage && otpMessage) showMessage(otpMessage, '', '');
        isOtpSent = false;

        try {
          const response = await fetch(`${API_BASE_URL}/send-otp`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ phone: phoneNumber, register: false }),
          });
          const data = await response.json();

          if (response.ok) {
            showStep(2);
            if (clearOtpInputs) clearOtpInputs();
            showFieldMessage(phoneMessage, `OTP sent to ${phoneNumber}`, 'success-text');

            // Show toast with error handling
            if (toastManager && typeof toastManager.show === 'function') {
              try {
                toastManager.show('OTP sent to your phone successfully!', 'success');
              } catch (error) {
                console.error('Error showing toast:', error);
              }
            } else {
              console.error('Toast manager not available');
            }
            isOtpSent = true;

            // Start resend timer when we move to step 2
            startResendOtpTimer();
          } else {
            if (data.errors && data.errors.phone) {
              showFieldMessage(phoneMessage, data.errors.phone, 'error-text');
            } else {
              if (toastManager && typeof toastManager.show === 'function') {
                toastManager.show(data.message || 'Failed to send OTP. Please try again.', 'error');
              }
            }
            // Reset send button on error
            sendOtpButton.disabled = false;
            sendOtpButton.textContent = isOtpSent ? 'Retry' : '{{ "customer.register.send_otp" | t }}';
          }

          phoneInput.disabled = false;
          if (!response.ok) {
            sendOtpButton.disabled = false;
            sendOtpButton.textContent = '{{ "customer.register.send_otp" | t }}';
          }
        } catch (error) {
          if (toastManager && typeof toastManager.show === 'function') {
            toastManager.show('An error occurred while trying to send OTP.', 'error');
          }
          phoneInput.disabled = false;
          sendOtpButton.disabled = false;
          sendOtpButton.textContent = '{{ "customer.register.send_otp" | t }}';
        }
      });
    }

    // Step 2: Verify OTP
    if (verifyOtpButton) {
      verifyOtpButton.addEventListener('click', async () => {
        const otpValue = getOtpValue ? getOtpValue() : '';
        hideAllFieldMessages();

        if (otpValue.length !== 6) {
          showFieldMessage(otpFieldMessage, 'Please enter the complete 6-digit OTP.', 'error-text');
          return;
        }

        verifyOtpButton.disabled = true;
        verifyOtpButton.innerHTML = '<spinner-component size="small" color="white"></spinner-component>';

        try {
          const response = await fetch(`${API_BASE_URL}/confirm-otp`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ phone: phoneNumber, otp: otpValue }),
          });

          const data = await response.json();

          if (response.ok) {
            verifiedOtp = otpValue;
            showStep(3);
            // Clear resend timer when OTP is verified successfully
            clearResendOtpTimer();
            if (toastManager && typeof toastManager.show === 'function') {
              try {
                toastManager.show('OTP verified successfully!', 'success');
              } catch (error) {
                console.error('Error showing OTP verified toast:', error);
              }
            } else {
              console.error('Toast manager not available for OTP verification');
            }
          } else {
            if (data.errors && data.errors.otp) {
              showFieldMessage(otpFieldMessage, data.errors.otp, 'error-text');
            } else {
              showFieldMessage(otpFieldMessage, data.message || 'Invalid OTP. Please try again.', 'error-text');
            }
            if (showMessage && otpMessage) showMessage(otpMessage, 'Invalid OTP. Please check and try again.', 'error');
          }
        } catch (error) {
          if (toastManager && typeof toastManager.show === 'function') {
            toastManager.show('OTP verification failed. Please try again.', 'error');
          }
        } finally {
          verifyOtpButton.disabled = false;
          verifyOtpButton.textContent = '{{ "customer.login.verify_otp" | t | default: "Verify OTP" }}';
        }
      });
    }

    // Resend OTP
    if (resendOtpLink) {
      resendOtpLink.addEventListener('click', async (e) => {
        e.preventDefault();

        if (resendOtpLink.classList.contains('disabled')) return;

        // Store original text and show loading
        const originalText = resendOtpLink.textContent;
        resendOtpLink.innerHTML = '<spinner-component size="small" color="white"></spinner-component>';
        resendOtpLink.classList.add('disabled');

        try {
          const response = await fetch(`${API_BASE_URL}/send-otp`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ phone: phoneNumber, register: false }),
          });

          const data = await response.json();

          if (response.ok) {
            if (toastManager && typeof toastManager.show === 'function') {
              try {
                toastManager.show('New OTP sent to your phone!', 'success');
              } catch (error) {
                console.error('Error showing resend OTP toast:', error);
              }
            } else {
              console.error('Toast manager not available for resend OTP');
            }
            if (clearOtpInputs) clearOtpInputs();
            // Start new countdown timer
            startResendOtpTimer();
          } else {
            if (toastManager && typeof toastManager.show === 'function') {
              toastManager.show(data.message || 'Failed to resend OTP. Please try again.', 'error');
            }
            // Reset link if failed
            resendOtpLink.textContent = originalText;
            resendOtpLink.classList.remove('disabled');
          }
        } catch (error) {
          if (toastManager && typeof toastManager.show === 'function') {
            toastManager.show('Failed to resend OTP. Please try again.', 'error');
          }
          // Reset link if error
          resendOtpLink.textContent = originalText;
          resendOtpLink.classList.remove('disabled');
        }
      });
    }

    // Step 3: Reset Password
    if (resetPasswordButton) {
      resetPasswordButton.addEventListener('click', async () => {
        const newPassword = newPasswordInput.value;
        const confirmPassword = confirmPasswordInput.value;
        hideAllFieldMessages();

        let hasError = false;

        if (!newPassword) {
          showFieldMessage(newPasswordMessage, 'New password is required.', 'error-text');
          hasError = true;
        } else if (newPassword.length < 6) {
          showFieldMessage(newPasswordMessage, 'Password must be at least 6 characters long.', 'error-text');
          hasError = true;
        }

        if (!confirmPassword) {
          showFieldMessage(confirmPasswordMessage, 'Please confirm your password.', 'error-text');
          hasError = true;
        } else if (newPassword !== confirmPassword) {
          showFieldMessage(confirmPasswordMessage, 'Passwords do not match.', 'error-text');
          hasError = true;
        }

        if (hasError) return;

        resetPasswordButton.disabled = true;
        resetPasswordButton.innerHTML = '<spinner-component size="small" color="white"></spinner-component>';

        try {
          const response = await fetch(`${API_BASE_URL}/forgot-password`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              phone: phoneNumber,
              password: newPassword,
              otp: verifiedOtp,
            }),
          });

          const result = await response.json();

          if (response.ok) {
            if (toastManager && typeof toastManager.show === 'function') {
              toastManager.show('Password reset successful!', 'success');
            }
            setTimeout(() => {
              window.location.href = '/account/login';
            }, 2000);
          } else {
            if (result.errors) {
              if (result.errors.password) {
                showFieldMessage(newPasswordMessage, result.errors.password, 'error-text');
              }
              if (result.errors.password_confirmation) {
                showFieldMessage(confirmPasswordMessage, result.errors.password_confirmation, 'error-text');
              }
            } else {
              if (toastManager && typeof toastManager.show === 'function') {
                toastManager.show(result.message || 'Password reset failed. Please try again.', 'error');
              }
            }
          }
        } catch (error) {
          if (toastManager && typeof toastManager.show === 'function') {
            toastManager.show('An error occurred during password reset. Please try again.', 'error');
          }
        } finally {
          resetPasswordButton.disabled = false;
          resetPasswordButton.textContent = '{{ "customer.recover_password.submit" | t | default: "Reset Password" }}';
        }
      });
    }

    // Clear field messages when user starts typing
    newPasswordInput.addEventListener('input', () => {
      hideFieldMessage(newPasswordMessage);
    });

    confirmPasswordInput.addEventListener('input', () => {
      hideFieldMessage(confirmPasswordMessage);
    });

    // Cleanup timers on page unload
    window.addEventListener('beforeunload', () => {
      clearSendOtpTimer();
      clearResendOtpTimer();
    });

    // Initial form check
    showStep(1);
  });
</script>
