<style>
  .pagination-btn.active {
    border-color: rgb(var(--color-primary-brand));
    color: rgb(var(--color-primary-brand))
  }
  .pagination-btn:disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }
  .review-tab.active-tab {
    border-bottom: 2px solid rgb(var(--color-primary-brand));
    color: rgb(var(--color-primary-brand));
  }
</style>

<div class="review-page-container flex flex-col gap-24">
  <h2 class="ff-general-sans fw-500 fs-23-lh-24-ls-0 text-left text-primary">{{ 'review.title' | t }}</h2>

  <div class="review-tabs flex gap-24">
    <button id="to-review-tab" class="review-tab active-tab cursor-pointer border-top-none border-right-none border-left-none border-bottom-none bg-bg text-label fs-16-lh-20-ls-0_1 fw-500 pt-12 pb-12" data-tab="to_review">{{ 'review.tabs.review' | t }}</button>
    <button id="reviewed-tab" class="review-tab cursor-pointer border-top-none border-right-none border-left-none border-bottom-none bg-bg text-label fs-16-lh-20-ls-0_1 fw-500 pt-12 pb-12" data-tab="reviewed">{{ 'review.tabs.reviewed' | t }}</button>
  </div>

  <div id="review-loader" style="text-align: center; padding: 2.5rem 0;">
  <spinner-component size="large" color="primary"></spinner-component>
</div>
  <table class="review-desktop-view table sm:hidden" style="display: none;">
    <thead>
      <tr class="h-48">
        <th class="fs-16-lh-16-ls-0 fw-500 ff-general-sans text-primary-70pct">{{ 'review.table.product' | t }}</th>
        <th id="rating-header" class="fs-16-lh-16-ls-0 fw-500 ff-general-sans text-primary-70pct text-center w-110">{{ 'review.table.rating' | t }}</th>
        <th class="fs-16-lh-16-ls-0 fw-500 ff-general-sans text-primary-70pct text-right">{{ 'review.table.action' | t }}</th>
      </tr>
    </thead>
    <tbody id="customer-review-items-desktop">
    </tbody>
  </table>
  <div id="customer-review-items-mobile" class="review-mobile-view hidden sm:flex flex-col gap-24" style="display: none;">
  </div>
  <div id="empty-review-message" style="display: none;">
    <p class="fw-500 fs-14-lh-16-ls-0">{{ 'review.empty' | t }}</p>
  </div>
  
  <div id="pagination-controls" class="flex justify-end items-center gap-8" style="display: none;">
  </div>
</div>

{%- render 'product-review-form', section_id: 'customer-review-modal', product: customer.orders.first.line_items.first.product, customer: customer, initial_classes: 'hidden' -%}

<script>
  let isReviewsInitialized = false;
  let activeTab = "to_review";
  let reviewPagination;

  const renderReviews = (items) => {
    const mobileCardContainer = document.querySelector(".review-mobile-view");
    const desktopTableBody = document.getElementById(
      "customer-review-items-desktop"
    );

    desktopTableBody.innerHTML = "";
    mobileCardContainer.innerHTML = "";

    const matchedProducts = [];
    const allProducts = {
      {% for product in collections.all.products %}
        "{{ product.id }}": {
          "title": "{{ product.title | escape }}",
          "featured_image": "{{ product.featured_image | image_url: width: 500 }}",
          "handle": "{{ product.handle }}",
          "url": "{{ product.url }}"
        }{% unless forloop.last %},{% endunless %}
      {% endfor %}
    };

    items.forEach(item => {
      const product = allProducts[String(item.productId)];
      if (product) {
        matchedProducts.push({
          ...product,
          id: item.productId,
          rating: item.rating,
        });
      }
    });

    matchedProducts.forEach((item) => {
      const productInfo = item;
      const productTitle = productInfo ? productInfo.title : ``;
      const imageUrl = productInfo?.featured_image
        ? productInfo.featured_image
        : "https://cdn.shopify.com/s/files/1/0533/2089/files/placeholder-images-image_large.png";
      const productUrl = productInfo.url;
      const ratingDisplay = item.rating ? `${item.rating} star` : "";
      const hasRating = item.rating !== null;
      const reviewButtonHTML = `<button type="button" class="fw-600 fs-14-lh-16-ls-0 text-center text-brand bg-transparent border-none cursor-pointer p-0"
      data-write-review-btn
      data-section-id="customer-review-modal"
      data-product-id="${item.productId}"
      >
      Review
      </button>`;
      const reviewColumnContent =
        activeTab === "reviewed" ? ratingDisplay : reviewButtonHTML;
      let desktopActionHTML = `<a href="${productUrl}"><svg width="28" height="17" viewBox="0 0 28 17" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M13.9785 16.8535C6.08789 16.8535 0.658203 10.418 0.658203 8.44531C0.658203 6.46289 6.09766 0.0273438 13.9785 0.0273438C21.957 0.0273438 27.2891 6.46289 27.2891 8.44531C27.2891 10.418 21.9668 16.8535 13.9785 16.8535ZM13.9785 13.709C16.8984 13.709 19.2715 11.3066 19.2715 8.44531C19.2715 5.50586 16.8984 3.18164 13.9785 3.18164C11.0391 3.18164 8.68555 5.50586 8.68555 8.44531C8.68555 11.3066 11.0391 13.709 13.9785 13.709ZM13.9785 10.4473C12.8652 10.4473 11.957 9.53906 11.957 8.44531C11.957 7.3418 12.8652 6.43359 13.9785 6.43359C15.082 6.43359 16 7.3418 16 8.44531C16 9.53906 15.082 10.4473 13.9785 10.4473Z" fill="#FB6F92"/></svg></a>`;
      let mobileActionHTML = "";
      if (hasRating) {
        const viewButtonMobile = `<a href="${productUrl}"><svg width="28" height="17" viewBox="0 0 28 17" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M13.9785 16.8535C6.08789 16.8535 0.658203 10.418 0.658203 8.44531C0.658203 6.46289 6.09766 0.0273438 13.9785 0.0273438C21.957 0.0273438 27.2891 6.46289 27.2891 8.44531C27.2891 10.418 21.9668 16.8535 13.9785 16.8535ZM13.9785 13.709C16.8984 13.709 19.2715 11.3066 19.2715 8.44531C19.2715 5.50586 16.8984 3.18164 13.9785 3.18164C11.0391 3.18164 8.68555 5.50586 8.68555 8.44531C8.68555 11.3066 11.0391 13.709 13.9785 13.709ZM13.9785 10.4473C12.8652 10.4473 11.957 9.53906 11.957 8.44531C11.957 7.3418 12.8652 6.43359 13.9785 6.43359C15.082 6.43359 16 7.3418 16 8.44531C16 9.53906 15.082 10.4473 13.9785 10.4473Z" fill="#FB6F92"/></svg></a>`;
        const ratingTextMobile = `<span class="ff-general-sans fw-600 fs-16-lh-24-ls-0 w-50pct text-center text-brand">${ratingDisplay}</span>`;
        mobileActionHTML = `<div class="flex justify-between items-center pt-12 pb-12 pl-24 pr-24">${ratingTextMobile}${viewButtonMobile}</div>`;
      } else {
        const viewButtonMobile = `<a href="${productUrl}"><svg width="28" height="17" viewBox="0 0 28 17" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M13.9785 16.8535C6.08789 16.8535 0.658203 10.418 0.658203 8.44531C0.658203 6.46289 6.09766 0.0273438 13.9785 0.0273438C21.957 0.0273438 27.2891 6.46289 27.2891 8.44531C27.2891 10.418 21.9668 16.8535 13.9785 16.8535ZM13.9785 13.709C16.8984 13.709 19.2715 11.3066 19.2715 8.44531C19.2715 5.50586 16.8984 3.18164 13.9785 3.18164C11.0391 3.18164 8.68555 5.50586 8.68555 8.44531C8.68555 11.3066 11.0391 13.709 13.9785 13.709ZM13.9785 10.4473C12.8652 10.4473 11.957 9.53906 11.957 8.44531C11.957 7.3418 12.8652 6.43359 13.9785 6.43359C15.082 6.43359 16 7.3418 16 8.44531C16 9.53906 15.082 10.4473 13.9785 10.4473Z" fill="#FB6F92"/></svg></a>`;
        const reviewButtonMobile = `<div class="fw-600 w-50pct fs-14-lh-16-ls-0 text-center text-brand">${reviewButtonHTML}</div>`;
        mobileActionHTML = `<div class="flex justify-between items-center gap-12 pt-12 pb-12 pl-24 pr-24">${reviewButtonMobile}${viewButtonMobile}</div>`;
      }
      const tableRow = document.createElement("tr");
      tableRow.innerHTML = `<td class="flex items-center gap-38"><img src="${imageUrl}" alt="${productTitle}" class="w-32 h-32 object-contain"><span class="product-name fw-400 fs-16-lh-24-ls-0 text-secondary">${productTitle}</span></td><td class="fw-600 fs-14-lh-16-ls-0 text-center text-brand">${reviewColumnContent}</td><td class="text-right relative"><div class="flex justify-end">${desktopActionHTML}</div></td>`;
      desktopTableBody.appendChild(tableRow);
      const mobileCard = document.createElement("div");
      mobileCard.className =
        "border border-solid border-color rounded-12 flex flex-col";
      mobileCard.innerHTML = `<div class="items-start flex justify-end items-start pt-10 pl-16 pb-10 pr-16"><div class="flex justify-end border-b border-b-color border-b-solid w-full pb-10"><img src="${imageUrl}" alt="${productTitle}" class="w-32 h-32 object-contain"></div></div><div class="product-name ff-general-sans fw-400 fs-16-lh-24-ls-0 pb-8 pl-12 pr-12 border-b border-b-color border-b-solid text-secondary">${productTitle}</div>${mobileActionHTML}`;
      mobileCardContainer.appendChild(mobileCard);
    });
  };

  const fetchAndDisplayReviews = async (tab, page = 1) => {
    const customerPurchasedProducts = [
      {%- for order in customer.orders -%}
        {%- for item in order.line_items -%}
          {
            "productId": {{ item.product_id }},
            "productHandle": "{{ item.product.handle | escape }}",
            "variantId": {{ item.variant_id }},
            "orderId": {{ order.id }},
            "orderName": {{ order.name | json }},
            "orderTotalPrice": {{ order.total_price }},
            "orderCustomerUrl": "{{ order.customer_url | escape }}"
          }
          {%- unless forloop.parentloop.last and forloop.last -%},{%- endunless -%}
        {%- endfor -%}
      {%- endfor -%}
    ];

    document.getElementById("review-loader").style.display = "block";
    document.querySelector(".review-desktop-view").style.display = "none";
    document.querySelector(".review-mobile-view").style.display = "none";
    document.getElementById("empty-review-message").style.display = "none";
    document.getElementById("pagination-controls").style.display = "none";
    const purchasedProducts = window.customerPurchasedProducts || [];
    const ITEMS_PER_PAGE = 10;

    try {
      const customerId = window.customerId;
      if (!customerId) {
        document.getElementById("empty-review-message").style.display = "block";
        document.getElementById("review-loader").style.display = "none";
        return;
      }
      const url = `/apps/${APP_SUB_PATH}/customer/product-review/all?page=${page}&limit=${ITEMS_PER_PAGE}&tab=${tab}`;
      const response = await fetch(url, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ purchasedProducts: purchasedProducts }),
      });
      const data = await response.json();
      if (data.success && data.reviews && data.reviews.length > 0) {
        renderReviews(data.reviews);
        if (reviewPagination) reviewPagination.update(data.pagination);
        document.querySelector(".review-desktop-view").removeAttribute("style");
        document.querySelector(".review-mobile-view").removeAttribute("style");
      } else {
        document.getElementById("empty-review-message").style.display = "block";
      }
    } catch (error) {
      console.error("Failed to fetch reviews:", error);
    } finally {
      if (document.getElementById("review-loader")) {
        document.getElementById("review-loader").style.display = "none";
      }
    }
  };

  const handleTabClick = (tabType) => {
    const reviewedTab = document.getElementById("reviewed-tab");
    const toReviewTab = document.getElementById("to-review-tab");
    const ratingHeader = document.getElementById("rating-header");

    activeTab = tabType;
    if (tabType === "reviewed") {
      reviewedTab.classList.add("active-tab");
      toReviewTab.classList.remove("active-tab");
      ratingHeader.textContent = "Rating";
    } else {
      toReviewTab.classList.add("active-tab");
      reviewedTab.classList.remove("active-tab");
      ratingHeader.textContent = "Review";
    }
    fetchAndDisplayReviews(activeTab, 1);
  };

  window.initializeReviewsTab = function () {
    if (!isReviewsInitialized) {
      isReviewsInitialized = true;

      const reviewedTab = document.getElementById("reviewed-tab");
      const toReviewTab = document.getElementById("to-review-tab");
      const ITEMS_PER_PAGE = 10;

      reviewPagination = new PaginationManager({
        containerId: "pagination-controls",
        mode: "backend",
        onPageChange: (newPage) => {
          fetchAndDisplayReviews(activeTab, newPage);
        },
      });

      document.addEventListener("review:submitted", () => {
        fetchAndDisplayReviews(activeTab, 1);
      });

      reviewedTab.addEventListener("click", () => handleTabClick("reviewed"));
      toReviewTab.addEventListener("click", () => handleTabClick("to_review"));

      document.addEventListener("click", (e) => {
        const reviewTriggerButton = e.target.closest(
          '[data-write-review-btn][data-section-id="customer-review-modal"]'
        );
        if (!reviewTriggerButton) return;
        const productId = reviewTriggerButton.dataset.productId;
        const reviewModal = document.getElementById(
          "review-modal-customer-review-modal"
        );
        if (reviewModal) {
          reviewModal.dataset.productId = productId;
        }
      });
    }

    handleTabClick("to_review");
  };

</script>