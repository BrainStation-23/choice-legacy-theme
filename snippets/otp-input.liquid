<style>
  .otp-message.success-text {
    display: flex;
    align-items: center;
  }
  .otp-digit:focus {
    outline: none;
    border-color: rgb(var(--color-primary-brand));
  }
  .otp-digit.filled {
    border-color: rgb(var(--color-primary-brand));
  }
  .otp-container {
    display: none;
  }
  .otp-container.active {
    display: flex;
    flex-direction: column;
    gap: 16px;
  }
  @media screen and (max-width: 768px) {
    .otp-digit {
      width: 45px;
      height: 45px;
    }
  }

  /* Mobile */
  @media screen and (max-width: 480px) {
    .otp-digit {
      width: 38px;
      height: 38px;
      padding: 10px 8px;
      font-size: 14px;
    }
  }

  /* Small phones */
  @media screen and (max-width: 360px) {
    .otp-digit {
      width: 32px;
      height: 32px;
      padding: 8px 6px;
      font-size: 12px;
    }
  }
</style>

<div class="otp-container" id="otp-container">
  <div class="otp-inputs flex gap-8 justify-center">
    {% for i in (0..5) %}
      <input
        type="text"
        class="otp-digit h-56 w-47 text-center border-2 border-color border-solid flex-1 rounded-6 pl-16 pr-16 pb-18 pt-18 fs-14-lh-20-ls-0_1 ff-general-sans fw-500 sm:pt-12 sm:pb-12  sm:pl-10 sm:pr-10"
        maxlength="1"
        data-index="{{ i }}"
        inputmode="numeric"
        placeholder="-"
      >
    {% endfor %}
  </div>
  <div id="otp-message" class="otp-message flex gap-8 items-center"></div>
  <input type="hidden" id="customer-otp-hidden" name="customer[note][otp_code]" value="">
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const otpContainer = document.getElementById('otp-container');
    const otpMessage = document.getElementById('otp-message');
    const otpDigits = document.querySelectorAll('.otp-digit');
    const otpHiddenInput = document.getElementById('customer-otp-hidden');

    function showMessage(element, message, type) {
      element.textContent = message;
      element.className = `otp-message ${type}`;
    }

    function setupOtpInputs() {
      otpDigits.forEach((input, index) => {
        input.addEventListener('input', function (e) {
          const value = e.target.value;
          if (!/^\d*$/.test(value)) {
            e.target.value = '';
            return;
          }
          if (value) {
            e.target.classList.add('filled');
            if (index < otpDigits.length - 1) {
              otpDigits[index + 1].focus();
            }
          } else {
            e.target.classList.remove('filled');
          }
          updateOtpValue();
        });

        input.addEventListener('keydown', function (e) {
          if (e.key === 'Backspace' && !e.target.value && index > 0) {
            otpDigits[index - 1].focus();
          }
        });

        input.addEventListener('paste', function (e) {
          e.preventDefault();
          const pastedData = e.clipboardData.getData('text');
          const digits = pastedData.replace(/\D/g, '').split('').slice(0, 6);

          digits.forEach((digit, i) => {
            if (otpDigits[i]) {
              otpDigits[i].value = digit;
              otpDigits[i].classList.add('filled');
            }
          });

          const nextEmptyIndex = digits.length < 6 ? digits.length : 5;
          if (otpDigits[nextEmptyIndex]) {
            otpDigits[nextEmptyIndex].focus();
          }
          updateOtpValue();
        });
      });
    }

    function updateOtpValue() {
      const otpValue = Array.from(otpDigits)
        .map((input) => input.value)
        .join('');
      otpHiddenInput.value = otpValue;
    }

    function clearOtpInputs() {
      otpDigits.forEach((input) => {
        input.value = '';
        input.classList.remove('filled');
      });
      otpHiddenInput.value = '';
      if (otpDigits[0]) otpDigits[0].focus();
    }

    function getOtpValue() {
      return Array.from(otpDigits)
        .map((input) => input.value)
        .join('');
    }

    // expose functions to global for main-register to use
    window.otpUtils = {
      otpContainer,
      otpMessage,
      showMessage,
      setupOtpInputs,
      clearOtpInputs,
      getOtpValue,
    };

    setupOtpInputs();
  });
</script>
