{%- comment -%}
  Parameters:
  - results {Object} - Results object (collection or search).
  - section {Object} - Section object for accessing settings.

  Usage:
  {% render 'sort-dropdown', results: collection, section: section %}
{%- endcomment -%}

{%- liquid
  assign sort_by = results.sort_by
  assign current_sort_name = 'products.sorting.sort_by_label' | t

  if sort_by and sort_by != blank
    for option in results.sort_options
      if option.value == sort_by
        assign current_sort_name = option.name
        break
      endif
    endfor
  endif
-%}

<style>
  .filter__toggle:hover {
    border-color: rgba(var(--color-primary-brand));
  }

  .disclosure__panel.has-motion {
    opacity: 0;
    transform: translateY(-16px);
    transition: opacity 0.2s ease, transform 0.2s ease;
  }

  details[open] .disclosure__panel.has-motion {
    opacity: 1;
    transform: translateY(0);
  }

  .sort__content li:hover label {
    cursor: pointer;
  }

  details[open] .disclosure__toggle svg {
    transform: rotate(180deg);
  }

  .close-icon:hover {
    opacity: 0.7;
  }

  .sort__content li label {
    cursor: pointer;
    width: 100%;
    display: flex;
    align-items: center;
  }

  .sorting-spinner {
    backdrop-filter: blur(3px);
    transition: all 0.3s ease-in-out;
  }
  .disclosure__toggle svg {
    height: 36px !important;
    width: 36px !important;
  }

  .sort__footer {
    display: none; /* Hide on desktop */
  }

  /* Mobile sort side modal */
  @media (max-width: 768px) {
    .sort__footer {
      display: block;
    }
    .disclosure__panel.has-motion {
      position: fixed !important;
      top: 0;
      right: -100%;
      width: 100%;
      height: 100%;
      background: rgb(var(--color-background));
      z-index: 9999;
      transform: translateX(100%);
      opacity: 1;
      transition: transform 0.3s ease-in-out;
      display: flex;
      flex-direction: column;
    }
    .sort-overlay {
      position: fixed;
      inset: 0;
      background: rgba(0, 0, 0, 0.4);
      z-index: 9998;
      opacity: 0;
      pointer-events: none;
      transition: opacity 0.3s ease-in-out;
    }

    details[open] ~ .sort-overlay {
      opacity: 1;
      pointer-events: all;
    }
    details[open] .disclosure__panel.has-motion {
      transform: translateX(0);
      right: 0;
    }

    .sort__content {
      flex: 1;
      overflow-y: auto;
    }
  }
</style>

<details-disclosure class="md:hidden no-js-visible max-w-180 h-40 m-0 fs-36-lh-40-ls-0 fw-400">
  <details
    class="filter disclosure"
    id="filter-sort"
    data-type="sort"
    {% if section.settings.expand_filters %}
      open
    {% endif %}
  >
    <summary class="filter__toggle list-style-none w-full max-w-200 h-40 border-1 border-solid border-color flex items-center justify-between rounded-6 p-8 cursor-pointer relative ">
      <span class="current-sort-display fw-400 fs-14-lh-16-ls-0 " id="current-sort-text">
        {{ current_sort_name }}
      </span>
      <span class="disclosure__toggle">
        {% render 'icon-arrow-down' %}
      </span>
    </summary>

    <div class="disclosure__panel has-motion absolute z-9999 max-w-340 w-full bg-bg rounded-6 pl-0 pr-0 box-shadow sm:rounded-0">
      <div class="sort__content flex flex-col gap-8 p-16">
        <div class="flex items-center justify-between">
          <h1 class="p-0 m-0 ff-bebas-neue fw-400 fs-21-lh-24-ls-1_2pct">
            {{- 'products.sorting.sort_by_label' | t -}}
          </h1>
          <span class="cursor-pointer p-0 m-0 close-icon" id="sort-close-btn">
            {% render 'close-button', id: 'sort-close-btn' %}
          </span>
        </div>
        <ul class="p-0 flex gap-8 flex-col list-style-none">
          {%- for option in results.sort_options -%}
            {%- unless option.value == 'manual' and section.settings.show_feat_sort_opt == false -%}
              {%- liquid
                assign is_checked = false
                if sort_by and sort_by != blank and option.value == sort_by
                  assign is_checked = true
                endif
              -%}
              <li
                class="flex m-0 cursor-pointer pt-2 pb-2 px-2 rounded-6 list-style-none"
                data-sort-value="{{ option.value }}"
                data-sort-name="{{ option.name }}"
              >
                {%
                  render 'input-radio',
                  id: 'filter-sort-' | append: forloop.index,
                  name: 'sort_by',
                  value: option.value,
                  label: option.name,
                  checked: is_checked,
                  type: 'radio',
                  input-class: "radio"
                %}
              </li>
            {%- endunless -%}
          {%- endfor -%}
        </ul>
      </div>

      <div class="sort__footer p-16  mt-auto">
        <button
          id="apply-sort-btn"
          class="button--solid button-primary border-none w-full rounded-12 fs-16-lh-20-ls-0_1 fw-600"
        >
          {{ 'products.filtering.apply' | t }}
        </button>
      </div>
    </div>
  </details>
  <div class="sort-overlay"></div>
</details-disclosure>

<script>
  document.addEventListener('DOMContentLoaded', function () {
    const sortDetails = document.getElementById('filter-sort');
    const radioInputs = sortDetails?.querySelectorAll('input[type="radio"]');
    const currentSortText = document.getElementById('current-sort-text');
    const closeBtn = document.getElementById('sort-close-btn');
    const sortItems = sortDetails?.querySelectorAll('.sort__content li');
    const overlay = document.querySelector('.sort-overlay');
    let selectedSort = null;

    if (overlay) {
      overlay.addEventListener('click', function () {
        sortDetails.removeAttribute('open');
      });
    }

    // Handle Apply button (mobile only)
    const applyBtn = document.getElementById('apply-sort-btn');
    if (applyBtn) {
      applyBtn.addEventListener('click', function () {
        if (selectedSort) {
          handleSortChange(selectedSort.value, selectedSort.name);
          sortDetails.removeAttribute('open');
        }
      });
    }

    // Handle radio button changes
    if (radioInputs) {
      radioInputs.forEach(function (radio) {
        radio.addEventListener('change', function () {
          if (this.checked) {
            selectedSort = {
              value: this.value,
              name: this.closest('li').dataset.sortName,
            };

            // On desktop: apply immediately
            if (window.innerWidth > 768) {
              handleSortChange(selectedSort.value, selectedSort.name);
            }
          }
        });
      });
    }

    // Handle clicking on list items (entire row clickable)
    if (sortItems) {
      sortItems.forEach(function (item) {
        item.addEventListener('click', function (e) {
          if (e.target.type !== 'radio') {
            const radio = this.querySelector('input[type="radio"]');
            if (radio && !radio.checked) {
              radio.checked = true;
              radio.dispatchEvent(new Event('change'));
            }
          }
        });
      });
    }

    // Handle close button click - reset sort
    if (closeBtn) {
      closeBtn.addEventListener('click', function (e) {
        e.preventDefault();
        e.stopPropagation();

        const spinner = document.getElementById('filtering-spinner');
        if (spinner) {
          spinner.classList.remove('hidden');
        }

        sortDetails.removeAttribute('open');

        const urlObj = new URL(window.location.href);
        urlObj.searchParams.delete('sort_by');
        urlObj.searchParams.delete('page');
        urlObj.searchParams.delete('phcursor');
        window.location.href = urlObj.toString();
      });
    }

    // Close dropdown when clicking outside (desktop only)
    document.addEventListener('click', function (e) {
      if (window.innerWidth > 768 && sortDetails && !sortDetails.contains(e.target) && sortDetails.open) {
        sortDetails.removeAttribute('open');
      }
    });

    function handleSortChange(value, name) {
      const spinner = document.getElementById('filtering-spinner');
      if (spinner) {
        spinner.classList.remove('hidden');
      }

      if (currentSortText && name) {
        currentSortText.textContent = name;
      }

      setTimeout(function () {
        sortDetails.removeAttribute('open');
      }, 150);

      setTimeout(function () {
        const mockEvent = { detail: { selectedValue: value } };

        if (window.customElements && customElements.get('products-toolbar')) {
          const ProductsToolbar = customElements.get('products-toolbar');
          ProductsToolbar.handleSortByChange(mockEvent);
        } else {
          const urlObj = new URL(window.location.href);
          urlObj.searchParams.set('sort_by', value);
          urlObj.searchParams.delete('page');
          urlObj.searchParams.delete('phcursor');
          urlObj.hash = 'products-toolbar';
          window.location.href = urlObj.toString();
        }
      }, 200);
    }
  });
</script>
