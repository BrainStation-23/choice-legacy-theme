{%- comment -%}
  Parameters:
  - results {Object} - Results object (collection or search).
  - section {Object} - Section object for accessing settings.

  Usage:
  {% render 'sort-dropdown', results: collection, section: section %}
{%- endcomment -%}

{%- liquid
  assign sort_by = results.sort_by | default: results.default_sort_by
-%}

<style>
  .filter__toggle:hover {
    border-color: rgba(var(--color-primary-brand));
  }

  .disclosure__panel.has-motion {
    top: calc(100% + 44px);
    opacity: 0;
    transform: translateY(-8px);
    transition: opacity 0.2s ease, transform 0.2s ease;
  }

  details[open] .disclosure__panel.has-motion {
    opacity: 1;
    transform: translateY(0);
  }

  .sort__content li:hover {
    background: #f8f9fa;
  }

  details[open] .disclosure__toggle svg {
    transform: rotate(180deg);
  }
</style>

<details-disclosure class="md:hidden no-js-visible">
  <details
    class="filter disclosure"
    id="filter-sort"
    data-type="sort"
    {% if section.settings.expand_filters %}
      open
    {% endif %}
  >
    <summary class="filter__toggle list-style-none w-full max-w-120 h-40 border-1 border-solid border-color flex items-center justify-between rounded-6 p-8 cursor-pointer relative ">
      <span class="m-0 p-0 ff-general-sans fw-500 fs-14-lh-20-ls-0_1">
        {{- 'products.sorting.sort_by_label' | t -}}
      </span>
      <span class="disclosure__toggle">
        {% render 'icon-arrow-down' %}
      </span>
    </summary>

    <div class="disclosure__panel has-motion absolute z-9999 w-full max-w-240 bg-bg rounded-6 pt-8 pb-8 pl-0 pr-0 box-shadow">
      <div class="disclosure__content">
        <div class="sort__content">
          <ul class="p-16 flex gap-8 flex-col list-style-none">
            {%- for option in results.sort_options -%}
              {%- unless option.value == 'manual' and section.settings.show_feat_sort_opt == false -%}
                <li class="flex  items-center m-0  cursor-pointer pl-8 pr-8 pt-2 pb-2 rounded-6 list-style-none">
                  {%
                    render 'input-radio',
                    id: 'filter-sort-' | append: forloop.index,
                    name: 'sort_by',
                    value: option.value,
                    label: option.name,
                    checked: option.value == sort_by,
                    input-class: "radio"
                  %}
                </li>
              {%- endunless -%}
            {%- endfor -%}
          </ul>
        </div>
      </div>
    </div>
  </details>
</details-disclosure>

<script>
  document.addEventListener('DOMContentLoaded', function () {
    const sortDetails = document.getElementById('filter-sort');
    const radioInputs = sortDetails?.querySelectorAll('input[type="radio"]');

    if (radioInputs) {
      radioInputs.forEach(function (radio) {
        radio.addEventListener('change', function () {
          if (this.checked) {
            // Close the dropdown after selection
            setTimeout(function () {
              sortDetails.removeAttribute('open');
            }, 150);

            // Optional: Dispatch custom event
            document.dispatchEvent(
              new CustomEvent('sortChanged', {
                detail: {
                  value: radio.value,
                  name: radio.nextElementSibling?.textContent.trim(),
                },
              })
            );
          }
        });
      });
    }

    // Close dropdown when clicking outside
    document.addEventListener('click', function (e) {
      if (sortDetails && !sortDetails.contains(e.target) && sortDetails.open) {
        sortDetails.removeAttribute('open');
      }
    });
  });
</script>
