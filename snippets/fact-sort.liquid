{%- comment -%}
  Parameters:
  - results {Object} - Results object (collection or search).
  - section {Object} - Section object for accessing settings.

  Usage:
  {% render 'sort-dropdown', results: collection, section: section %}
{%- endcomment -%}

{%- liquid
  assign sort_by = results.sort_by | default: results.default_sort_by
  assign current_sort_name = 'products.sorting.sort_by_label' | t

  for option in results.sort_options
    if option.value == sort_by
      assign current_sort_name = option.name
      break
    endif
  endfor
-%}

<style>
  .filter__toggle:hover {
    border-color: rgba(var(--color-primary-brand));
  }

  .disclosure__panel.has-motion {
    top: calc(100% + 44px);
    opacity: 0;
    transform: translateY(-8px);
    transition: opacity 0.2s ease, transform 0.2s ease;
  }

  details[open] .disclosure__panel.has-motion {
    opacity: 1;
    transform: translateY(0);
  }

  .sort__content li:hover {
    background: rgb(var(--color-secondary-brand));
    border-radius: 6px;
  }

  .sort__content li:hover label {
    cursor: pointer;
  }

  details[open] .disclosure__toggle svg {
    transform: rotate(180deg);
  }

  .close-icon:hover {
    opacity: 0.7;
  }

  .sort__content li label {
    cursor: pointer;
    width: 100%;
    display: flex;
    align-items: center;
  }

  /* Sorting spinner overlay styles */
  .sorting-spinner {
    backdrop-filter: blur(3px);
    transition: all 0.3s ease-in-out;
  }
</style>

<details-disclosure class="md:hidden no-js-visible">
  <details
    class="filter disclosure"
    id="filter-sort"
    data-type="sort"
    {% if section.settings.expand_filters %}
      open
    {% endif %}
  >
    <summary class="filter__toggle list-style-none w-full max-w-200 h-40 border-1 border-solid border-color flex items-center justify-between rounded-6 p-8 cursor-pointer relative ">
      <span class="current-sort-display fw-400 fs-14-lh-16-ls-0 " id="current-sort-text">
        {{ current_sort_name }}
      </span>
      <span class="disclosure__toggle">
        {% render 'icon-arrow-down' %}
      </span>
    </summary>

    <div class="disclosure__panel has-motion absolute z-9999 w-full max-w-240 bg-bg rounded-6 pt-8 pb-8 pl-0 pr-0 box-shadow">
      <div class="disclosure__content">
        <div class="sort__content flex flex-col gap-8 p-16">
          <div class="flex items-center justify-between">
            <h1 class="p-0 m-0 ff-bebas-neue fw-400  fs-21-lh-24-ls-1_2pct">
              {{- 'products.sorting.sort_by_label' | t -}}
            </h1>
            <span class="cursor-pointer p-0 m-0 close-icon" id="sort-close-btn">
              {% render 'icon-close', height: 28, width: 28 %}
            </span>
          </div>
          <ul class="p-0 flex gap-8 flex-col list-style-none">
            {%- for option in results.sort_options -%}
              {%- unless option.value == 'manual' and section.settings.show_feat_sort_opt == false -%}
                {%- liquid
                  assign is_checked = false
                  if option.value == sort_by
                    assign is_checked = true
                  endif
                -%}
                <li
                  class="flex m-0 cursor-pointer pt-2 pb-2 px-2 rounded-6 list-style-none"
                  data-sort-value="{{ option.value }}"
                  data-sort-name="{{ option.name }}"
                >
                  {%
                    render 'input-radio',
                    id: 'filter-sort-' | append: forloop.index,
                    name: 'sort_by',
                    value: option.value,
                    label: option.name,
                    checked: is_checked,
                    type: 'radio',
                    input-class: "radio"
                  %}
                </li>
              {%- endunless -%}
            {%- endfor -%}
          </ul>
        </div>
      </div>
    </div>
  </details>
</details-disclosure>

<script>
  document.addEventListener('DOMContentLoaded', function () {
    const sortDetails = document.getElementById('filter-sort');
    const radioInputs = sortDetails?.querySelectorAll('input[type="radio"]');
    const currentSortText = document.getElementById('current-sort-text');
    const closeBtn = document.getElementById('sort-close-btn');
    const sortItems = sortDetails?.querySelectorAll('.sort__content li');

    // Handle radio button changes
    if (radioInputs) {
      radioInputs.forEach(function (radio) {
        radio.addEventListener('change', function () {
          if (this.checked) {
            handleSortChange(this.value, this.closest('li').dataset.sortName);
          }
        });
      });
    }

    // Handle clicking on list items (makes entire row clickable)
    if (sortItems) {
      sortItems.forEach(function (item) {
        item.addEventListener('click', function (e) {
          // Don't trigger if clicking directly on radio button (to avoid double trigger)
          if (e.target.type !== 'radio') {
            const radio = this.querySelector('input[type="radio"]');
            if (radio && !radio.checked) {
              radio.checked = true;
              handleSortChange(radio.value, this.dataset.sortName);
            }
          }
        });
      });
    }

    // Handle close button click - clear sort (reset to default)
    if (closeBtn) {
      closeBtn.addEventListener('click', function (e) {
        e.preventDefault();
        e.stopPropagation();

        // Show spinner immediately
        const spinner = document.getElementById('sorting-spinner');
        if (spinner) {
          spinner.classList.remove('hidden');
        }

        // Close dropdown
        sortDetails.removeAttribute('open');

        // Clear sort by removing sort_by parameter
        const urlObj = new URL(window.location.href);
        urlObj.searchParams.delete('sort_by');
        window.location.href = urlObj.toString();
      });
    }

    // Close dropdown when clicking outside
    document.addEventListener('click', function (e) {
      if (sortDetails && !sortDetails.contains(e.target) && sortDetails.open) {
        sortDetails.removeAttribute('open');
      }
    });

    function handleSortChange(value, name) {
      // Show spinner immediately
      const spinner = document.getElementById('sorting-spinner');
      if (spinner) {
        spinner.classList.remove('hidden');
      }

      // Update display text immediately
      if (currentSortText && name) {
        currentSortText.textContent = name;
      }

      // Close the dropdown after selection
      setTimeout(function () {
        sortDetails.removeAttribute('open');
      }, 150);

      // Apply sort
      setTimeout(function () {
        const mockEvent = {
          detail: {
            selectedValue: value,
          },
        };

        if (window.customElements && customElements.get('products-toolbar')) {
          const ProductsToolbar = customElements.get('products-toolbar');
          ProductsToolbar.handleSortByChange(mockEvent);
        } else {
          const urlObj = new URL(window.location.href);
          urlObj.searchParams.set('sort_by', value);
          urlObj.hash = 'products-toolbar';
          window.location.href = urlObj.toString();
        }
      }, 200);
    }
  });
</script>
