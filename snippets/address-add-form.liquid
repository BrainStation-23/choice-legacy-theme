<style>
  .field-message {
    display: none;
    margin-top: 8px;
    font-size: 12px;
    font-weight: 500;
  }
  .field-message.show {
    display: flex;
    align-items: center;
  }
  .field-message.error-text {
    color: #dc3545;
  }
  .field-message.success-text {
    color: #28a745;
  }
</style>

{%- form 'customer_address', customer.new_address, aria-labelledBy: 'AddressNewHeading', novalidate: 'novalidate', class: 'address-form' -%}
  <div class="flex flex-col gap-24">
    <div class="flex gap-8  items-center ">
      <div id="set-default-address-checkbox-{{ address.id }}" class="flex">
        {{ form.set_as_default_checkbox }}
      </div>
      <h1 class="ff-general-sans fw-500 fs-16-lh-20-ls-0_1 m-0">
        {{ 'customer.addresses.set_default' | t }}
      </h1>
    </div>

    <div class="grid grid-cols-2 gap-16 sm:grid-cols-1">
      {%- assign firstNameLabel = 'customer.addresses.first_name' | t -%}
      {%- assign firstNamePlaceholder = 'customer.addresses.first_name' | t -%}
      <div>
        {%
          render 'input',
          type: 'text',
          id: "AddressFirstNameNew" | append: address.id,
          name: "address[first_name]",
          label: firstNameLabel,
          placeholder: firstNamePlaceholder,
          autocomplete: 'given-name',
          required: false,
          class: '',
          value: form.first_name,
        %}
        <div id="first-name-message" class="field-message ff-general-sans"></div>
      </div>

      {%- assign lastNameLabel = 'customer.addresses.last_name' | t -%}
      {%- assign lastNamePlaceholder = 'customer.addresses.last_name' | t -%}
      <div>
        {%
          render 'input',
          type: 'text',
          id: "AddressLastNameNew" | append: address.id,
          name: "address[last_name]",
          label: lastNameLabel,
          placeholder: lastNamePlaceholder,
          autocomplete: 'family-name',
          required: true,
          class: '',
          value: form.last_name,
        %}
        <div id="last-name-message" class="field-message ff-general-sans"></div>
      </div>

      {%- assign address1Label = 'customer.addresses.address' | t -%}
      {%- assign address1Placeholder = 'customer.addresses.address' | t -%}
      <div>
        {%
          render 'input',
          type: 'text',
          id: "AddressAddress1New" | append: address.id,
          name: "address[address1]",
          label: address1Label,
          placeholder: address1Placeholder,
          autocomplete: 'address-line1',
          required: true,
          class: '',
          value: form.address1,
        %}
        <div id="address-message" class="field-message ff-general-sans"></div>
      </div>

      {%- assign cityLabel = 'customer.addresses.city' | t -%}
      {%- assign cityPlaceholder = 'customer.addresses.city' | t -%}
      <div>
        {%
          render 'input',
          type: 'text',
          id: "AddressCityNew" | append: address.id,
          name: "address[city]",
          label: cityLabel,
          placeholder: cityPlaceholder,
          autocomplete: 'address-level2',
          required: true,
          class: '',
          value: form.city,
        %}
        <div id="city-message" class="field-message ff-general-sans"></div>
      </div>

      {%- assign zipLabel = 'customer.addresses.zip' | t -%}
      {%- assign zipPlaceholder = 'customer.addresses.zip' | t -%}
      <div>
        {%
          render 'input',
          type: 'text',
          id: "AddressZipNew" | append: address.id,
          name: "address[zip]",
          label: zipLabel,
          placeholder: zipPlaceholder,
          autocomplete: 'postal-code',
          required: true,
          class: '',
          value: form.zip,
        %}
        <div id="zip-message" class="field-message ff-general-sans"></div>
      </div>

      {%- assign phoneLabel = 'customer.addresses.phone' | t -%}
      {%- assign phonePlaceholder = 'customer.addresses.phone' | t -%}
      <div>
        {%
          render 'input',
          type: 'tel',
          id: "AddressPhoneNew" | append: address.id,
          name: "address[phone]",
          label: phoneLabel,
          placeholder: phonePlaceholder,
          autocomplete: 'tel',
          required: true,
          class: '',
          value: form.phone,
        %}
        <div id="phone-message" class="field-message ff-general-sans"></div>
      </div>
    </div>
    <div class="grid grid-cols-1 gap-16 max-w-216">
      <button
        type="submit"
        id="save-address-btn-{{ address.id }}"
        class="button--solid border-none rounded-6 cursor-pointer ff-general-sans fw-600 fs-16-lh-100pct-ls-0"
      >
        {{ 'customer.addresses.save' | t }}
      </button>
    </div>
  </div>
{% endform %}

<script>
document.addEventListener('DOMContentLoaded', function() {
  const form = document.querySelector('.address-form');
  const firstNameInput = document.getElementById('AddressFirstNameNew{{ address.id }}');
  const lastNameInput = document.getElementById('AddressLastNameNew{{ address.id }}');
  const addressInput = document.getElementById('AddressAddress1New{{ address.id }}');
  const cityInput = document.getElementById('AddressCityNew{{ address.id }}');
  const zipInput = document.getElementById('AddressZipNew{{ address.id }}');
  const phoneInput = document.getElementById('AddressPhoneNew{{ address.id }}');
  const submitButton = document.getElementById('save-address-btn-{{ address.id }}');
  
  // Error message elements
  const firstNameMessage = document.getElementById('first-name-message');
  const lastNameMessage = document.getElementById('last-name-message');
  const addressMessage = document.getElementById('address-message');
  const cityMessage = document.getElementById('city-message');
  const zipMessage = document.getElementById('zip-message');
  const phoneMessage = document.getElementById('phone-message');

  // Validation functions
  function showFieldMessage(messageElement, message, type) {
    if (messageElement) {
      messageElement.textContent = message;
      messageElement.className = `field-message ${type} show ff-general-sans`;
    }
  }

  function hideFieldMessage(messageElement) {
    if (messageElement) {
      messageElement.className = 'field-message ff-general-sans';
    }
  }

  function validateMinLength(value, minLength = 3) {
    return value.trim().length >= minLength;
  }

  function validatePhoneNumber(phone) {
    // Remove all non-digits
    const cleaned = phone.replace(/\D/g, '');
    
    // Check for valid Bangladesh phone number patterns
    // Mobile: 01XXXXXXXX (11 digits total)
    // With country code: +8801XXXXXXXX or 8801XXXXXXXX
    const patterns = [
      /^01[0-9]{9}$/,           // 01XXXXXXXX (11 digits)
      /^\+8801[0-9]{8}$/,       // +8801XXXXXXXX
      /^8801[0-9]{8}$/          // 8801XXXXXXXX
    ];
    
    return patterns.some(pattern => pattern.test(phone.replace(/\s+/g, '')));
  }

  function validateField(input, messageElement, fieldName, isRequired = true, minLength = 3) {
    const value = input.value.trim();
    
    if (isRequired && !value) {
      showFieldMessage(messageElement, `${fieldName} is required.`, 'error-text');
      return false;
    }
    
    if (value && !validateMinLength(value, minLength)) {
      showFieldMessage(messageElement, `${fieldName} must be at least ${minLength} characters.`, 'error-text');
      return false;
    }
    
    hideFieldMessage(messageElement);
    return true;
  }

  function validatePhoneField() {
    const value = phoneInput.value.trim();
    
    if (!value) {
      showFieldMessage(phoneMessage, 'Phone number is required.', 'error-text');
      return false;
    }
    
    if (!validatePhoneNumber(value)) {
      showFieldMessage(phoneMessage, 'Please enter a valid Bangladesh phone number (e.g., 01712345678).', 'error-text');
      return false;
    }
    
    hideFieldMessage(phoneMessage);
    return true;
  }

  function validateForm() {
    let isValid = true;
    
    // First name is optional, so only validate if provided
    if (firstNameInput.value.trim() && !validateMinLength(firstNameInput.value.trim(), 3)) {
      showFieldMessage(firstNameMessage, 'First name must be at least 3 characters.', 'error-text');
      isValid = false;
    } else {
      hideFieldMessage(firstNameMessage);
    }
    
    // Validate required fields
    if (!validateField(lastNameInput, lastNameMessage, 'Last name', true, 3)) isValid = false;
    if (!validateField(addressInput, addressMessage, 'Address', true, 3)) isValid = false;
    if (!validateField(cityInput, cityMessage, 'City', true, 3)) isValid = false;
    if (!validateField(zipInput, zipMessage, 'ZIP/Postal code', true, 3)) isValid = false;
    
    // Validate phone number
    if (!validatePhoneField()) isValid = false;
    
    return isValid;
  }

  // Real-time validation
  if (firstNameInput) {
    firstNameInput.addEventListener('blur', function() {
      if (this.value.trim() && !validateMinLength(this.value.trim(), 3)) {
        showFieldMessage(firstNameMessage, 'First name must be at least 3 characters.', 'error-text');
      } else {
        hideFieldMessage(firstNameMessage);
      }
    });
  }

  if (lastNameInput) {
    lastNameInput.addEventListener('blur', function() {
      validateField(this, lastNameMessage, 'Last name', true, 3);
    });
  }

  if (addressInput) {
    addressInput.addEventListener('blur', function() {
      validateField(this, addressMessage, 'Address', true, 3);
    });
  }

  if (cityInput) {
    cityInput.addEventListener('blur', function() {
      validateField(this, cityMessage, 'City', true, 3);
    });
  }

  if (zipInput) {
    zipInput.addEventListener('blur', function() {
      validateField(this, zipMessage, 'ZIP/Postal code', true, 3);
    });
  }

  if (phoneInput) {
    phoneInput.addEventListener('blur', function() {
      validatePhoneField();
    });
  }

  // Form submission validation
  if (form) {
    form.addEventListener('submit', function(e) {
      if (!validateForm()) {
        e.preventDefault();
        return false;
      }
    });
  }
});
</script>
