<style>
  .customer-support-chat {
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
    background-color: #f5f5f5;
    height: 100vh;
    display: flex;
    flex-direction: column;
    max-width: 500px;
    margin: 0 auto;
    box-shadow: 0 0 20px rgba(0,0,0,0.1);
  }

  .chat-header {
    background-color: #fff;
    padding: 16px 20px;
    border-bottom: 1px solid #e0e0e0;
    box-shadow: 0 1px 3px rgba(0,0,0,0.1);
  }

  .chat-header h1 {
    font-size: 18px;
    font-weight: 600;
    color: #333;
    margin: 0;
  }

  .chat-container {
    flex: 1;
    display: flex;
    flex-direction: column;
    overflow: hidden;
  }

  .messages-container {
    flex: 1;
    overflow-y: auto;
    padding: 20px;
    background-color: #f5f5f5;
  }

  .message {
    margin-bottom: 16px;
    display: flex;
    flex-direction: column;
  }

  .message.user {
    align-items: flex-end;
  }

  .message.support {
    align-items: flex-start;
  }

  .message-bubble {
    max-width: 70%;
    padding: 12px 16px;
    border-radius: 18px;
    font-size: 14px;
    line-height: 1.4;
    word-wrap: break-word;
  }

  .message.user .message-bubble {
    background-color: #ff6b9d;
    color: white;
  }

  .message.support .message-bubble {
    background-color: white;
    color: #333;
    border: 1px solid #e0e0e0;
  }

  .message-info {
    font-size: 11px;
    color: #999;
    margin-top: 4px;
    display: flex;
    align-items: center;
    gap: 8px;
  }

  .message.user .message-info {
    justify-content: flex-end;
  }

  .message-input-container {
    background-color: white;
    padding: 16px 20px;
    border-top: 1px solid #e0e0e0;
    display: flex;
    align-items: center;
    gap: 12px;
  }

  .message-input {
    flex: 1;
    border: 1px solid #e0e0e0;
    border-radius: 20px;
    padding: 12px 16px;
    font-size: 14px;
    outline: none;
    background-color: #f8f8f8;
  }

  .message-input:focus {
    border-color: #ff6b9d;
    background-color: white;
  }

  .send-button {
    background-color: #ff6b9d;
    color: white;
    border: none;
    border-radius: 20px;
    padding: 12px 24px;
    font-size: 14px;
    font-weight: 500;
    cursor: pointer;
    transition: background-color 0.2s;
  }

  .send-button:hover {
    background-color: #e55a87;
  }

  .send-button:disabled {
    background-color: #ccc;
    cursor: not-allowed;
  }

  .loading {
    text-align: center;
    color: #666;
    padding: 20px;
  }

  .empty-state {
    text-align: center;
    color: #666;
    padding: 40px 20px;
  }

  .empty-state p {
    font-size: 14px;
    line-height: 1.5;
    margin: 0;
  }

  .confirmation-message {
    background-color: #e8f5e8;
    color: #2e7d2e;
    padding: 12px 16px;
    margin: 16px 20px;
    border-radius: 8px;
    font-size: 14px;
    display: none;
  }

  .error-message {
    background-color: #ffeaea;
    color: #d63384;
    padding: 12px 16px;
    margin: 16px 20px;
    border-radius: 8px;
    font-size: 14px;
    display: none;
  }

  /* Scrollbar styling */
  .messages-container::-webkit-scrollbar {
    width: 6px;
  }

  .messages-container::-webkit-scrollbar-track {
    background: transparent;
  }

  .messages-container::-webkit-scrollbar-thumb {
    background: #ccc;
    border-radius: 3px;
  }

  .messages-container::-webkit-scrollbar-thumb:hover {
    background: #bbb;
  }

  /* Mobile responsiveness */
  @media (max-width: 768px) {
    .customer-support-chat {
      height: calc(100vh - 60px);
      max-width: 100%;
    }
    
    .message-bubble {
      max-width: 85%;
    }
  }
</style>

<div class="customer-support-chat">
  <div class="chat-header">
    <h1>Customer Support</h1>
  </div>

  <div id="confirmation-message" class="confirmation-message"></div>
  <div id="error-message" class="error-message"></div>

  <div class="chat-container">
    <div id="messages-container" class="messages-container" data-customer-id="{{ customer.id }}">
      <div id="loading" class="loading">Loading messages...</div>
    </div>

    <form id="support-form" class="message-input-container">
      <input 
        type="text" 
        name="message" 
        id="message-input" 
        class="message-input" 
        placeholder="Write a message..."
        required
      />
      <button type="submit" class="send-button" id="send-button">Send</button>
    </form>
  </div>
</div>

<script>
  document.addEventListener("DOMContentLoaded", async () => {
    const form = document.getElementById("support-form");
    const messageInput = document.getElementById("message-input");
    const sendButton = document.getElementById("send-button");
    const confirmationEl = document.getElementById("confirmation-message");
    const errorEl = document.getElementById("error-message");
    const messagesContainer = document.getElementById("messages-container");
    const loadingEl = document.getElementById("loading");
    
    // Get customer ID from data attribute
    const customerId = messagesContainer?.dataset?.customerId;
    const apiUrl = const apiUrl = `/apps/${APP_SUB_PATH}/customer/customer-service-management/message`;

    // Helper functions
    function showMessage(element, message, isError = false) {
      element.textContent = message;
      element.style.display = 'block';
      setTimeout(() => {
        element.style.display = 'none';
      }, 5000);
    }

    function scrollToBottom() {
      messagesContainer.scrollTop = messagesContainer.scrollHeight;
    }

    function formatDate(dateString) {
      const date = new Date(dateString);
      const now = new Date();
      const isToday = date.toDateString() === now.toDateString();
      
      if (isToday) {
        return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
      } else {
        return date.toLocaleDateString([], { month: 'short', day: 'numeric' }) + 
               ' • ' + date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
      }
    }

    // Submit message
    form?.addEventListener("submit", async (e) => {
      e.preventDefault();
      
      const message = messageInput.value.trim();
      if (!message) return;

      sendButton.disabled = true;
      sendButton.textContent = 'Sending...';

      try {
        const res = await fetch(apiUrl, {
          method: "POST",
          headers: { 
            "Content-Type": "application/json",
            "X-Requested-With": "XMLHttpRequest"
          },
          body: JSON.stringify({ message }),
        });

        const data = await res.json();

        if (res.ok) {
          showMessage(confirmationEl, data.message || 'Message sent successfully!');
          messageInput.value = '';
          await loadMessages(); // Refresh message history
        } else {
          showMessage(errorEl, data.error || "Failed to send message.", true);
        }
      } catch (err) {
        showMessage(errorEl, "Error sending message. Please try again.", true);
      } finally {
        sendButton.disabled = false;
        sendButton.textContent = 'Send';
        messageInput.focus();
      }
    });

    // Load message history
    async function loadMessages() {
      if (!customerId) {
        messagesContainer.innerHTML = `
          <div class="empty-state">
            <p>Please log in to view messages.</p>
          </div>
        `;
        return;
      }

      try {
        loadingEl.style.display = 'block';
        const res = await fetch(apiUrl, {
          headers: {
            "X-Requested-With": "XMLHttpRequest"
          }
        });
        const data = await res.json();

        if (res.ok) {
          loadingEl.style.display = 'none';
          
          if (!data.messages || !data.messages.length) {
            messagesContainer.innerHTML = `
              <div class="empty-state">
                <p>No messages yet.<br>Start a conversation with our support team!</p>
              </div>
            `;
            return;
          }

          const html = data.messages
            .map((msg) => {
              const isUser = msg.sender === "user";
              const senderName = isUser ? "You" : "Support";
              const messageClass = isUser ? "user" : "support";
              const formattedDate = formatDate(msg.created_at);
              
              return `
                <div class="message ${messageClass}">
                  <div class="message-bubble">
                    ${msg.message}
                  </div>
                  <div class="message-info">
                    <span>${senderName}</span>
                    <span>•</span>
                    <span>${formattedDate}</span>
                  </div>
                </div>
              `;
            })
            .join("");

          messagesContainer.innerHTML = html;
          scrollToBottom();
        } else {
          loadingEl.style.display = 'none';
          messagesContainer.innerHTML = `
            <div class="empty-state">
              <p>${data.error || "Could not load messages."}</p>
            </div>
          `;
        }
      } catch (err) {
        loadingEl.style.display = 'none';
        messagesContainer.innerHTML = `
          <div class="empty-state">
            <p>Failed to load messages.<br>Please refresh the page.</p>
          </div>
        `;
      }
    }

    // Auto-resize input on enter
    messageInput?.addEventListener('keydown', (e) => {
      if (e.key === 'Enter' && !e.shiftKey) {
        e.preventDefault();
        form.dispatchEvent(new Event('submit'));
      }
    });

    // Initial message history load
    await loadMessages();

    // Poll for new messages every 10 seconds
    if (customerId) {
      setInterval(async () => {
        await loadMessages();
      }, 10000);
    }

    // Focus on input
    messageInput?.focus();
  });
</script>