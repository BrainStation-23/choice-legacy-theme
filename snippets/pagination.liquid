{%- if paginate.pages > 1 -%}
  <div class="flex  {{ class }}">
    <nav role="navigation" aria-label="{{ 'general.pagination.label' | t }}">
      <ul role="list" class="flex gap-8 m-0 p-0 list-style-none ">
        {%- if paginate.previous -%}
          <li class="pl-12 pr-12  border border-color border-solid rounded-6 h-40 w-40 flex items-center justify-center">
            <a
              href="{{ paginate.previous.url }}#{{ section_id | default: 'pagination-section' }}"
              class="text-primary  flex items-center justify-center  rounded-6 no-underline text-brand ff-general-sans fw-500 fs-14-lh-20-ls-0_1"
              aria-label="{{ 'general.pagination.previous' | t }}"
            >
              {% render 'icon-left-arrow' %}
            </a>
          </li>
        {%- endif -%}

        {%- for part in paginate.parts -%}
          <li class="pl-12 pr-12  border border-color border-solid rounded-6 h-40 w-40 flex items-center justify-center">
            {%- if part.is_link -%}
              <a
                href="{{ part.url }}#{{ section_id | default: 'pagination-section' }}"
                class="text-primary  flex items-center justify-center  rounded-6 no-underline ff-general-sans fw-500 fs-14-lh-20-ls-0_1"
                aria-label="{{ 'general.pagination.page' | t: number: part.title }}"
              >
                {{- part.title -}}
              </a>
            {%- else -%}
              {%- if part.title == paginate.current_page -%}
                <span
                  aria-current="page"
                  aria-label="{{ 'general.pagination.page' | t: number: part.title }}"
                  class="text-brand  flex items-center justify-center  no-underline ff-general-sans fw-500 fs-14-lh-20-ls-0_1"
                >
                  {{- part.title -}}
                </span>
              {%- else -%}
                <span class="flex items-center justify-center  rounded-6 no-underline ff-general-sans fw-500 fs-14-lh-20-ls-0_1">
                  {{- part.title -}}
                </span>
              {%- endif -%}
            {%- endif -%}
          </li>
        {%- endfor -%}

        {%- if paginate.next -%}
          <li class="pl-12 pr-12  border border-color border-solid rounded-6 h-40 w-40 flex items-center justify-center">
            <a
              href="{{ paginate.next.url }}#{{ section_id | default: 'pagination-section' }}"
              class="flex items-center justify-center  rounded-6 no-underline  text-brand ff-general-sans fw-500 fs-14-lh-20-ls-0_1"
              aria-label="{{ 'general.pagination.next' | t }}"
            >
              {% render 'icon-right-arrow' %}
            </a>
          </li>
        {%- endif -%}
      </ul>
    </nav>
  </div>

  <script>
    document.addEventListener('DOMContentLoaded', function () {
      initializeSearchPagination();
    });

    function initializeSearchPagination() {
      const paginationLinks = document.querySelectorAll('.pagination-container a[href*="page="]');

      paginationLinks.forEach((link) => {
        link.addEventListener('click', function (e) {
          e.preventDefault();
          const url = this.href;
          loadSearchResults(url);
        });
      });
    }

    async function loadSearchResults(url) {
      try {
        // Show loading spinner
        const spinner = document.getElementById('filtering-spinner');
        const resultsContainer = document.getElementById('filter-results');

        if (spinner) spinner.classList.remove('hidden');
        if (resultsContainer) resultsContainer.style.opacity = '0.7';

        // Fetch the new page
        const response = await fetch(url, {
          headers: {
            'X-Requested-With': 'XMLHttpRequest',
          },
        });

        if (!response.ok) throw new Error('Failed to load results');

        const html = await response.text();
        const parser = new DOMParser();
        const doc = parser.parseFromString(html, 'text/html');

        // Update results
        const newResults = doc.querySelector('#filter-results');
        if (newResults && resultsContainer) {
          resultsContainer.innerHTML = newResults.innerHTML;
        }

        // Update pagination
        const paginationContainer = document.querySelector('.pagination-container');
        const newPagination = doc.querySelector('.pagination-container');
        if (newPagination && paginationContainer) {
          paginationContainer.innerHTML = newPagination.innerHTML;
        }

        // Update URL without refresh
        history.pushState({ url: url }, '', url);

        // Scroll to top of results
        const mainGrid = document.querySelector('.main-products-grid');
        if (mainGrid) {
          mainGrid.scrollIntoView({ behavior: 'smooth', block: 'start' });
        }

        // Re-initialize pagination listeners
        initializeSearchPagination();

        // Hide loading spinner
        if (spinner) spinner.classList.add('hidden');
        if (resultsContainer) resultsContainer.style.opacity = '1';
      } catch (error) {
        console.error('Error loading search results:', error);

        // Hide spinner and restore state on error
        const spinner = document.getElementById('filtering-spinner');
        const resultsContainer = document.getElementById('filter-results');
        if (spinner) spinner.classList.add('hidden');
        if (resultsContainer) resultsContainer.style.opacity = '1';

        // Fallback to normal page load
        window.location.href = url;
      }
    }

    // Handle browser back/forward buttons
    window.addEventListener('popstate', function (event) {
      if (event.state && event.state.url) {
        loadSearchResults(event.state.url);
      } else {
        location.reload();
      }
    });

    // Make function globally available
    window.initializeSearchPagination = initializeSearchPagination;
  </script>
{%- endif -%}
