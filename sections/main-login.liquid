<style>
  .h-captcha {
    display: none;
  }
</style>

<div class=" w-full flex justify-center pt-48 pb-88">
  <!-- LOGIN FORM -->
  <div id="login" class=" flex gap-32  flex-col min-w-406  ">
    <div class=" gap-8 flex flex-col items-center">
      <h1 class=" ff-bebas-neue fs-36-lh-40-ls-0 fw-400 uppercase">{{ 'customer.login.title' | t }}</h1>
      <div class="  flex gap-12 items-center flex-row justify-center">
        <h2 class="ff-general-sans fs-16-lh-22-ls-0 fw-600">
          {{ 'customer.login.new_customer' | t }}
        </h2>
        <a
          href="{{ routes.account_register_url }}"
          class="ff-general-sans fs-14-lh-100pct-ls-0 fw-600 no-underline text-brand "
        >
          {{ 'customer.login.create_account' | t -}}
        </a>
      </div>
    </div>
    <div class=" flex  gap-16 flex-col">
      {%- form 'customer_login', novalidate: 'novalidate', class: 'login-submit-form flex flex-col gap-16' -%}
        {%- if form.errors -%}
          <div class="alert alert-error" tabindex="-1" autofocus>
            {{ form.errors | default_errors }}
          </div>
        {%- endif -%}

        <!-- Hidden Email Field -->
        <div class=" hidden">
          <input
            type="email"
            class="form-input"
            id="customer-email"
            name="customer[email]"
            autocomplete="email"
            {%- if form.errors contains 'form' %}
              aria-invalid="true"
            {%- endif %}
            aria-required="true"
            required
          >
        </div>
        {%- assign phoneLabel = 'customer.login.phone' | t -%}
        {%- assign placeholder = 'customer.login.phone' | t -%}

        {%
          render 'input',
          type: 'number',
          id: 'customer-phone',
          name: 'customer[phone]',
          label: phoneLabel,
          placeholder: placeholder,
          autocomplete: 'tel',
          required: true,
          class: 'login-input-phone-field',
          invalid: form.errors contains 'form'
        %}

        <!-- Password Field -->
        {%- if form.password_needed -%}
          {%- assign passwordLabel = 'customer.login.password' | t -%}
          {%- assign passwordPlaceholder = 'customer.login.password' | t -%}

          {%
            render 'input',
            type: 'password',
            id: 'customer-password',
            name: 'customer[password]',
            label: passwordLabel,
            placeholder: passwordPlaceholder,
            required: true,
            class: '',
            invalid: form.errors contains 'form'
          %}
        {%- endif -%}
        <div>
          <a
            class="forgot-password js-recover fs-14-lh-100pct-ls-0 fw-600 ff-general-sans no-underline text-brand "
            href="#recover"
          >
            {{ 'customer.login.forgot_password' | t }}
          </a>
        </div>
      {%- endform -%}

      <!-- External Login Button -->
      <button id="login-submit-button-external" class="button  ff-general-sans fs-14-lh-100pct-ls-0 fw-600">
        {{ 'customer.login.sign_in' | t }}
      </button>
    </div>
  </div>

  <!-- Forgot Password Section (Initially Hidden) -->
  <div id="forgot-password-section" class="hidden">
    {% render 'forgot-password' %}
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const passwordToggles = document.querySelectorAll('.toggle-password');

    passwordToggles.forEach((toggle) => {
      toggle.addEventListener('click', function () {
        const targetId = this.getAttribute('data-target');
        const passwordInput = document.getElementById(targetId);
        const openEye = passwordInput.parentElement.querySelector('.password-toggle-eye-open');
        const closeEye = passwordInput.parentElement.querySelector('.password-toggle-eye-close');

        if (passwordInput.type === 'password') {
          // Show password
          passwordInput.type = 'text';
          openEye.style.display = 'none';
          closeEye.style.display = 'flex';
        } else {
          // Hide password
          passwordInput.type = 'password';
          closeEye.style.display = 'none';
          openEye.style.display = 'flex';
        }
      });
    });

    const loginForm = document.getElementById('login');
    const forgotPasswordSection = document.getElementById('forgot-password-section');
    const phoneInput = document.getElementById('customer-phone');
    const emailInput = document.getElementById('customer-email');
    const loginButtonExternal = document.getElementById('login-submit-button-external');
    const loginSubmitForm = document.querySelector('.login-submit-form');

    const API_BASE_URL = `/apps/${APP_SUB_PATH}/customer/account`;

    // Toggle between login and forgot password
    function toggleForms(showForgotPassword) {
      if (showForgotPassword) {
        loginForm.classList.add('hidden');
        forgotPasswordSection.classList.remove('hidden');
      } else {
        loginForm.classList.remove('hidden');
        forgotPasswordSection.classList.add('hidden');
      }
    }

    // Handle forgot password link click
    document.addEventListener('click', (e) => {
      if (e.target.classList.contains('js-recover')) {
        e.preventDefault();
        toggleForms(true);
        history.pushState('', document.title, `${window.location.pathname}#recover`);
      }
    });

    // Handle back to login (this will work with the forgot password form's back link)
    document.addEventListener('click', (e) => {
      if (e.target.classList.contains('js-login')) {
        e.preventDefault();
        toggleForms(false);
        history.pushState('', document.title, window.location.pathname);
      }
    });

    // Check URL hash on page load
    if (window.location.hash === '#recover') {
      toggleForms(true);
    }

    // External Login
    if (loginButtonExternal) {
      loginButtonExternal.addEventListener('click', async () => {
        const phone = phoneInput ? phoneInput.value.trim() : '';
        try {
          const response = await fetch(`${API_BASE_URL}/login/+88${phone}`);
          const data = await response.json();

          if (!response.ok) {
            alert('Login failed: ' + (data.message || 'Unknown error'));
            throw new Error(data.message || 'Login failed');
          }

          if (data.email) {
            emailInput.value = data.email;
            loginSubmitForm.submit();
          }
        } catch (error) {
          console.error('Error:', error);
        }
      });
    }
  });
</script>

{% schema %}
{
  "name": "Login",
  "class": "cc-main-login section section--template",
  "settings": [
    {
      "type": "header",
      "content": "Sign in with Shop settings"
    },
    {
      "type": "checkbox",
      "id": "enable_shop_login_button",
      "label": "Enable Sign in with Shop",
      "default": false
    }
  ]
}
{% endschema %}
