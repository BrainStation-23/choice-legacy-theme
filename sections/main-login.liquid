<div class="container">
  <div id="login">
    <div class="section__header text-center">
      <h1 class="h2">{{ 'customer.login.title' | t }}</h1>
    </div>

    {%- if section.settings.enable_shop_login_button -%}
      <div class="text-center">
        {{- shop | login_button -}}

        <p class="mt-4 mb-4">
          {{ 'customer.login.alternate_provider_separator' | t }}
        </p>
      </div>
    {%- endif -%}

    {%- form 'customer_login', class: 'form form-width mx-auto', novalidate: 'novalidate' -%}
      {%- if form.errors -%}
        <div class="alert mb-8 bg-error-bg text-error-text" tabindex="-1" autofocus>
          {{ form.errors | default_errors }}
        </div>
      {%- endif -%}

      <div class="form__field required" style="display: none;">
        <label class="label" for="customer-email">{{ 'customer.login.email' | t }}</label>
        <input
          type="email"
          class="input w-full"
          id="customer-email"
          name="customer[email]"
          autocomplete="email"
          {%- if form.errors contains 'form' %}
            aria-invalid="true"
          {%- endif %}
          aria-required="true"
          required
        >
      </div>

      <div class="form__field required">
        <label class="label" for="customer-phone">{{ 'customer.login.phone' | t }}</label>
        <input
          type="number"
          class="input w-full"
          id="customer-phone"
          name="customer[phone]"
          autocomplete="phone"
          {%- if form.errors contains 'form' %}
            aria-invalid="true"
          {%- endif %}
          aria-required="true"
          required
        >
      </div>

      {%- if form.password_needed -%}
        <div class="form__field required">
          <label class="label" for="customer-password">{{ 'customer.login.password' | t }}</label>
          <div class="login-password relative">
            <input
              type="password"
              class="login-password__input input w-full"
              id="customer-password"
              name="customer[password]"
              {%- if form.errors contains 'form' %}
                aria-invalid="true"
              {%- endif %}
              aria-required="true"
              required
            >
            <a class="login-password__recover-link link flex items-center absolute text-sm js-recover" href="#recover">
              {{- 'customer.login.forgot_password' | t -}}
            </a>
          </div>
        </div>
      {%- endif -%}

      <div class="mt-6">
        <button id="login-submit-button" class="btn btn--primary w-full" style="display: none;">
          {{ 'customer.login.sign_in' | t }}
        </button>
      </div>
    {%- endform -%}

    <div class="mt-6 form-width" style="margin:20px auto;">
      <button
        id="login-submit-button-external"
        class="btn btn--primary w-full"
      >
        {{ 'customer.login.sign_in' | t }}
      </button>
    </div>
    <p class="mt-8 mb-0 text-center">
      {{ 'customer.login.new_customer' | t }}
      <a class="link" href="{{ routes.account_register_url }}">{{ 'customer.login.create_account' | t }}</a>
    </p>
  </div>

  <div class="js-hidden" id="recover">
    <div class="section__header reading-width text-center">
      <h1>{{ 'customer.recover_password.title' | t }}</h1>
      <p>{{ 'customer.recover_password.subtext' | t }}</p>
    </div>

    {%- assign recover_success = form.posted_successfully? -%}

    {%- if recover_success == true -%}
      <div class="alert reading-width mb-8 mx-auto bg-success-bg text-success-text" tabindex="-1" autofocus>
        {{ 'customer.recover_password.success' | t }}
      </div>
    {%- endif -%}

    <div class="form__field required">
      <label class="label" for="recover-phone">{{ 'customer.login.phone' | t }}</label>
      <input
        type="number"
        class="input w-full"
        id="recover-phone"
        name="phone"
        autocomplete="phone"
        aria-required="true"
        required
      >
    </div>

    <div class="form__field required js-otp-field" style="display: none;">
      <label class="label" for="recover-otp">Enter OTP</label>
      <input
        type="text"
        class="input w-full"
        id="recover-otp"
        name="otp"
        maxlength="6"
        autocomplete="one-time-code"
        aria-required="true"
        required
      >
    </div>

    <div class="form__field required js-password-fields" style="display: none;">
      <label class="label" for="new-password">New Password</label>
      <input type="password" id="new-password" class="input w-full" name="new_password" required>
    </div>

    <div class="form__field required js-password-fields" style="display: none;">
      <label class="label" for="confirm-password">Confirm Password</label>
      <input type="password" id="confirm-password" class="input w-full" name="confirm_password" required>
    </div>

    <div class="mt-6">
      <button id="recover-submit-button" type="button" class="btn btn--primary w-full">
        {{ 'customer.recover_password.submit' | t }}
      </button>
    </div>

    <div class="mt-4 js-verify-otp-wrapper" style="display: none;">
      <button id="verify-otp-button" type="button" class="btn btn--primary w-full">Verify OTP</button>
    </div>

    <div class="mt-4 js-password-fields" style="display: none;">
      <button id="reset-password-button" type="button" class="btn btn--primary w-full">Reset Password</button>
    </div>

    <p class="mt-8 text-center">
      <a class="link js-login" href="#login">{{ 'customer.recover_password.cancel' | t }}</a>
    </p>
  </div>

  {%- if shop.checkout.guest_login -%}
    <h2 class="text-center mt-10">{{ 'customer.login.guest_title' | t }}</h2>

    {%- form 'guest_login', class: 'form form-width mx-auto' -%}
      <button id="forgot-submit-button" class="btn btn--secondary w-full">
        {{ 'customer.login.guest_continue' | t }}
      </button>
    {%- endform -%}
  {%- endif -%}
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const loginForm = document.getElementById('login');
    const recoverForm = document.getElementById('recover');
    const phoneInput = document.getElementById('customer-phone');
    const emailInput = document.getElementById('customer-email');
    const recoverPhoneInput = document.getElementById('recover-phone');
    const loginButtonExternal = document.getElementById('login-submit-button-external');
    const loginSubmitButton = document.getElementById('login-submit-button');
    const forgotSubmitButton = document.getElementById('forgot-submit-button');

    const recoverSubmitButton = document.getElementById('recover-submit-button');
    const otpFieldWrapper = document.querySelector('.js-otp-field');
    const verifyOtpWrapper = document.querySelector('.js-verify-otp-wrapper');
    const verifyOtpButton = document.getElementById('verify-otp-button');
    const passwordFields = document.querySelectorAll('.js-password-fields');
    const resetPasswordButton = document.getElementById('reset-password-button');

    const API_BASE_URL = '/apps/generic-name/customer/account';

    let serverOtpCode = null;

    // Toggle login/recover view
    function toggleContent(recover) {
      loginForm.classList.toggle('js-hidden', recover);
      recoverForm.classList.toggle('js-hidden', !recover);
    }

    document.querySelector('.js-recover').addEventListener('click', (evt) => {
      evt.preventDefault();
      toggleContent(true);
      history.pushState('', document.title, `${window.location.pathname}#recover`);
    });

    document.querySelector('.js-login').addEventListener('click', (evt) => {
      evt.preventDefault();
      toggleContent(false);
      history.pushState('', document.title, window.location.pathname);
    });

    if (window.location.hash === '#recover') toggleContent(true);
    {% if recover_success %}toggleContent(true);{% endif %}

    // External Login
    if (loginButtonExternal) {
      loginButtonExternal.addEventListener('click', async () => {
        const phone = phoneInput ? phoneInput.value.trim() : '';
        try {
          const response = await fetch(`${API_BASE_URL}/login`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ phone: `+88${phone}` }),
          });

          const data = await response.json();
          if (!response.ok) {
            alert('Login failed: ' + (data.message || 'Unknown error'));
            throw new Error(data.message || 'Login failed');
          }

          if (data.email) {
            emailInput.value = data.email;
            loginSubmitButton.click();
          }
        } catch (error) {
          console.error('Error:', error);
        }
      });
    }

    // Send OTP
    if (recoverSubmitButton) {
      recoverSubmitButton.addEventListener('click', async () => {
        const phone = recoverPhoneInput ? recoverPhoneInput.value.trim() : '';
        const cleanedPhoneNumber = `+88${phone}`;

        if (!phone) {
          alert('Please enter your phone number');
          return;
        }

        try {
          const response = await fetch(`${API_BASE_URL}/send-otp`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ phone: cleanedPhoneNumber, register:false }),
          });

          const data = await response.json();

          if (!response.ok) {
            alert(data.message || 'OTP request failed');
            return;
          }

          serverOtpCode = data.code;

          // Hide phone input & submit, show OTP input & button
          recoverPhoneInput.parentElement.style.display = 'none';
          recoverSubmitButton.style.display = 'none';
          otpFieldWrapper.style.display = 'block';
          verifyOtpWrapper.style.display = 'block';

          alert('OTP sent. Please check your phone.');

        } catch (error) {
          console.error('OTP request failed:', error);
          alert('Something went wrong. Please try again.');
        }
      });
    }

    // Verify OTP
    if (verifyOtpButton) {
      verifyOtpButton.addEventListener('click', () => {
        const userOtp = document.getElementById('recover-otp').value.trim();

        if (!userOtp) {
          alert('Please enter the OTP');
          return;
        }

        if (userOtp === serverOtpCode) {
          // Hide OTP input & button, show password fields
          otpFieldWrapper.style.display = 'none';
          verifyOtpWrapper.style.display = 'none';
          passwordFields.forEach(field => field.style.display = 'block');
          resetPasswordButton.parentElement.style.display = 'block';

          alert('OTP verified. Please reset your password.');
        } else {
          alert('Invalid OTP. Please try again.');
        }
      });
    }

    // Reset Password
    if (resetPasswordButton) {
      resetPasswordButton.addEventListener('click', async () => {
        const phone = recoverPhoneInput ? recoverPhoneInput.value.trim() : '';
        const password = document.getElementById('new-password').value;
        const confirmPassword = document.getElementById('confirm-password').value;

        if (!password || !confirmPassword) {
          alert('Please fill in both password fields');
          return;
        }

        if (password !== confirmPassword) {
          alert('Passwords do not match');
          return;
        }

        try {
          const response = await fetch(`${API_BASE_URL}/forgot-password`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              phone: `+88${phone}`,
              password,
             
            }),
          });

          const result = await response.json();

          if (!response.ok) {
            alert(result.message || 'Password reset failed');
            return;
          }

          alert('Password reset successful. Please log in.');
          location.href = '/account/login';

        } catch (error) {
          console.error('Password reset error:', error);
          alert('Something went wrong. Please try again.');
        }
      });
    }
  });
</script>

{% schema %}
{
  "name": "Login",
  "class": "cc-main-login section section--template",
  "settings": [
    {
      "type": "header",
      "content": "Sign in with Shop settings"
    },
    {
      "type": "checkbox",
      "id": "enable_shop_login_button",
      "label": "Enable Sign in with Shop",
      "default": false
    }
  ]
}
{% endschema %}
