<div class="container">
  <div class="section__header text-center">
    <h1 class="h2">{{ 'customer.register.title' | t }}</h1>
  </div>

  {%- form 'create_customer', class: 'form form-width mx-auto', novalidate: 'novalidate' -%}
    {%- if form.errors -%}
      <div class="alert mb-8 bg-error-bg text-error-text" tabindex="-1" autofocus>
        <h2 class="h5 text-current">{{ 'contact.form.error_heading' | t }}</h2>
        <ul class="styled-list">
          {%- for field in form.errors -%}
            <li>
              {%- if field == 'form' -%}
                {{ form.errors.messages[field] }}
              {%- else -%}
                <a class="link text-current" href="#register-{{ field }}">
                  {{- form.errors.translated_fields[field] | capitalize }}
                  {{ form.errors.messages[field] -}}
                </a>
              {%- endif -%}
            </li>
          {%- endfor -%}
        </ul>
      </div>
    {%- endif -%}

    <div class="form__field required">
      <label class="label" for="register-first-name">
        {{- 'customer.register.first_name' | t -}}
        <span style="color:red">*</span>
      </label>
      <input
        type="text"
        class="input w-full"
        id="register-first-name"
        name="customer[first_name]"
        {%- if form.first_name %}
          value="{{ form.first_name }}"
        {%- endif %}
        autocomplete="given-name"
      >
    </div>

    <div class="form__field required">
      <label class="label" for="register-last-name">
        {{- 'customer.register.last_name' | t -}}
        <span style="color:red">*</span>
      </label>
      <input
        type="text"
        class="input w-full"
        id="register-last-name"
        name="customer[last_name]"
        {%- if form.last_name %}
          value="{{ form.last_name }}"
        {%- endif %}
        autocomplete="family-name"
      >
    </div>

    <div class="form__field required">
      <label class="label" for="register-phone">
        {{- 'customer.register.phone' | t -}}
        <span style="color:red">*</span>
      </label>
      <div class="input-with-icon-and-button">
        <span class="input-icon">+880</span>
        <input
          type="text"
          class="input w-full"
          id="register-phone"
          name="customer[phone]"
          {%- if form.phone %}
            value="{{ form.phone }}"
          {%- endif %}
          autocomplete="tel"
          {%- if form.errors contains 'phone' %}
            aria-invalid="true" aria-describedby="register-phone-error"
          {%- endif %}
          aria-required="true"
          required
        >
        <button type="button" id="send-otp-button" class="btn btn--secondary btn--small">Send OTP</button>
      </div>
      <p id="otp-message-send-fail" class="form__field-message"></p>
      {%- if form.errors contains 'phone' -%}
        <p class="form__field-error" id="register-phone-error">
          {{ form.errors.translated_fields.phone | capitalize }}
          {{ form.errors.messages.phone }}.
        </p>
      {%- endif -%}
    </div>

    <div class="form__field" id="otp-field-container" style="display: none;">
      <label class="label sr-only" for="register-otp">Enter OTP Code</label>
      <div class="input-with-icon">
        <input
          type="text"
          class="input w-full"
          id="register-otp"
          name="customer[note][otp_code]"
          placeholder="Enter OTP Code"
          autocomplete="one-time-code"
          {%- if form.errors contains 'otp_code' %}
            aria-invalid="true" aria-describedby="register-otp-error"
          {%- endif %}
        >
      </div>
      <p id="otp-message" class="form__field-message"></p>
      {%- if form.errors contains 'otp_code' -%}
        <p class="form__field-error" id="register-otp-error">
          {{ form.errors.translated_fields.otp_code | capitalize }}
          {{ form.errors.messages.otp_code }}.
        </p>
      {%- endif -%}
    </div>

    <div class="form__field">
      <label class="label" for="register-email">{{ 'customer.register.email' | t }}</label>
      <input
        type="email"
        class="input w-full"
        id="register-email"
        name="customer-email"
        {%- if form.email %}
          value="{{ form.email }}"
        {%- endif %}
        autocomplete="email"
        {%- if form.errors contains 'email' %}
          aria-invalid="true" aria-describedby="register-email-error"
        {%- endif %}
      >
      {%- if form.errors contains 'email' -%}
        <p class="form__field-error" id="register-email-error">
          {{ form.errors.translated_fields.email | capitalize }}
          {{ form.errors.messages.email }}.
        </p>
      {%- endif -%}
    </div>

    <div class="form__field required">
      <label class="label" for="register-password">
        {{- 'customer.register.password' | t -}}
        <span style="color:red">*</span>
      </label>
      <input
        type="password"
        class="input w-full"
        id="register-password"
        name="customer[password]"
        autocomplete="new-password"
        {%- if form.errors contains 'password' %}
          aria-invalid="true" aria-describedby="register-password-error"
        {%- endif %}
        aria-required="true"
        required
      >
      {%- if form.errors contains 'password' -%}
        <p class="form__field-error" id="register-password-error">
          {{ form.errors.translated_fields.password | capitalize }}
          {{ form.errors.messages.password }}.
        </p>
      {%- endif -%}
    </div>
  {%- endform -%}

  <div class="mt-6 form-width" style="margin:20px auto;">
    <button class="btn btn--primary w-full" id="register-submit-button" disabled>
      {{ 'customer.register.submit' | t }}
    </button>
  </div>

  <p class="mt-8 mb-0 text-center">
    {{ 'customer.register.have_account' | t }}
    <a class="link" href="{{ routes.account_login_url }}">{{ 'customer.register.log_in' | t }}</a>
  </p>
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const registrationForm = document.querySelector('form[name="create_customer"]');
    const firstNameInput = document.getElementById('register-first-name');
    const lastNameInput = document.getElementById('register-last-name');
    const phoneInput = document.getElementById('register-phone');
    const emailInput = document.getElementById('register-email');
    const sendOtpButton = document.getElementById('send-otp-button');
    const passwordInput = document.getElementById('register-password');
    const otpFieldContainer = document.getElementById('otp-field-container');
    const otpInput = document.getElementById('register-otp');
    const otpMessage = document.getElementById('otp-message');
    const otpMessageSendFail = document.getElementById('otp-message-send-fail');
    const submitButton = document.getElementById('register-submit-button');
    const API_BASE_URL = `/apps/${APP_SUB_PATH}/customer/account`;

    let correctOtpCode = null;
    let isOtpMatched = false;

    submitButton.disabled = true; // initially disable external button

    // Function to clean phone number (remove spaces and dashes) and ensure +880 prefix
    function cleanPhoneNumber(phone) {
      if (!phone || phone.trim() === '') {
        return '';
      }

      // Remove spaces and dashes
      let cleanedPhone = phone.replace(/[\s-]/g, '');

      // Always prepend +880 to whatever the user typed
      return '+880' + cleanedPhone;
    }

    // Function to validate phone number (user portion should be exactly 10 digits)
    function validatePhoneNumber(phone) {
      if (!phone || phone.trim() === '') {
        return false;
      }

      // Remove spaces and dashes
      let cleanedPhone = phone.replace(/[\s-]/g, '');

      // Check if it's exactly 10 digits
      return /^\d{10}$/.test(cleanedPhone);
    }

    if (sendOtpButton && phoneInput && otpFieldContainer && otpInput) {
      sendOtpButton.addEventListener('click', async () => {
        const phoneNumber = phoneInput.value.trim();

        if (!phoneNumber) {
          alert('Please enter a phone number first.');
          return;
        }

        if (!validatePhoneNumber(phoneNumber)) {
          alert('Please enter a valid 10-digit phone number.');
          return;
        }

        const cleanedPhoneNumber = cleanPhoneNumber(phoneNumber);

        phoneInput.disabled = true;
        sendOtpButton.disabled = true;
        sendOtpButton.textContent = 'Sending...';
        otpMessage.textContent = '';
        otpMessage.classList.remove('text-error-text', 'text-success-text');
        isOtpMatched = false;
        submitButton.disabled = true;

        try {
          const response = await fetch(`${API_BASE_URL}/send-otp`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ phone: cleanedPhoneNumber, register: true }),
          });
          const data = await response.json();

          if (response.ok) {
            otpFieldContainer.style.display = 'block';
            otpInput.focus();
            sendOtpButton.textContent = 'Resend OTP';
            otpMessage.textContent = 'OTP was sent to your phone.';
            otpMessage.classList.add('text-success-text');
            otpMessageSendFail.textContent = '';
            otpMessageSendFail.classList.remove('text-error-text');
            if (data.otp) correctOtpCode = data.otp;
          } else {
            sendOtpButton.textContent = 'Send OTP';
            otpMessageSendFail.textContent = data.message || 'Failed to send OTP. Please try again.';
            otpMessageSendFail.classList.add('text-error-text');
            phoneInput.disabled = false;
            sendOtpButton.disabled = false;
            sendOtpButton.textContent = 'Send OTP';
          }
        } catch (error) {
          alert('An error occurred while trying to send OTP.');
          phoneInput.disabled = false;
          sendOtpButton.disabled = false;
          sendOtpButton.textContent = 'Send OTP';
        }
      });

      otpInput.addEventListener('input', () => {
        if (correctOtpCode) {
          if (otpInput.value === correctOtpCode) {
            otpMessage.textContent = 'OTP matched!';
            otpMessage.classList.remove('text-error-text');
            otpMessage.classList.add('text-success-text');
            isOtpMatched = true;
            submitButton.disabled = false;
          } else {
            otpMessage.textContent = "OTP doesn't match.";
            otpMessage.classList.remove('text-success-text');
            otpMessage.classList.add('text-error-text');
            isOtpMatched = false;
            submitButton.disabled = true;
          }
        }
      });
    }
    if (submitButton) {
      console.log('Submit button found');
      submitButton.addEventListener('click', async () => {
        console.log('Submit button clicked');
        if (!isOtpMatched) {
          alert('Please verify your phone number first.');
          return;
        }

        if (!validatePhoneNumber(phoneInput.value.trim())) {
          alert('Please enter a valid 10-digit phone number.');
          return;
        }

        const formData = {
          first_name: firstNameInput.value,
          last_name: lastNameInput.value,
          phone: cleanPhoneNumber(phoneInput.value),
          email: emailInput.value,
          password: passwordInput.value,
          otp: correctOtpCode,
        };

        try {
          const response = await fetch(`${API_BASE_URL}/register`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(formData),
          });

          const data = await response.json();

          if (response.ok) {
            alert('Registration successful!');
          } else {
            alert(data.message || 'Registration failed. Please try again.');
          }
        } catch (error) {
          alert('An error occurred during registration.');
        }
      });
    }
  });
</script>

<style>
  /* Basic styling for the phone input and button alignment */
  .input-with-icon-and-button {
    display: flex;
    align-items: center;
    gap: 10px;
    border: 1px solid #ccc;
    border-radius: var(--input-border-radius, 4px);
    padding: 0;
    overflow: hidden;
  }

  .input-with-icon {
    display: flex;
    align-items: center;
    gap: 10px;
    border: 1px solid #ccc;
    border-radius: var(--input-border-radius, 4px);
    padding: 0;
    overflow: hidden;
  }

  .input-with-icon-and-button .input,
  .input-with-icon .input {
    flex-grow: 1;
    border: none;
    padding: 10px 12px;
    height: auto;
  }

  .input-with-icon-and-button .input:focus,
  .input-with-icon .input:focus {
    outline: none;
    box-shadow: none;
  }

  .input-icon {
    padding-left: 12px;
    color: #888;
    font-size: 1.2em;
  }

  .input-with-icon-and-button .btn--secondary,
  .input-with-icon-and-button .btn--small {
    flex-shrink: 0;
    height: 100%;
    border-radius: 0 var(--input-border-radius, 4px) var(--input-border-radius, 4px) 0;
    margin-left: auto;
    padding: 10px 15px;
  }

  .btn--small {
    padding: 8px 12px;
    font-size: 0.8em;
  }
  .sr-only {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border-width: 0;
  }

  .form__field-message {
    font-size: 0.85em;
    margin-top: 5px;
  }

  .text-success-text {
    color: green;
  }

  .text-error-text {
    color: red;
  }
</style>

{% schema %}
{
  "name": "Register",
  "class": "cc-main-register section section--template"
}
{% endschema %}
