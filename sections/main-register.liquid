<style>
  .h-captcha {
    display: none;
  }
  .field-message {
    display: none;
    margin-top: 8px;
    font-size: 12px;
    font-weight: 500;
  }
  .field-message.show {
    display: flex;
    align-items: center;
  }
  .response-message {
    display: none;
  }
  .response-message.show {
    display: flex;
    align-items: center;
  }
</style>

<div class="w-full flex justify-center pt-48 pb-88 sm:pt-16 sm:pb-16 page-width">
  <div id="register" class=" flex flex-col gap-32 max-w-374">
    <div class="flex flex-col gap-8 text-center">
      <h1 class=" ff-bebas-neue fs-36-lh-40-ls-0 fw-400 uppercase">
        {{ 'customer.register.title' | t }}
      </h1>
    </div>

    <div class=" flex flex-col gap-16">
      {%- form 'create_customer', class: 'register-submit-form flex flex-col gap-16', novalidate: 'novalidate' -%}
        <!-- First & Last Name -->
        <div class="flex gap-16 sm:flex-col">
          <div class="flex-1">
            {% render 'input',
              type: 'text',
              id: 'customer-first-name',
              name: 'customer[first_name]',
              label: 'First Name',
              placeholder: 'First Name',
              autocomplete: 'given-name',
              required: true
            %}
            <div id="first-name-message" class="field-message ff-general-sans"></div>
          </div>
          <div class="flex-1">
            {% render 'input',
              type: 'text',
              id: 'customer-last-name',
              name: 'customer[last_name]',
              label: 'Last Name',
              placeholder: 'Last Name',
              autocomplete: 'family-name',
              required: true
            %}
            <div id="last-name-message" class="field-message ff-general-sans"></div>
          </div>
        </div>

        <!-- Phone + OTP -->
        <div class=" flex gap-16">
          {% assign phoneLabel = 'customer.register.phone' | t -%}
          {% assign phonePlaceholder = 'customer.register.phone_placeholder' | t -%}
          <div class="phone-input-wrapper gap-16 flex-1 ">
            {% render 'input', type: 'tel', id: 'customer-phone', name: 'customer[phone]', label: phoneLabel, placeholder: phonePlaceholder, autocomplete: 'tel', required: true, class: '', invalid: form.errors contains 'phone', value: form.phone %}
          </div>
          <button
            type="button"
            id="send-otp-button"
            class="button--solid border-none rounded-6 cursor-pointer ff-general-sans fs-14-lh-100pct-ls-0 fw-600"
          >
            {{ 'customer.register.send_otp' | t }}
          </button>
        </div>
        <div id="phone-message" class="field-message ff-general-sans"></div>

        {% render 'otp-input' %}
        <div id="otp-message" class="field-message ff-general-sans"></div>

        <!-- Email -->
        <div>
          {% render 'input',
            type: 'email',
            id: 'customer-email',
            name: 'customer[email]',
            label: 'Email',
            placeholder: 'example@gmail.com',
            autocomplete: 'email'
          %}
          <div id="email-message" class="field-message ff-general-sans"></div>
        </div>

        <!-- Password -->
        <div>
          {% render 'input',
            type: 'password',
            id: 'customer-password',
            name: 'customer[password]',
            label: 'Password',
            placeholder: 'Password',
            autocomplete: 'new-password',
            required: true
          %}
          <div id="password-message" class="field-message ff-general-sans"></div>
        </div>

        <!-- Confirm Password -->
        <div>
          {% render 'input',
            type: 'password',
            id: 'customer-confirm-password',
            name: 'customer[password_confirmation]',
            label: 'Confirm Password',
            placeholder: 'Confirm Password',
            autocomplete: 'new-password',
            required: true
          %}
          <div id="confirm-password-message" class="field-message ff-general-sans"></div>
        </div>
      {%- endform -%}

      <!-- External Register Button -->
      <button
        id="register-submit-button-external"
        class="button--solid border-none rounded-6 ff-general-sans fs-14 fw-600 cursor-pointer"
      >
        {{ 'customer.register.submit' | t }}
      </button>
      <div class="text-brand text-center">
        <a
          href="{{ routes.account_login_url }} "
          class="ff-general-sans fs-14-lh-100pct-ls-0 fw-600 text-brand no-underline"
          aria-label="{{ 'customer.register.log_in' | t }}"
        >
          {{ 'customer.register.log_in' | t }}
        </a>
      </div>

      <!-- Response -->
      <div id="response-message" class="response-message fs-14 ff-general-sans fw-600 text-center"></div>
    </div>
  </div>
</div>
<script src="{{ 'password-toggle.js' | asset_url }}" defer></script>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const toastManager = new ToastNotificationManager();

    const firstNameInput = document.getElementById('customer-first-name');
    const lastNameInput = document.getElementById('customer-last-name');
    const phoneInput = document.getElementById('customer-phone');
    const emailInput = document.getElementById('customer-email');
    const passwordInput = document.getElementById('customer-password');
    const confirmPasswordInput = document.getElementById('customer-confirm-password');
    const sendOtpButton = document.getElementById('send-otp-button');
    const registerButton = document.getElementById('register-submit-button-external');
    const responseMessage = document.getElementById('response-message');

    // Message elements
    const firstNameMessage = document.getElementById('first-name-message');
    const lastNameMessage = document.getElementById('last-name-message');
    const phoneMessage = document.getElementById('phone-message');
    const otpMessage = document.getElementById('otp-message');
    const emailMessage = document.getElementById('email-message');
    const passwordMessage = document.getElementById('password-message');
    const confirmPasswordMessage = document.getElementById('confirm-password-message');

    const { otpContainer, showMessage, clearOtpInputs, getOtpValue } = window.otpUtils;
    const API_BASE_URL = `/apps/${APP_SUB_PATH}/customer/account`;
    let isOtpSent = false;

    function validatePhoneNumber(phone) {
      let cleaned = phone.replace(/[\s-]/g, '');
      if (cleaned.startsWith('+88')) cleaned = cleaned.substring(3);
      return /^01\d{9}$/.test(cleaned);
    }

    function cleanPhoneNumber(phone) {
      let cleaned = phone.replace(/[\s-]/g, '');
      return cleaned.startsWith('+88') ? cleaned : '+88' + cleaned;
    }

    function showFieldMessage(messageElement, message, type) {
      messageElement.textContent = message;
      messageElement.className = `field-message ${type} show ff-general-sans`;
    }

    function hideFieldMessage(messageElement) {
      messageElement.className = 'field-message ff-general-sans';
    }

    function showResponseMessage(message, type) {
      responseMessage.textContent = message;
      responseMessage.className = `response-message ${type} show`;
    }

    function hideAllMessages() {
      hideFieldMessage(firstNameMessage);
      hideFieldMessage(lastNameMessage);
      hideFieldMessage(phoneMessage);
      hideFieldMessage(otpMessage);
      hideFieldMessage(emailMessage);
      hideFieldMessage(passwordMessage);
      hideFieldMessage(confirmPasswordMessage);
      responseMessage.className = 'response-message fs-14 ff-general-sans fw-600 text-center';
    }

    function displayServerErrors(errors) {
      // Clear all existing messages first
      hideAllMessages();

      // Map server errors to corresponding field messages
      if (errors.first_name) {
        showFieldMessage(firstNameMessage, errors.first_name, 'error-text');
      }
      if (errors.last_name) {
        showFieldMessage(lastNameMessage, errors.last_name, 'error-text');
      }
      if (errors.phone) {
        showFieldMessage(phoneMessage, errors.phone, 'error-text');
      }
      if (errors.otp) {
        showFieldMessage(otpMessage, errors.otp, 'error-text');
      }
      if (errors.email) {
        showFieldMessage(emailMessage, errors.email, 'error-text');
      }
      if (errors.password) {
        showFieldMessage(passwordMessage, errors.password, 'error-text');
      }
    }

    // Clear error messages when user starts typing (optional)
    [firstNameInput, lastNameInput, phoneInput, emailInput, passwordInput, confirmPasswordInput].forEach((input) => {
      input.addEventListener('input', () => {
        // Clear any existing error message for this field when user starts typing
        const messageElement = document.getElementById(input.id.replace('customer-', '') + '-message');
        if (messageElement && messageElement.classList.contains('error-text')) {
          hideFieldMessage(messageElement);
        }
      });
    });

    // Send OTP
    sendOtpButton.addEventListener('click', async () => {
      const phoneNumber = phoneInput.value.trim();
      hideFieldMessage(otpMessage);

      if (!validatePhoneNumber(phoneNumber)) {
        showFieldMessage(phoneMessage, 'Enter valid Bangladesh phone number.', 'error-text');
        return;
      }

      hideFieldMessage(phoneMessage);
      const cleaned = cleanPhoneNumber(phoneNumber);
      sendOtpButton.disabled = true;
      sendOtpButton.textContent = 'Sending...';
      clearOtpInputs();

      try {
        const res = await fetch(`${API_BASE_URL}/send-otp`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ phone: cleaned, register: true }),
        });
        const data = await res.json();

        if (res.ok) {
          otpContainer.classList.add('active');

          toastManager.show('OTP sent to your phone.', 'success');

          sendOtpButton.textContent = 'Resend OTP';
          isOtpSent = true;
        } else {
          sendOtpButton.textContent = 'Send OTP';
          // Handle validation errors from server

          if (data.errors) {
            displayServerErrors(data.errors);
          } else {
            toastManager.show(data.message || 'Failed to send OTP', 'error');
          }
        }
      } catch {
        toastManager.show('Error while sending OTP.', 'error');
        sendOtpButton.textContent = 'Send OTP';
      } finally {
        sendOtpButton.disabled = false;
      }
    });

    // Register
    registerButton.addEventListener('click', async () => {
      hideAllMessages();
      let hasError = false;

      // Validate all fields
      if (!firstNameInput.value.trim()) {
        showFieldMessage(firstNameMessage, 'First name is required.', 'error-text');
        hasError = true;
      }

      if (!lastNameInput.value.trim()) {
        showFieldMessage(lastNameMessage, 'Last name is required.', 'error-text');
        hasError = true;
      }

      const phoneNumber = phoneInput.value.trim();
      if (!phoneNumber) {
        showFieldMessage(phoneMessage, 'Phone number is required.', 'error-text');
        hasError = true;
      } else if (!validatePhoneNumber(phoneNumber)) {
        showFieldMessage(phoneMessage, 'Enter valid Bangladesh phone number.', 'error-text');
        hasError = true;
      }

      if (!isOtpSent) {
        showFieldMessage(otpMessage, 'Send and verify OTP first.', 'error-text');
        hasError = true;
      }

      const otpValue = getOtpValue();
      if (isOtpSent && otpValue.length !== 6) {
        showFieldMessage(otpMessage, 'Enter full 6-digit OTP.', 'error-text');
        hasError = true;
      }

      const email = emailInput.value.trim();
      if (email && !/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email)) {
        showFieldMessage(emailMessage, 'Enter a valid email address.', 'error-text');
        hasError = true;
      }

      const password = passwordInput.value;
      if (!password) {
        showFieldMessage(passwordMessage, 'Password is required.', 'error-text');
        hasError = true;
      } else if (password.length < 6) {
        showFieldMessage(passwordMessage, 'Password must be at least 6 characters.', 'error-text');
        hasError = true;
      }

      const confirmPassword = confirmPasswordInput.value;
      if (!confirmPassword) {
        showFieldMessage(confirmPasswordMessage, 'Please confirm your password.', 'error-text');
        hasError = true;
      } else if (password !== confirmPassword) {
        showFieldMessage(confirmPasswordMessage, 'Passwords do not match.', 'error-text');
        hasError = true;
      }

      if (hasError) return;

      registerButton.disabled = true;
      registerButton.textContent = 'Registering...';

      const formData = {
        first_name: firstNameInput.value.trim(),
        last_name: lastNameInput.value.trim(),
        phone: cleanPhoneNumber(phoneNumber),
        email: email || undefined,
        password: password,
        otp: otpValue,
      };

      try {
        const res = await fetch(`${API_BASE_URL}/register`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(formData),
        });
        const data = await res.json();

        if (res.ok) {
          toastManager.show('Registration successful.', 'success');
          setTimeout(() => {
            window.location.href = '/account/login';
          }, 2000);
        } else {
          toastManager.show(data.message || 'Registration failed.', 'error');
        }
      } catch {
        toastManager.show('Error during registration.', 'error');
      } finally {
        registerButton.disabled = false;
        registerButton.textContent = '{{ "customer.register.submit" | t | default: "Submit" }}';
      }
    });
  });
</script>

{% schema %}
{
  "name": "Register",
  "settings": []
}
{% endschema %}
