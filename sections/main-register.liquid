<style>
  .register-container {
    width: 100%;
    display: flex;
    justify-content: center;
    padding-top: 16px;
    padding-bottom: 12px;
  }

  .register-input-phone-field-container {
    display: flex;
    gap: 16px;
  }

  .register-container .form-input-field .form-input {
    height: 54px;
  }

  .register-form {
    display: flex;
    flex-direction: column;
    min-width: 406px;
  }

  .register-header {
    text-align: center;
    display: flex;
    flex-direction: column;
  }

  .register-title {
    text-transform: uppercase;
  }

  .register-subtitle {
    display: flex;
    align-items: center;
    flex-direction: row;
    justify-content: center;
    gap: 12px;
  }

  .register-subtitle a {
    color: rgb(var(--color-primary-brand));
    text-decoration: none;
  }

  .register-form-container {
    display: flex;
    flex-direction: column;
  }

  .register-form-container form,
  .register-submit-form {
    display: flex;
    flex-direction: column;
    gap: 16px;
  }

  .register-button {
    width: 100%;
    background: rgb(var(--color-primary-brand));
    color: rgb(var(--color-background));
    border: none;
    padding: 14px;
    border-radius: 6px;
    cursor: pointer;
  }

  .register-button:disabled {
    background: rgb(var(--color-primary-brand));
    cursor: not-allowed;
  }

  .password-toggle {
    position: absolute;
    right: 12px;
    top: 50%;
    transform: translateY(-50%);
    background: none;
    border: none;
    color: #999;
    cursor: pointer;
    padding: 4px;
    font-size: 18px;
  }

  .alert {
    padding: 12px 16px;
    border-radius: 8px;
    margin-bottom: 20px;
    font-size: 14px;
  }

  .alert-error {
    background-color: #fee;
    color: #c33;
    border: 1px solid #fcc;
  }

  .alert-success {
    background-color: #efe;
    color: #363;
    border: 1px solid #cfc;
  }
  .phone-input-wrapper {
    flex: 1;
  }
  .h-captcha {
    display: none;
  }

  .phone-input {
    padding-left: 60px !important;
  }

  .send-otp-btn {
    background: rgb(var(--color-primary-brand));
    color: rgb(var(--color-background));
    border: none;
    padding: 18px 10px;
    border-radius: 6px;
    cursor: pointer;
    white-space: nowrap;
  }
  .send-otp-btn:disabled {
    background: #999;
    cursor: not-allowed;
  }

  .back-link {
    text-align: center;
  }

  .back-link a {
    color: rgb(var(--color-primary-brand));
    text-decoration: none;
  }

  .register-input-phone-field {
    display: flex;
    gap: 16px;
  }

  /* Response Message Styles */
  .response-message {
    padding: 12px 16px;
    border-radius: 8px;
    margin-top: 16px;
    font-size: 14px;
    text-align: center;
    display: none;
  }

  .response-message.success {
    background-color: #efe;
    color: #363;
    border: 1px solid #cfc;
  }

  .response-message.error {
    background-color: #fee;
    color: #c33;
    border: 1px solid #fcc;
  }

  .response-message.show {
    display: block;
  }
</style>

<div class="register-container">
  <div id="register" class="register-form gap-32 ">
    <div class="register-header gap-8">
      <h1 class="register-title ff-bebas-neue fs-36-lh-40-ls-0 fw-400">
        {{ 'customer.register.title' | t }}
      </h1>
      <div class="register-subtitle">
        <h2 class="register-existing__customer ff-general-sans fs-16-lh-24-ls-0 fw-400">
          {{ 'customer.register.subtitle' | t }}
        </h2>
      </div>
    </div>

    <div class="register-form-container gap-16">
      {%- form 'create_customer', class: 'register-submit-form', novalidate: 'novalidate' -%}
        {%- if form.errors -%}
          <div class="alert alert-error" tabindex="-1" autofocus>
            <h2 class="alert__title">{{ 'customer.register.error_heading' | t }}</h2>
            <ul class="alert__list">
              {%- for field in form.errors -%}
                <li>
                  {%- if field == 'form' -%}
                    {{ form.errors.messages[field] }}
                  {%- else -%}
                    {{ form.errors.translated_fields[field] | capitalize }}
                    {{ form.errors.messages[field] }}
                  {%- endif -%}
                </li>
              {%- endfor -%}
            </ul>
          </div>
        {%- endif -%}

        <!-- First Name -->
        {%- assign firstNameLabel = 'customer.register.first_name' | t -%}
        {%- assign firstNamePlaceholder = 'customer.register.first_name' | t -%}
        {%
          render 'input',
          type: 'text',
          id: 'customer-first-name',
          name: 'customer[first_name]',
          label: firstNameLabel,
          placeholder: firstNamePlaceholder,
          autocomplete: 'given-name',
          required: true,
          class: 'register-input-first-name-field',
          invalid: form.errors contains 'first_name',
          value: form.first_name
        %}

        <!-- Last Name -->
        {%- assign lastNameLabel = 'customer.register.last_name' | t -%}
        {%- assign lastNamePlaceholder = 'customer.register.last_name' | t -%}
        {%
          render 'input',
          type: 'text',
          id: 'customer-last-name',
          name: 'customer[last_name]',
          label: lastNameLabel,
          placeholder: lastNamePlaceholder,
          autocomplete: 'family-name',
          required: true,
          class: 'register-input-last-name-field',
          invalid: form.errors contains 'last_name',
          value: form.last_name
        %}

        <!-- Phone Number -->
        <div class="register-input-phone-field-container">
          {% assign phoneLabel = 'customer.register.phone' | t -%}
          {% assign phonePlaceholder = 'customer.register.phone_placeholder' | t -%}
          <div class="phone-input-wrapper gap-16">
            {%
              render 'input',
              type: 'tel',
              id: 'customer-phone',
              name: 'customer[phone]',
              label: phoneLabel,
              placeholder: phonePlaceholder,
              autocomplete: 'tel',
              required: true,
              class: 'register-input-phone-field',
              invalid: form.errors contains 'phone',
              value: form.phone
            %}
          </div>
          <button type="button" id="send-otp-button" class="send-otp-btn ff-general-sans fs-14-lh-100pct-ls-0 fw-600">
            {{ 'customer.register.send_otp' | t }}
          </button>
        </div>

        {% render 'otp-input' %}

        <!-- Email -->
        {%- assign emailLabel = 'customer.register.email' | t -%}
        {%- assign emailPlaceholder = 'example@gmail.com' -%}
        {%
          render 'input',
          type: 'email',
          id: 'customer-email',
          name: 'customer[email]',
          label: emailLabel,
          placeholder: emailPlaceholder,
          autocomplete: 'email',
          required: false,
          class: 'register-input-email-field',
          invalid: form.errors contains 'email',
          value: form.email
        %}

        <!-- Password -->
        {%- assign passwordLabel = 'customer.register.password' | t -%}
        {%- assign passwordPlaceholder = 'customer.register.password' | t -%}
        {%
          render 'input',
          type: 'password',
          id: 'customer-password',
          name: 'customer[password]',
          label: passwordLabel,
          placeholder: passwordPlaceholder,
          autocomplete: 'new-password',
          required: true,
          class: 'register-input-password-field',
          invalid: form.errors contains 'password'
        %}

        <!-- Confirm Password -->
        {% render 'input',
          type: 'password',
          id: 'customer-confirm-password',
          name: 'customer[password_confirmation]',
          label: 'Confirm Password',
          placeholder: 'Confirm Password',
          autocomplete: 'new-password',
          required: true,
          class: 'register-input-confirm-password-field'
        %}
      {%- endform -%}

      <!-- External Register Button -->
      <button
        id="register-submit-button-external"
        class="register-button ff-general-sans fs-14-lh-100pct-ls-0 fw-600"
        disabled
      >
        {{ 'customer.register.submit' | t }}
      </button>

      <!-- Response Message -->
      <div id="response-message" class="response-message"></div>

      <div class="back-link">
        <a
          href="{{ routes.account_login_url }} "
          class="ff-general-sans fs-14-lh-100pct-ls-0 fw-600"
          aria-label="{{ 'customer.register.log_in' | t | default: 'Return to login' }}"
        >
          {{ 'customer.register.log_in' | t | default: 'Return to login' }}
        </a>
      </div>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    // Password toggles
    const passwordToggles = document.querySelectorAll('.toggle-password');

    passwordToggles.forEach((toggle) => {
      toggle.addEventListener('click', function () {
        const targetId = this.getAttribute('data-target');
        const passwordInput = document.getElementById(targetId);
        const openEye = passwordInput.parentElement.querySelector('.password-toggle-eye-open');
        const closeEye = passwordInput.parentElement.querySelector('.password-toggle-eye-close');

        if (passwordInput.type === 'password') {
          passwordInput.type = 'text';
          if (openEye) openEye.style.display = 'none';
          if (closeEye) closeEye.style.display = 'flex';
        } else {
          passwordInput.type = 'password';
          if (closeEye) closeEye.style.display = 'none';
          if (openEye) openEye.style.display = 'flex';
        }
      });
    });

    // Form elements
    const firstNameInput = document.getElementById('customer-first-name');
    const lastNameInput = document.getElementById('customer-last-name');
    const phoneInput = document.getElementById('customer-phone');
    const emailInput = document.getElementById('customer-email');
    const passwordInput = document.getElementById('customer-password');
    const confirmPasswordInput = document.getElementById('customer-confirm-password');
    const sendOtpButton = document.getElementById('send-otp-button');
    const otpContainer = document.getElementById('otp-container');
    const otpMessage = document.getElementById('otp-message');
    const registerButton = document.getElementById('register-submit-button-external');
    const registerForm = document.querySelector('.register-submit-form');
    const otpDigits = document.querySelectorAll('.otp-digit');
    const otpHiddenInput = document.getElementById('customer-otp-hidden');
    const responseMessage = document.getElementById('response-message');

    const API_BASE_URL = `/apps/${APP_SUB_PATH}/customer/account`;

    let isOtpSent = false;

    // Phone validation - now accepts both formats
    function validatePhoneNumber(phone) {
      if (!phone || phone.trim() === '') return false;
      let cleanedPhone = phone.replace(/[\s-]/g, '');

      // Check if it's a valid BD number with or without +88
      if (cleanedPhone.startsWith('+88')) {
        cleanedPhone = cleanedPhone.substring(3);
      }

      return /^01\d{9}$/.test(cleanedPhone);
    }

    // Clean phone number - smart +88 handling
    function cleanPhoneNumber(phone) {
      if (!phone || phone.trim() === '') return '';
      let cleanedPhone = phone.replace(/[\s-]/g, '');

      // If already has +88, keep it
      if (cleanedPhone.startsWith('+88')) {
        return cleanedPhone;
      }

      // If doesn't have +88, add it
      return '+88' + cleanedPhone;
    }

    // Show response message
    function showResponseMessage(message, type) {
      responseMessage.textContent = message;
      responseMessage.className = `response-message ${type} show`;

      // Auto hide after 5 seconds for success messages
      if (type === 'success') {
        setTimeout(() => {
          responseMessage.classList.remove('show');
        }, 5000);
      }
    }

    // Hide response message
    function hideResponseMessage() {
      responseMessage.classList.remove('show');
    }

    // Show message
    function showMessage(element, message, type) {
      element.textContent = message;
      element.className = `otp-message ${type}`;
    }

    // OTP Input Handling
    function setupOtpInputs() {
      otpDigits.forEach((input, index) => {
        // Handle input
        input.addEventListener('input', function (e) {
          const value = e.target.value;

          // Only allow numbers
          if (!/^\d*$/.test(value)) {
            e.target.value = '';
            return;
          }

          // Add filled class
          if (value) {
            e.target.classList.add('filled');
            // Move to next input
            if (index < otpDigits.length - 1) {
              otpDigits[index + 1].focus();
            }
          } else {
            e.target.classList.remove('filled');
          }

          // Update hidden input
          updateOtpValue();
        });

        // Handle backspace
        input.addEventListener('keydown', function (e) {
          if (e.key === 'Backspace' && !e.target.value && index > 0) {
            otpDigits[index - 1].focus();
          }
        });

        // Handle paste
        input.addEventListener('paste', function (e) {
          e.preventDefault();
          const pastedData = e.clipboardData.getData('text');
          const digits = pastedData.replace(/\D/g, '').split('').slice(0, 6);

          digits.forEach((digit, i) => {
            if (otpDigits[i]) {
              otpDigits[i].value = digit;
              otpDigits[i].classList.add('filled');
            }
          });

          // Focus the next empty input or last input
          const nextEmptyIndex = digits.length < 6 ? digits.length : 5;
          if (otpDigits[nextEmptyIndex]) {
            otpDigits[nextEmptyIndex].focus();
          }
          updateOtpValue();
        });
      });
    }

    // Update hidden OTP input value
    function updateOtpValue() {
      const otpValue = Array.from(otpDigits)
        .map((input) => input.value)
        .join('');
      otpHiddenInput.value = otpValue;
    }

    // Clear OTP inputs
    function clearOtpInputs() {
      otpDigits.forEach((input) => {
        input.value = '';
        input.classList.remove('filled');
      });
      otpHiddenInput.value = '';
      if (otpDigits[0]) otpDigits[0].focus();
    }

    // Get OTP value
    function getOtpValue() {
      return Array.from(otpDigits)
        .map((input) => input.value)
        .join('');
    }

    // Check form validity
    function checkFormValidity() {
      const firstName = firstNameInput.value.trim();
      const lastName = lastNameInput.value.trim();
      const phone = phoneInput.value.trim();
      const password = passwordInput.value;
      const confirmPassword = confirmPasswordInput.value;

      const isValid =
        firstName &&
        lastName &&
        phone &&
        validatePhoneNumber(phone) &&
        password &&
        confirmPassword &&
        password === confirmPassword &&
        isOtpSent;

      registerButton.disabled = !isValid;
    }

    // Send OTP
    if (sendOtpButton) {
      sendOtpButton.addEventListener('click', async () => {
        const phoneNumber = phoneInput.value.trim();
        hideResponseMessage();

        if (!phoneNumber) {
          showResponseMessage('Please enter a phone number first.', 'error');
          return;
        }

        if (!validatePhoneNumber(phoneNumber)) {
          showResponseMessage('Please enter a valid Bangladesh phone number.', 'error');
          return;
        }

        const cleanedPhoneNumber = cleanPhoneNumber(phoneNumber);

        phoneInput.disabled = true;
        sendOtpButton.disabled = true;
        sendOtpButton.textContent = 'Sending...';
        showMessage(otpMessage, '', '');
        isOtpSent = false;
        registerButton.disabled = true;
        clearOtpInputs();

        try {
          const response = await fetch(`${API_BASE_URL}/send-otp`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ phone: cleanedPhoneNumber, register: true }),
          });
          const data = await response.json();

          if (response.ok) {
            otpContainer.classList.add('active');
            if (otpDigits[0]) otpDigits[0].focus();
            sendOtpButton.textContent = 'Resend OTP';
            showMessage(otpMessage, 'OTP sent to your phone.', 'success');
            isOtpSent = true;
            checkFormValidity();
          } else {
            sendOtpButton.textContent = 'Send OTP';
            showResponseMessage(data.message || 'Failed to send OTP. Please try again.', 'error');
          }

          phoneInput.disabled = false;
          sendOtpButton.disabled = false;
        } catch (error) {
          showResponseMessage('An error occurred while trying to send OTP.', 'error');
          phoneInput.disabled = false;
          sendOtpButton.disabled = false;
          sendOtpButton.textContent = 'Send OTP';
        }
      });
    }

    // Form validation listeners
    [firstNameInput, lastNameInput, phoneInput, passwordInput, confirmPasswordInput].forEach((input) => {
      if (input) {
        input.addEventListener('input', checkFormValidity);
      }
    });

    // Register button
    if (registerButton) {
      registerButton.addEventListener('click', async () => {
        hideResponseMessage();

        if (!isOtpSent) {
          showResponseMessage('Please send and verify OTP first.', 'error');
          return;
        }

        if (!validatePhoneNumber(phoneInput.value.trim())) {
          showResponseMessage('Please enter a valid Bangladesh phone number.', 'error');
          return;
        }

        if (passwordInput.value !== confirmPasswordInput.value) {
          showResponseMessage('Passwords do not match.', 'error');
          return;
        }

        const otpValue = getOtpValue();
        if (otpValue.length !== 6) {
          showResponseMessage('Please enter the complete 6-digit OTP.', 'error');
          return;
        }

        registerButton.disabled = true;
        registerButton.textContent = 'Registering...';

        const formData = {
          first_name: firstNameInput.value.trim(),
          last_name: lastNameInput.value.trim(),
          phone: cleanPhoneNumber(phoneInput.value.trim()),
          email: emailInput.value.trim() || undefined,
          password: passwordInput.value,
          otp: otpValue,
        };

        try {
          const response = await fetch(`${API_BASE_URL}/register`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(formData),
          });

          const data = await response.json();

          if (response.ok) {
            showResponseMessage('Registration successful! Redirecting to login...', 'success');
            setTimeout(() => {
              window.location.href = '/account/login';
            }, 2000);
          } else {
            showResponseMessage(data.message || 'Registration failed. Please try again.', 'error');
          }
        } catch (error) {
          showResponseMessage('An error occurred during registration. Please try again.', 'error');
        } finally {
          registerButton.disabled = false;
          registerButton.textContent = '{{ "customer.register.submit" | t | default: "Submit" }}';
          checkFormValidity();
        }
      });
    }

    // Initialize OTP inputs
    setupOtpInputs();

    // Initial form check
    checkFormValidity();
  });
</script>

{% schema %}
{
  "name": "Register",
  "class": "cc-main-register section section--template",
  "settings": [
    {
      "type": "header",
      "content": "Registration form settings"
    },
    {
      "type": "checkbox",
      "id": "enable_phone_verification",
      "label": "Enable phone verification",
      "default": true
    }
  ]
}
{% endschema %}
