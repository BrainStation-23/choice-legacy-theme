<script src="{{ 'products-toolbar.js' | asset_url }}" defer="defer"></script>

<div class="" data-num-results="{{ collection.products_count }}">
  <div class="flex flex-col">
    {%- assign desktop_image = section.settings.desktop_image -%}
    {%- assign mobile_image = section.settings.mobile_image -%}
    <div class="w-full">
      {%- if desktop_image != blank or mobile_image != blank -%}
        <div class="media relative w-full h-254">
          {%- capture sizes %}{% render 'sizes-attribute', grid: true, min: 1, sm: 1, lg: 1, xl: 1 %}{% endcapture -%}
          {%- render 'image-desktop-and-mobile',
            class: 'img-fit',
            desktop_image: desktop_image,
            mobile_image: mobile_image,
            src_width_mobile: 600,
            widths_mobile: '600, 600, 600, 600',
            src_width_desktop: 1440,
            widths_desktop: '602, 602, 602, 602, 602, 602, 602, 602',
            lazy_load: true,
            fetchpriority: 'high',
            sizes: sizes
          -%}
        </div>
      {%- else -%}
        {{ 'collection-1' | placeholder_svg_tag: 'w-full h-254 object-cover ' }}
      {%- endif -%}
    </div>

    {%- paginate collection.products by section.settings.products_per_page -%}
      <div class="main-products-grid flex pt-48 pb-88 page-width gap-32">
        {%- if collection.filters != empty and section.settings.enable_filtering -%}
          <div class="main-products-grid__filters block sm:hidden">
            {% render 'facet-filters', results: collection, section: section, unique_id: 'desktop' %}
          </div>
        {%- endif -%}

        <div class="flex flex-col gap-32">
          <div class="flex flex-col gap-24">
            <h1 class="m-0 p-0 ff-bebas-neue fs-36-lh-40-ls-0 fw-400">{{ 'main-category.title' | t }}</h1>
            <div class="grid grid-cols-4 lg:grid-cols-3 md:grid-cols-2 sm:grid-cols-2 gap-16">
              {% for item in collection.metafields.custom.featured_collections.value %}
                {% render 'product-card',
                  product: item,
                  collection: collection,
                  image_ratio: image_ratio,
                  show_compare: settings.enable_compare
                %}
              {% endfor %}
            </div>
          </div>

          {% if section.settings.enable_sorting or section.settings.enable_filtering %}
            <div class="flex justify-between gap-8 ">
              <div class="w-full max-w-180 sm:max-w-full">
                {% if section.settings.enable_sorting %}
                  {% render 'fact-sort', results: collection, section: section %}
                {% endif %}
              </div>

              {%- if collection.filters != empty and section.settings.enable_filtering -%}
                <!-- Filter button -->
                <div
                  class="w-full h-40 border-1 border-solid border-color hidden sm:flex items-center justify-between rounded-6 p-8 cursor-pointer relative w-400 fs-14-lh-16-ls-0"
                  id="filter-button"
                  data-type="filter"
                >
                  <div class="flex items-center gap-6">
                    {% render 'icon-filter' %}
                    Filter
                  </div>
                  <span class="arrow-icon-filter">
                    {% render 'icon-arrow-down', height: '32', width: '32' %}
                  </span>
                </div>

                <div class="flex flex-col hidden" id="mobile-filter-panel">
                  <div class="filters-content flex-1 overflow-y-auto">
                    {% render 'facet-filters', results: collection, section: section, unique_id: 'mobile' %}
                  </div>
                </div>

                <!-- Overlay -->
                <div class="filter-overlay"></div>
              {%- endif -%}
            </div>
          {% endif %}

          <div class="main-products-grid__results relative flex-auto" id="filter-results">
            <div
              id="filtering-spinner"
              class="filtering-spinner hidden absolute inset-0 bg-white bg-opacity-90 flex items-center justify-center z-10"
            >
              <spinner-component size="medium" color="primary"></spinner-component>
            </div>

            {%- if collection.products.size == 0 -%}
              <p>{{ 'sections.collection.empty' | t }}</p>
            {%- else -%}
              <div class="grid grid-cols-4 lg:grid-cols-3 md:grid-cols-2 sm:grid-cols-2 gap-16">
                {% for product in collection.products %}
                  <div class="js-pagination-result">
                    {% render 'product-card',
                      product: product,
                      collection: collection,
                      image_ratio: image_ratio,
                      show_compare: settings.enable_compare
                    %}
                  </div>
                {% endfor %}
              </div>
            {%- endif -%}
          </div>

          <div class="pagination-container">
            {%- if paginate.pages > 1 -%}
              {% render 'pagination', paginate: paginate, class: 'pt-0 justify-end' %}
            {%- endif -%}
          </div>
        </div>
      </div>
    {%- endpaginate -%}
  </div>
</div>

<style>
  /* Filter button - mobile only */
  #filter-button {
    display: none;
  }

  @media (max-width: 768px) {
    #filter-button {
      display: flex;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function () {
    const filterButton = document.getElementById('filter-button');
    const filterPanel = document.getElementById('mobile-filter-panel');
    const filterOverlay = document.querySelector('.filter-overlay');
    const closeButton = document.getElementById('filter-close-button-mobile');

    function openMobileFilters() {
      if (filterPanel && filterOverlay) {
        filterPanel.classList.remove('hidden');
        filterPanel.classList.add('main-products-grid__filters-mobile', 'open');
        filterOverlay.classList.add('active');
        document.body.style.overflow = 'hidden';
      }
    }

    function closeMobileFilters() {
      if (filterPanel && filterOverlay) {
        filterPanel.classList.remove('open');
        filterOverlay.classList.remove('active');
        document.body.style.overflow = '';
        setTimeout(() => {
          filterPanel.classList.add('hidden');
          filterPanel.classList.remove('main-products-grid__filters-mobile');
        }, 300);
      }
    }

    // Open filters when filter button is clicked
    if (filterButton) {
      filterButton.addEventListener('click', openMobileFilters);
    }

    // Close filters when overlay is clicked
    if (filterOverlay) {
      filterOverlay.addEventListener('click', closeMobileFilters);
    }

    // Close filters when close button is clicked
    if (closeButton) {
      closeButton.addEventListener('click', closeMobileFilters);
    }
  });
</script>

{% schema %}
{
  "name": "Collection products",
  "class": "cc-collection-products section section--template mb-0",
  "settings": [
    {
      "type": "header",
      "content": "Image"
    },
    {
      "type": "image_picker",
      "id": "desktop_image",
      "label": "Desktop Image"
    },
    {
      "type": "image_picker",
      "id": "mobile_image",
      "label": "Mobile Image"
    },
    {
      "type": "header",
      "content": "Title"
    },
    {
      "type": "text",
      "id": "collection_title",
      "label": "Collection Title",
      "default": "Featured Products"
    },
    {
      "type": "header",
      "content": "Layout"
    },
    {
      "type": "range",
      "id": "products_per_page",
      "min": 8,
      "max": 50,
      "step": 1,
      "label": "Products per page",
      "default": 8
    },
    {
      "type": "header",
      "content": "Sorting"
    },
    {
      "type": "checkbox",
      "id": "enable_sorting",
      "label": "Enable sorting",
      "default": true
    },
    {
      "type": "header",
      "content": "Filtering"
    },
    {
      "type": "checkbox",
      "id": "enable_filtering",
      "label": "Enable filtering",
      "info": "[Customize filters](/admin/menus)",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "expand_filters",
      "label": "Expand filters by default",
      "default": false
    },
    {
      "type": "range",
      "id": "max_filter_options",
      "min": 5,
      "max": 50,
      "step": 1,
      "label": "Maximum filter options to show",
      "default": 10
    }
  ]
}
{% endschema %}
