<div class="customer-account pt-40 pb-0 sm:pt-0">
  <div class="customer-account__container flex gap-64 lg:gap-32 md:gap-24 page-width">
    <div>
      {% render 'customer-account-sidebar' %}
    </div>

    <div class="customer-account__content" style="flex: 2;">
      <div id="my-profile-content" class="account-content-section" style="display: none;">
        {% render 'account-information', customer: customer %}
      </div>

      <div id="my_beauties_profile-content" class="account-content-section" style="display: none;">
        <div id="my_beauties_profile-section">
          {% comment %} Add your beauties profile content here {% endcomment %}
          <h2>My Beauties Profile</h2>
          <p>Customize your beauty preferences and profile.</p>
        </div>
      </div>

      <div id="orders-content" class="account-content-section" style="display: none;">
        <div id="orders-section">
          {% render 'orders-list', orders: customer.orders %}
        </div>
      </div>

      {% comment %}
        <div id="addresses-content" class="account-content-section" style="display: none;">
          <div id="addresses-section">
            {% render 'customer-addresses', customer: customer %}
          </div>
        </div>
      {% endcomment %}

        <div id="rewards-content" class="account-content-section" style="display: none;">
          <div id="rewards-section">
            {% render 'reward-points', section: section %}
          </div>
        </div>
    

      <div id="wishlist-content" class="account-content-section" style="display: none;">
        <div id="wishlist-section">
          {% render 'wishlist' %}
        </div>
      </div>

      <div id="support-content" class="account-content-section" style="display: none;">
        <div id="support-section">
          {% render 'support' %}
        </div>
      </div>

      <div id="reviews-content" class="account-content-section" style="display: none;">
        <div id="reviews-section">
          {% render 'reviews' %}
        </div>
      </div>
    </div>
  </div>
</div>

<script src="{{ 'pagination.js' | asset_url }}" defer></script>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    window.theme = window.theme || {};

    {% if customer %}
      fetch(`/apps/${APP_SUB_PATH}/customer/account/profile`)
        .then(response => response.json())
        .then(data => {
          if (!data) return;
          window.theme.rewardPointEnabled = data.rewardPointEnabled;
          const rewardPointTab = document.querySelector('.customer-account__sidebar-item[data-tab="rewards"]');
          if (rewardPointTab) {
            rewardPointTab.style.display = data.rewardPointEnabled ? 'flex' : 'none';
          }
        })
        .catch(error => console.error('Failed to fetch profile:', error));
    {% endif %}

    const initializeWishlistFromStorage = () => {
      if (!window.customerLoggedIn) {
        window.theme.wishlistProductIds = new Set();
        return;
      }

      let wishlistData = null;
      try {
        const storedJSON = localStorage.getItem('customerWishlist');
        wishlistData = storedJSON ? JSON.parse(storedJSON) : null;
      } catch (e) {
        console.error('Could not parse wishlist from local storage.', e);
      }

      const productIds = wishlistData?.wishlist?.products.map(p => p.productId) || [];
      window.theme.wishlistProductIds = new Set(productIds);
    };

    initializeWishlistFromStorage();

    if (typeof updateAllWishlistButtons === 'function') {
      updateAllWishlistButtons();
    }
  });
</script>

<script>
  let loadedSections = [];
  let deliveryStatusLoaded = false;
  let unreadMessageInterval = null;

  async function showAccountContent(contentType) {
    const contentSections = document.querySelectorAll('.account-content-section');
    contentSections.forEach((section) => section.style.display = 'none');
    
    if (contentType === 'logout') {
      window.location.href = '/account/logout';
      return;
    }
    if (contentType === 'addresses') {
      window.location.href = '/account/addresses';
      return;
    }
    if (contentType === 'coming-soon') contentType = 'my_profile';

    const contentMapping = {
      'my-profile': 'my-profile', my_profile: 'my-profile', my_beauties_profile: 'my_beauties_profile',
      orders: 'orders', addresses: 'addresses', rewards: 'rewards',
      wishlist: 'wishlist', support: 'support', reviews: 'reviews',
    };
    
    const targetContentType = contentMapping[contentType] || 'my-profile';
    
    document.body.dataset.activeTab = targetContentType;

    if (targetContentType === 'support') {
      if (typeof window.initializeSupportChat === 'function') {
        window.initializeSupportChat();
      }
    }

    if (targetContentType === 'reviews') {
      if (typeof window.initializeReviewsTab === 'function') {
        window.initializeReviewsTab();
      }
    }
    
    if (targetContentType === 'rewards') {
      if (typeof window.initializeRewardPointsTab === 'function') {
        window.initializeRewardPointsTab();
      }
    }

    const targetContent = document.getElementById(targetContentType + '-content');
    if (targetContent) {
      targetContent.style.display = 'block';
    } else {
      document.getElementById('my-profile-content').style.display = 'block';
    }
  }

  function getInitialContentType() {
    const currentPath = window.location.pathname;
    const urlParams = new URLSearchParams(window.location.search);
    const navParam = urlParams.get('nav');
    if (currentPath.includes('/account/orders')) return 'orders';
    if (currentPath.includes('/account/addresses')) return 'addresses';
    if (currentPath.includes('/account/rewards')) return 'rewards';
    if (navParam) return navParam;
    if (window.location.hash === '#orders-section') return 'orders';
    if (window.location.search.includes('page=')) return 'orders';
    return 'my_profile';
  }

  function initializePageContent() {
    const initialContentType = getInitialContentType();
    showAccountContent(initialContentType);
  }

  function handlePopState() {
    const contentType = getInitialContentType();
    showAccountContent(contentType);
  }

  window.showAccountContent = showAccountContent;

  async function fetchAndStoreUnreadCount() {
    try {
      const unreadMessagesResponse = await fetch(`/apps/${APP_SUB_PATH}/customer/customer-service-management/unread-messages-count`);
      if (!unreadMessagesResponse.ok) throw new Error('Failed to fetch count');

      const unreadMessagesData = await unreadMessagesResponse.json();
      const unreadCountElement = document.querySelector("#unread-messages-count");
      let count = 0;

      if (unreadMessagesData.success && unreadMessagesData.unreadCount > 0) {
        count = unreadMessagesData.unreadCount;
        if (unreadCountElement) {
          unreadCountElement.textContent = count;
          unreadCountElement.classList.remove("hidden");
        }
      } else {
        if (unreadCountElement) unreadCountElement.classList.add("hidden");
      }
      
      document.body.dataset.unreadMessages = count;

    } catch (error) {
      console.error('Error fetching unread messages count:', error);
      if (unreadMessageInterval) clearInterval(unreadMessageInterval);
    }
  }

  document.addEventListener('DOMContentLoaded', async () => {
    initializePageContent();
    window.addEventListener('popstate', handlePopState);
    if (!window.customerLoggedIn) return;

    await fetchAndStoreUnreadCount();
    unreadMessageInterval = setInterval(fetchAndStoreUnreadCount, 10000);

    const wishlistStorageKey = 'customerWishlist';
    
    try {
      const storedWishlistJSON = localStorage.getItem(wishlistStorageKey);
      let wishlistData = storedWishlistJSON ? JSON.parse(storedWishlistJSON) : null;

      if (!wishlistData || !wishlistData.wishlist || wishlistData.wishlist.products.length === 0) {
        const response = await fetch(`/apps/${APP_SUB_PATH}/customer/wishlist/fetch`);
        if (!response.ok) throw new Error('API response was not ok.');
        
        wishlistData = await response.json();
        localStorage.setItem(wishlistStorageKey, JSON.stringify(wishlistData));
      }

      const productIds = wishlistData?.wishlist?.products.map(p => p.productId) || [];
      window.theme.wishlistProductIds = new Set(productIds);

      if (typeof window.initializeWishlistPage === 'function') {
        window.initializeWishlistPage(Array.from(window.theme.wishlistProductIds));
      } else {
        console.error('Wishlist display function not found. Check if wishlist.js is loaded.');
      }

    } catch (error) {
      console.error('Failed to prepare wishlist on account page:', error);
      if (typeof window.initializeWishlistPage === 'function') {
        window.initializeWishlistPage([]);
      }
    }
  });

  window.addEventListener('beforeunload', () => {
    if (unreadMessageInterval) clearInterval(unreadMessageInterval);
  });
</script>

<style>
  @media screen and (max-width: 768px) {
    .customer-account__container {
      flex-direction: column;
      gap: 16px !important;
    }
  }

  .account-content-section {
    transition: opacity 0.2s ease-in-out;
  }
</style>

{% schema %}
{
  "name": "Main Account",
  "settings": []
}
{% endschema %}