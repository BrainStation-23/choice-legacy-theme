<div class="customer-account pt-40 pb-0">
  <div class="customer-account__container flex gap-64 lg:gap-32 md:gap-24 page-width">
    {% render 'customer-account-sidebar' %}

    <div class="customer-account__content" style="flex: 2;">
      <div id="my-profile-content" class="account-content-section" style="display: none;">
        {% render 'account-information', customer: customer %}
      </div>

      <div id="orders-content" class="account-content-section" style="display: none;">
        <div id="orders-section">
          {% render 'orders-list', orders: customer.orders %}
        </div>
      </div>

      <div id="rewards-content" class="account-content-section" style="display: none;">
        <div id="rewards-section">
          {% render 'reward-points', section: section %}
        </div>
      </div>

      <div id="wishlist-content" class="account-content-section" style="display: none;">
        <div id="wishlist-section">
          {% render 'wishlist' %}
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  let loadedSections = ['my-profile'];
  let deliveryStatusLoaded = false;

  async function fetchDeliveryStatuses() {
    if (deliveryStatusLoaded) return;

    const deliveryStatusElements = document.querySelectorAll('.delivery-status');

    if (deliveryStatusElements.length === 0) {
      console.log('No delivery status elements found');
      return;
    }


    // Show loading state for all elements
    deliveryStatusElements.forEach((element) => {
      element.textContent = 'Loading...';
    });

    // Collect all order IDs
    const orderIds = Array.from(deliveryStatusElements).map((element) => element.getAttribute('data-order-id'));

    try {
      // Make single API call with all order IDs
      const orderIdsParam = orderIds.join(',');
      const response = await fetch(
        `/apps/${APP_SUB_PATH}/customer/account/delivery-status?order_ids=${encodeURIComponent(orderIdsParam)}`
      );

      const result = await response.json();

      if (result.success && result.data) {
        // Update each element with its corresponding status
        deliveryStatusElements.forEach((element) => {
          const orderId = element.getAttribute('data-order-id');
          const orderData = result.data[orderId];

          if (orderData) {
            element.textContent = orderData.deliveryStatus;
          } else {
            element.textContent = 'Order Placed';
          }
        });
      } else {
        deliveryStatusElements.forEach((element) => {
          element.textContent = 'Order Placed';
        });
      }
    } catch (error) {
      console.error('Error fetching delivery statuses:', error);
      deliveryStatusElements.forEach((element) => {
        element.textContent = 'Order Placed';
      });
    }

    deliveryStatusLoaded = true;
  }

  async function showAccountContent(contentType) {
    const contentSections = document.querySelectorAll('.account-content-section');
    contentSections.forEach((section) => {
      section.style.display = 'none';
    });

    if (contentType === 'coming-soon') {
      alert('This section is coming soon!');
      document.getElementById('my-profile-content').style.display = 'block';
      return;
    }

    if (contentType === 'logout') {
      window.location.href = '/account/logout';
      return;
    }

    const targetContent = document.getElementById(contentType + '-content');
    if (targetContent) {
      targetContent.style.display = 'block';

      if (contentType === 'orders') {
        setTimeout(() => {
          fetchDeliveryStatuses();
        }, 100);
      }
    }
  }

  window.showAccountContent = showAccountContent;

  document.addEventListener('DOMContentLoaded', function () {
    if (window.location.hash === '#orders-section' || window.location.search.includes('page=')) {
      showAccountContent('orders');
    }
  });
</script>

<style>
  @media screen and (max-width: 768px) {
    .customer-account__container {
      flex-direction: column;
      gap: 16px !important;
    }
  }

  /* Loading and status styles */
</style>

{% schema %}
{
  "name": "Main Account",
  "settings": [
   
  ],
  "blocks": [
    {
      "type": "redeem_offer",
      "name": "Redeem Offer",
      "settings": [
        {
          "type": "number",
          "id": "points_required",
          "label": "Points"
        }
      ]
    }
  ]
}
{% endschema %}
