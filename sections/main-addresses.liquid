<div class="customer-account__container flex gap-64 page-width pt-40 pb-40">
  <div class="sm:hidden block">{% render 'customer-account-sidebar' %}</div>
  <div class="flex flex-col gap-24">
    <h2 class="m-0 ff-general-sans fs-23-lh-24-ls-0 fw-500">{{ 'customer.addresses.manage_address' | t }}</h2>

    <!-- Address List Container -->
    <div id="address-list-container" class="grid grid-cols-2 sm:flex sm:flex-col gap-24">
      {%- for address in customer.addresses -%}
        <div
          class="
             border border-solid  rounded-12 pt-24  pb-24 flex flex-col gap-16
            {% if address == customer.default_address %} border-color-brand {% else %} border-color {% endif %}
          "
        >
          <h1 class=" pl-24 pr-24 ff-general-sans fw-600 fs-16-lh-22-ls-0 m-0">
            {{ address.first_name }}
            {{ address.last_name }}
          </h1>
          <p class="pl-24 pr-24 ff-general-sans fw-400 fs-14-lh-20-ls-0 m-0">
            {{ address.address1 }}
            {{ address.address2 }}
            {{ address.company }}
            {{ address.city }}, {{ address.province }}
            {{ address.zip }},{{ address.country }}
          </p>

          <div class="mt-auto flex justify-between pl-24 pr-24 border-t border-t-color border-t-solid pt-16 ">
            <button
              type="button"
              data-address="{{ address.id }}"
              class="customer-address__edit button--link  no-underline text-brand ff-general-sans fw-600 fs-14-lh-20-ls-0 m-0 bg-transparent border-0 cursor-pointer"
            >
              {{- 'customer.addresses.edit_address' | t -}}
            </button>
            <button
              type="button"
              data-address="{{ address.id }}"
              data-confirm="{{ 'customer.addresses.delete_confirm' | t }}"
              class="customer-address__delete button--link  no-underline text-brand ff-general-sans fw-600 fs-14-lh-20-ls-0 m-0 bg-transparent border-0 cursor-pointer"
            >
              {{- 'customer.addresses.delete' | t -}}
            </button>
          </div>
        </div>
      {%- endfor -%}
    </div>

    <!-- Edit Form Containers (Hidden by default) -->
    {% for address in customer.addresses %}
      <div
        class="customer-address__edit-form-container customer-address__edit-form-container-{{ address.id }} hidden"
        data-address-edit-form="{{ address.id }}"
      >
        {% render 'address-edit-form', address: address %}
      </div>
    {% endfor %}

    <!-- Hidden Delete Forms -->
    {% for address in customer.addresses %}
      <form class="hidden customer-address__delete-form-{{ address.id }}" method="POST" action="{{ address.url }}">
        <input type="hidden" name="_method" value="delete">
        <button
          data-confirm-address-delete="{{ address.id }}"
          type="submit "
          id="delete-{{ address.id }}"
          class="button--link "
        >
          {{ 'customer.addresses.delete' | t }}
        </button>
      </form>
    {% endfor %}
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function () {
    const addressListContainer = document.getElementById('address-list-container');

    // Edit functionality
    const editButtons = document.querySelectorAll('.customer-address__edit');

    editButtons.forEach((button) => {
      button.addEventListener('click', function () {
        const addressId = this.getAttribute('data-address');
        const editFormContainer = document.querySelector(`[data-address-edit-form="${addressId}"]`);

        if (editFormContainer) {
          // Hide the address list
          addressListContainer.style.display = 'none';

          // Hide all other edit forms
          document.querySelectorAll('.customer-address__edit-form-container').forEach((container) => {
            container.classList.add('hidden');
            container.style.display = 'none';
          });

          // Show the specific edit form
          editFormContainer.classList.remove('hidden');
          editFormContainer.style.display = 'block';
        }
      });
    });

    // Cancel edit functionality (handles both cancel button and close button)
    document.addEventListener('click', function (e) {
      if (e.target.matches('.customer-edit__cancel, .customer-address-edit-close-button')) {
        e.preventDefault();

        // Hide all edit forms
        document.querySelectorAll('.customer-address__edit-form-container').forEach((container) => {
          container.classList.add('hidden');
          container.style.display = 'none';
        });

        // Show the address list again
        addressListContainer.style.display = 'grid';
      }
    });

    // Handle successful form submission
    document.addEventListener('submit', function (e) {
      if (e.target.closest('.customer-address__edit-form-container')) {
        // Add a small delay to allow form processing
        setTimeout(() => {
          // Check if there were no form errors (you might need to adjust this based on your error handling)
          if (!document.querySelector('.field-error, .form-errors, .errors')) {
            document.querySelectorAll('.customer-address__edit-form-container').forEach((container) => {
              container.classList.add('hidden');
              container.style.display = 'none';
            });
            addressListContainer.style.display = 'grid';
          }
        }, 100);
      }
    });

    // Delete functionality
    const deleteButtons = document.querySelectorAll('.customer-address__delete');

    deleteButtons.forEach((button) => {
      button.addEventListener('click', function () {
        const addressId = this.getAttribute('data-address');
        const confirmMessage = this.getAttribute('data-confirm');

        if (confirm(confirmMessage)) {
          const deleteForm = document.querySelector(`.customer-address__delete-form-${addressId}`);
          if (deleteForm) {
            const submitButton = deleteForm.querySelector('button[type="submit"]');
            if (submitButton) {
              submitButton.click();
            }
          }
        }
      });
    });
  });
</script>

{% schema %}
{
  "name": "Address",
  "settings": []
}
{% endschema %}
