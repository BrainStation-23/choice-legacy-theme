<div class="customer-account__container flex gap-64 page-width pt-40 pb-40">
  <div class="sm:hidden block">{% render 'customer-account-sidebar' %}</div>
  <div class="flex flex-col gap-24">
    <h2 class="m-0 ff-general-sans fs-23-lh-24-ls-0 fw-500">{{ 'customer.addresses.manage_address' | t }}</h2>

    <div id="address-list-container" class="grid grid-cols-2 sm:flex sm:flex-col gap-24">
      {%- for address in customer.addresses -%}
        <div
          class="
             border border-solid  rounded-12 pt-24  pb-24 flex flex-col gap-16
            {% if address == customer.default_address %} border-color-brand {% else %} border-color {% endif %}
          "
        >
          <h1 class=" pl-24 pr-24 ff-general-sans fw-600 fs-16-lh-22-ls-0 m-0">
            {{ address.first_name }}
            {{ address.last_name }}
          </h1>
          <p class="pl-24 pr-24 ff-general-sans fw-400 fs-14-lh-20-ls-0 m-0">
            {{ address.address1 }}
            {{ address.address2 }}
            {{ address.company }}
            {{ address.city }}, {{ address.province }}
            {{ address.zip }},{{ address.country }}
          </p>

          <div class="mt-auto flex justify-between pl-24 pr-24 border-t border-t-color border-t-solid pt-16 ">
            <button
              type="button"
              data-address="{{ address.id }}"
              class="customer-address__edit button--link  no-underline text-brand ff-general-sans fw-600 fs-14-lh-20-ls-0 m-0 bg-transparent border-0 cursor-pointer"
            >
              {{- 'customer.addresses.edit_address' | t -}}
            </button>
            <button
              type="button"
              data-address="{{ address.id }}"
              data-confirm="{{ 'customer.addresses.delete_confirm' | t }}"
              class="customer-address__delete button--link  no-underline text-brand ff-general-sans fw-600 fs-14-lh-20-ls-0 m-0 bg-transparent border-0 cursor-pointer"
            >
              {{- 'customer.addresses.delete' | t -}}
            </button>
          </div>
        </div>
      {%- endfor -%}
    </div>

    <!-- Edit Form Containers (Hidden by default) -->
    {% for address in customer.addresses %}
      <div
        class="customer-address__edit-form-container customer-address__edit-form-container-{{ address.id }} hidden"
        data-address-edit-form="{{ address.id }}"
      >
        <!-- Updated Address Edit Form -->
        <div class="customer-address__edit-form">
          <div class="add-new-address__top">
            <span class="add-new-address__heading font-size-32 font-size-mobile-20 font-weight-600">
              {{- 'customer.addresses.edit_address' | t -}}
            </span>
          </div>

          {% comment %} Fixed: Added proper action URL {% endcomment %}
          {% form 'customer_address', address, url: address.url %}
            <div class="grid grid-cols-2 gap-16">
              {%- assign firstNameLabel = 'customer.addresses.first_name' | t -%}
              {%- assign firstNamePlaceholder = 'customer.addresses.first_name' | t -%}
              {%
                render 'input',
                type: 'text',
                id: "AddressFirstName" | append: address.id,
                name: "address[first_name]",
                label: firstNameLabel,
                placeholder: firstNamePlaceholder,
                autocomplete: 'given-name',
                required: false,
                class: '',
                value: address.first_name,
              %}

              {%- assign lastNameLabel = 'customer.addresses.last_name' | t -%}
              {%- assign lastNamePlaceholder = 'customer.addresses.last_name' | t -%}
              {%
                render 'input',
                type: 'text',
                id: "AddressLastName" | append: address.id,
                name: "address[last_name]",
                label: lastNameLabel,
                placeholder: lastNamePlaceholder,
                autocomplete: 'family-name',
                required: false,
                class: '',
                value: address.last_name,
              %}

              {%- assign companyLabel = 'customer.addresses.company' | t -%}
              {%- assign companyPlaceholder = 'customer.addresses.company' | t -%}
              {%
                render 'input',
                type: 'text',
                id: "AddressCompany" | append: address.id,
                name: "address[company]",
                label: companyLabel,
                placeholder: companyPlaceholder,
                autocomplete: 'organization',
                required: false,
                class: '',
                value: address.company,
              %}

              {%- assign address1Label = 'customer.addresses.address1' | t -%}
              {%- assign address1Placeholder = 'customer.addresses.address1' | t -%}
              {%
                render 'input',
                type: 'text',
                id: "AddressAddress1" | append: address.id,
                name: "address[address1]",
                label: address1Label,
                placeholder: address1Placeholder,
                autocomplete: 'address-line1',
                required: true,
                class: '',
                value: address.address1,
              %}

              {%- assign address2Label = 'customer.addresses.address2' | t -%}
              {%- assign address2Placeholder = 'customer.addresses.address2' | t -%}
              {%
                render 'input',
                type: 'text',
                id: "AddressAddress2" | append: address.id,
                name: "address[address2]",
                label: address2Label,
                placeholder: address2Placeholder,
                autocomplete: 'address-line2',
                required: false,
                class: '',
                value: address.address2,
              %}

              {%- assign cityLabel = 'customer.addresses.city' | t -%}
              {%- assign cityPlaceholder = 'customer.addresses.city' | t -%}
              {%
                render 'input',
                type: 'text',
                id: "AddressCity" | append: address.id,
                name: "address[city]",
                label: cityLabel,
                placeholder: cityPlaceholder,
                autocomplete: 'address-level2',
                required: true,
                class: '',
                value: address.city,
              %}

              <div class="label-input-container--flex">
                <label
                  for="AddressCountry{{ address.id }}"
                  class="label-input font-size-12 font-size-mobile-12 font-weight-600"
                >
                  {{- 'customer.addresses.country' | t -}}
                </label>

                <div class="customer-address__country input svg-container svg-container--left common-form__field">
                  <select
                    tabindex="0"
                    name="address[country]"
                    placeholder="{{ 'customer.addresses.country' | t }}"
                    class="input customer-address__country-select font-size-14 font-size-mobile-12"
                    data-default-country="{{ address.country }}"
                    data-country-select="{{ address.id }}"
                    id="AddressCountry{{ address.id }}"
                    autocomplete="country"
                    required
                  >
                    {{ all_country_option_tags }}
                  </select>
                </div>
              </div>

              {%- assign provinceLabel = 'customer.addresses.province' | t -%}
              {%- assign provincePlaceholder = 'customer.addresses.province' | t -%}
              {%
                render 'input',
                type: 'text',
                id: "AddressProvince" | append: address.id,
                name: "address[province]",
                label: provinceLabel,
                placeholder: provincePlaceholder,
                autocomplete: 'address-level1',
                required: false,
                class: '',
                value: address.province,
              %}

              {%- assign zipLabel = 'customer.addresses.zip' | t -%}
              {%- assign zipPlaceholder = 'customer.addresses.zip' | t -%}
              {%
                render 'input',
                type: 'text',
                id: "AddressZip" | append: address.id,
                name: "address[zip]",
                label: zipLabel,
                placeholder: zipPlaceholder,
                autocomplete: 'postal-code',
                required: true,
                class: '',
                value: address.zip,
              %}

              {%- assign phoneLabel = 'customer.addresses.phone' | t -%}
              {%- assign phonePlaceholder = 'customer.addresses.phone' | t -%}
              {%
                render 'input',
                type: 'tel',
                id: "AddressPhone" | append: address.id,
                name: "address[phone]",
                label: phoneLabel,
                placeholder: phonePlaceholder,
                autocomplete: 'tel',
                required: false,
                class: '',
                value: address.phone,
              %}

              <div class="customer-address__checkbox">
                {{ form.set_as_default_checkbox }}
                <label
                  for="address_default_address_{{ form.id }}"
                  class="customer-addresses-set_default font-size-14 font-size-mobile-14 font-weight-400"
                >
                  {{ 'customer.addresses.set_default' | t }}
                </label>
              </div>
            </div>

            <div class="grid grid-cols-2 gap-16">
              <button
                type="submit"
                class="button--solid border-none rounded-12 cursor-pointer ff-general-sans fw-600 fs-16-lh-100pct-ls-0"
                id="customer-address-update-{{ address.id }}"
              >
                {{ 'customer.addresses.save' | t }}
              </button>

              {% comment %} Fixed: Added correct class for JavaScript {% endcomment %}
              <button
                type="button"
                data-address="{{ address.id }}"
                class="customer-edit__cancel button--solid border-none rounded-12 cursor-pointer ff-general-sans fw-600 fs-16-lh-100pct-ls-0"
                id="customer-address-cancel-{{ address.id }}"
              >
                {{ 'customer.addresses.cancel' | t }}
              </button>
            </div>
          {% endform %}
        </div>
      </div>
    {% endfor %}

    <!-- Hidden Delete Forms -->
    {% for address in customer.addresses %}
      <form class="hidden customer-address__delete-form-{{ address.id }}" method="POST" action="{{ address.url }}">
        <input type="hidden" name="_method" value="delete">
        <button
          data-confirm-address-delete="{{ address.id }}"
          type="submit"
          id="delete-{{ address.id }}"
          class="button--link"
        >
          {{ 'customer.addresses.delete' | t }}
        </button>
      </form>
    {% endfor %}
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function () {
    const addressListContainer = document.getElementById('address-list-container');

    // Edit functionality
    const editButtons = document.querySelectorAll('.customer-address__edit');

    editButtons.forEach((button) => {
      button.addEventListener('click', function () {
        const addressId = this.getAttribute('data-address');
        const editFormContainer = document.querySelector(`[data-address-edit-form="${addressId}"]`);

        if (editFormContainer) {
          // Hide the address list
          addressListContainer.style.display = 'none';

          // Hide all other edit forms
          document.querySelectorAll('.customer-address__edit-form-container').forEach((container) => {
            container.classList.add('hidden');
            container.style.display = 'none';
          });

          // Show the specific edit form
          editFormContainer.classList.remove('hidden');
          editFormContainer.style.display = 'block';

          // Set the correct country value
          const countrySelect = editFormContainer.querySelector('select[name="address[country]"]');
          if (countrySelect) {
            const defaultCountry = countrySelect.getAttribute('data-default-country');
            if (defaultCountry) {
              countrySelect.value = defaultCountry;
            }
          }
        }
      });
    });

    // Cancel edit functionality
    document.addEventListener('click', function (e) {
      if (e.target.matches('.customer-edit__cancel, .customer-address-edit-close-button')) {
        e.preventDefault();

        // Hide all edit forms
        document.querySelectorAll('.customer-address__edit-form-container').forEach((container) => {
          container.classList.add('hidden');
          container.style.display = 'none';
        });

        // Show the address list again
        addressListContainer.style.display = 'grid';
      }
    });

    // Enhanced form submission handling
    document.addEventListener('submit', function (e) {
      const form = e.target;

      // Check if this is an address edit form
      if (form.closest('.customer-address__edit-form-container')) {
        console.log('Address form submitted');

        // Optional: Add loading state
        const submitButton = form.querySelector('button[type="submit"]');
        if (submitButton) {
          const originalText = submitButton.textContent;
          submitButton.textContent = 'Saving...';
          submitButton.disabled = true;

          // Reset button after a delay (in case of errors)
          setTimeout(() => {
            submitButton.textContent = originalText;
            submitButton.disabled = false;
          }, 5000);
        }
      }
    });

    // Handle page reload after successful submission
    // This is necessary because Shopify redirects after form submission
    const urlParams = new URLSearchParams(window.location.search);
    if (urlParams.get('updated') === 'true' || window.location.hash === '#updated') {
      // Hide all edit forms and show address list
      document.querySelectorAll('.customer-address__edit-form-container').forEach((container) => {
        container.classList.add('hidden');
        container.style.display = 'none';
      });
      addressListContainer.style.display = 'grid';
    }

    // Delete functionality
    const deleteButtons = document.querySelectorAll('.customer-address__delete');

    deleteButtons.forEach((button) => {
      button.addEventListener('click', function () {
        const addressId = this.getAttribute('data-address');
        const confirmMessage = this.getAttribute('data-confirm');

        if (confirm(confirmMessage)) {
          const deleteForm = document.querySelector(`.customer-address__delete-form-${addressId}`);
          if (deleteForm) {
            const submitButton = deleteForm.querySelector('button[type="submit"]');
            if (submitButton) {
              submitButton.click();
            }
          }
        }
      });
    });
  });
</script>

{% schema %}
{
  "name": "Address",
  "settings": []
}
{% endschema %}
