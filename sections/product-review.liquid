<section id="shopify-section-{{ section.id }}" class="bg-brand-2 pt-88 pb-64 sm:pt-24 sm:pb-24">
  <div class=" page-width gap-48 sm:gap-8 flex flex-col text-center">
    {% if section.settings.title != blank %}
      <h2 class=" ff-bebas-neue ft-400 fs-36-lh-40-ls-0 sm:fs-21-lh-24-ls-1_2pct m-0">
        {{ section.settings.title }}
      </h2>
    {% endif %}
    <div id="homepage-product-review__desktop-content" class="grid sm:hidden">
      <div class="flex justify-center items-center h-200">
        <div class=" w-40 h-40 spinner-4"></div>
      </div>
    </div>
    <div id="homepage-product-review__mobile-content" class="hidden sm:block">
      <slideshow-component
        data-autoplay="{{ section.settings.autoplay }}"
        data-pause-on-hover="false"
        data-enable-carousel="true"
        data-show-progress-bar="true"
      >
        <div class="swiper-container flex flex-col gap-16 w-220">
          <div class="swiper-wrapper" id="mobile-slides-container">
            <div class="flex justify-center items-center h-200">
              <div class=" w-40 h-40 spinner-4"></div>
            </div>
          </div>
        </div>
        {% render 'slideshow-progress-bar' %}
      </slideshow-component>
    </div>
    <div id="load-more-container" class="flex sm:hidden justify-center w-full">
      <button
        id="load-more-btn"
        class="button--solid border-none rounded-6 cursor-pointer ff-general-sans fs-16-lh-100pct-ls-0 fw-600"
      >
        {{ 'sections.product_review.load_more' | t }}
      </button>
    </div>
  </div>
</section>
<script>
  document.addEventListener('DOMContentLoaded', function () {
    const desktopContent = document.getElementById('homepage-product-review__desktop-content');
    const mobileSlidesContainer = document.getElementById('mobile-slides-container');
    const loadMoreContainer = document.getElementById('load-more-container');
    const loadMoreBtn = document.getElementById('load-more-btn');
    let currentPage = 1;
    let displayedReviews = [];
    let hasMoreReviews = true;
    let isLoadingMore = false;
    let imageLoadCount = 0;
    let totalImages = 0;
    const allProducts = {
      {% for product in collections.all.products limit: 250 %}
        "{{ product.id }}": {
          "title": "{{ product.title | escape }}",
          "handle": "{{ product.handle }}"
        }{% unless forloop.last %},{% endunless %}
      {% endfor %}
    };
    function isMobileOrTablet() {
      return window.innerWidth <= 1023;
    }
    function truncateTextWithReadMore(text, productHandle, maxLength = 100) {
      if (!text) return text;
      if (text.length > maxLength) {
        const truncatedText = text.substring(0, maxLength);
        const lastSpaceIndex = truncatedText.lastIndexOf(' ');
        const finalText = lastSpaceIndex > 0 ? truncatedText.substring(0, lastSpaceIndex) : truncatedText;
        return `${finalText}... <span class="text-brand no-underline cursor-pointer ff-general-sans fs-14-lh-20-ls-0 fw-500" onclick="window.location.href='/products/${productHandle}'">Read more</span>`;
      } else {
        return `${text} <span class="text-brand no-underline cursor-pointer ff-general-sans fs-14-lh-20-ls-0 fw-500" onclick="window.location.href='/products/${productHandle}'">Read more</span>`;
      }
    }
    function getProductHandle(productId) {
      const product = allProducts[productId];
      return product ? product.handle : '';
    }
    function getProductTitle(productId) {
      const product = allProducts[productId];
      return product ? product.title : 'Title is not available';
    }
    function calculateGridHeight(reviewCount) {
      if (reviewCount === 0) return 200;
      const screenWidth = window.innerWidth;
      let columns = screenWidth >= 1024 ? 4 : (screenWidth >= 769 ? 3 : 2);
      const rows = Math.ceil(reviewCount / columns);
      const cardGap = 16;
      const estimatedCardHeight = 360;
      const totalHeight = (rows * estimatedCardHeight) + ((rows - 1) * cardGap) + 40;
      return Math.max(totalHeight, 400);
    }
    function updateGridHeightAfterRender(reviewCount) {
      if (reviewCount === 0) return;
      clearTimeout(window.heightCalculationTimeout);
      window.heightCalculationTimeout = setTimeout(() => {
        requestAnimationFrame(() => {
          const gridElement = document.querySelector('.homepage-product-review__grid');
          const cards = gridElement?.querySelectorAll('.homepage-product-review__card');
          if (!gridElement || !cards || cards.length === 0) return;
          setTimeout(() => {
            let maxCardHeight = 0;
            cards.forEach(card => {
              if (card.offsetHeight > 0) {
                maxCardHeight = Math.max(maxCardHeight, card.offsetHeight);
              }
            });
            if (maxCardHeight === 0) maxCardHeight = 360;
            const screenWidth = window.innerWidth;
            let columns = screenWidth >= 1024 ? 4 : (screenWidth >= 769 ? 3 : 2);
            const rows = Math.ceil(reviewCount / columns);
            const cardGap = 16;
            const totalHeight = (rows * maxCardHeight) + ((rows - 1) * cardGap) + 40;
            const finalHeight = Math.max(totalHeight, 400);
            gridElement.style.height = `${finalHeight}px`;
            gridElement.style.minHeight = `${finalHeight}px`;
          }, 200);
        });
      }, 50);
    }
    function handleImageLoad() {
      imageLoadCount++;
      if (imageLoadCount === totalImages && displayedReviews.length > 0) {
        clearTimeout(window.imageLoadTimeout);
        window.imageLoadTimeout = setTimeout(() => {
          updateGridHeightAfterRender(displayedReviews.length);
          imageLoadCount = 0;
        }, 100);
      }
    }
    function createStarRating(rating) {
      let starsHtml = '';
      for (let i = 1; i <= 5; i++) {
        if (i <= rating) {
          starsHtml += '<span class="text-brand fs-21-lh-24-ls-1_2">★</span>';
        } else {
          starsHtml += '<span class="text-bg fs-21-lh-24-ls-1_2">★</span>';
        }
      }
      return starsHtml;
    }
    function formatDate(dateString) {
      const date = new Date(dateString);
      const options = { year: 'numeric', month: 'short', day: 'numeric' };
      return date.toLocaleDateString('en-US', options);
    }
    async function fetchReviews(page = 1, append = false) {
      try {
        if (isLoadingMore && append) return;
        if (append) isLoadingMore = true;
        if (!append) {
          desktopContent.innerHTML = '<div class="flex justify-center items-center h-200"><div class="w-40 h-40 spinner-4"></div></div>';
          mobileSlidesContainer.innerHTML = '<div class="flex justify-center items-center h-200"><div class="w-40 h-40 spinner-4"></div></div>';
          if (loadMoreContainer && !isMobileOrTablet()) {
            loadMoreContainer.style.display = 'none';
          }
        } else {
          if (!isMobileOrTablet()) {
            loadMoreBtn.classList.add('loading');
            loadMoreBtn.disabled = true;
          }
        }
        const limit = page === 1 ? 8 : 4;
        const response = await fetch(`/apps/${APP_SUB_PATH}/customer/product-review/show-home?page=${page}&limit=${limit}`, {
          method: 'GET',
          headers: { 'Content-Type': 'application/json' }
        });
        if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
        const data = await response.json();
        if (data.success && data.data && data.data.length > 0) {
          hasMoreReviews = data.pagination ? data.pagination.hasMore : false;
          if (append) {
            displayedReviews = [...displayedReviews, ...data.data];
            displayReviews(data.data, true);
          } else {
            displayedReviews = data.data;
            currentPage = 1;
            displayReviews(displayedReviews, false);
          }
          totalImages = displayedReviews.filter(review => review.reviewImage).length;
          imageLoadCount = 0;
          if (hasMoreReviews && displayedReviews.length > 0 && !isMobileOrTablet()) {
            loadMoreContainer.style.display = 'block';
          } else {
            loadMoreContainer.style.display = 'none';
          }
        } else {
          if (!append) displayNoReviews();
          hasMoreReviews = false;
          loadMoreContainer.style.display = 'none';
        }
      } catch (error) {
        console.error('Error fetching reviews:', error);
        if (!append) displayError();
        hasMoreReviews = false;
        loadMoreContainer.style.display = 'none';
      } finally {
        if (!isMobileOrTablet()) {
          loadMoreBtn.classList.remove('loading');
          loadMoreBtn.disabled = false;
        }
        if (append) isLoadingMore = false;
      }
    }
    function displayReviews(reviewsData, isAppending = false) {
      const desktopReviewsHtml = displayedReviews.map(review => {
        const productTitle = getProductTitle(review.productId);
        const fullText = review.reviewText;
        const imageHtml = review.reviewImage ? `<img src="${review.reviewImage}" alt="${productTitle}" class="h-full w-full object-cover" loading="lazy" onload="handleImageLoad()">` : `<div class="h-full w-full object-cover" style="background: linear-gradient(45deg, #f0f0f0, #e0e0e0); display: flex; align-items: center; justify-content: center; color: #999; font-size: 0.8rem;">No Image</div>`;
        return `
          <div class="homepage-product-review__card gap-16 box-shadow w-25pct md:w-33pct sm:h-500 bg-bg rounded-6 p-8 flex flex-col border-box">
            <div class="relative w-full h-204 overflow-hidden shrink-0">
              ${imageHtml}
              <div class="absolute bottom-16 left-50pct translate-x--50 flex bg-brand-2 pt-8 pb-8 pl-10 pr-10 rounded-20 box-shadow gap-4">${createStarRating(review.rating)}</div>
            </div>
            <div class="flex flex-col text-left flex-1 min-h-80 gap-8 pl-6 pr-6">
              <div class="fs-21-lh-24-ls-1_2pct ff-bebas-neue fw-400 uppercase">${productTitle}</div>
              <div class="ff-general-sans fs-14-lh-20-ls-0 fw-400 sm:flex-1 sm:overflow-hidden">${fullText}</div>
            </div>
            <div class="gap-4 pl-6 pr-6 flex flex-col text-left mt-auto shrink-0">
              <span class="text-primary-90pct fs-12-lh-16-ls-0_6pct ff-general-sans fw-400">${formatDate(review.reviewPlacedAt)}</span>
              <span class="fs-12-lh-16-ls-0_6pct ff-general-sans fw-400 text-primary-90pct">By ${review.customerName}</span>
            </div>
          </div>
        `;
      }).join('');
      const mobileSlidesHtml = reviewsData.map(review => {
        const productTitle = getProductTitle(review.productId);
        const productHandle = getProductHandle(review.productId);
        const truncatedText = truncateTextWithReadMore(review.reviewText, productHandle, 100);
        const imageHtml = review.reviewImage ? `<img src="${review.reviewImage}" alt="${productTitle}" class="h-full w-full object-cover" loading="lazy">` : `<div class="h-full w-full object-cover" style="background: linear-gradient(45deg, #f0f0f0, #e0e0e0); display: flex; align-items: center; justify-content: center; color: #999; font-size: 0.8rem;">No Image</div>`;
        return `
          <div class="swiper-slide" style="margin: 0 !important;">
            <div class="homepage-product-review__card sm:h-500 w-25pct md:w-33pct gap-16 box-shadow bg-bg rounded-6 p-8 flex flex-col border-box" style="width: 220px">
              <div class="relative w-full h-204 overflow-hidden shrink-0">
                ${imageHtml}
                <div class="absolute bottom-16 left-50pct translate-x--50 flex bg-brand-2 pt-8 pb-8 pl-10 pr-10 rounded-20 box-shadow gap-4">${createStarRating(review.rating)}</div>
              </div>
              <div class="gap-8 pl-6 pr-6 flex flex-col text-left flex-1 min-h-80">
                <div class="fs-21-lh-24-ls-1_2pct ff-bebas-neue fw-400 uppercase">${productTitle}</div>
                <div class="ff-general-sans fs-14-lh-20-ls-0 fw-400 sm:flex-1 sm:overflow-hidden">${truncatedText}</div>
              </div>
              <div class="gap-4 pl-6 pr-6 flex flex-col text-left mt-auto shrink-0">
                <span class="text-primary-90pct fs-12-lh-16-ls-0_6 ff-general-sans fw-400">${formatDate(review.reviewPlacedAt)}</span>
                <span class="fs-12-lh-16-ls-0_6 ff-general-sans fw-400 text-primary-90pct">By ${review.customerName}</span>
              </div>
            </div>
          </div>
        `;
      }).join('');
      const reviewsSection = document.getElementById('shopify-section-{{ section.id }}');
      const slideshowComponent = reviewsSection.querySelector('slideshow-component');
      if (isAppending && slideshowComponent && slideshowComponent.swiper) {
        slideshowComponent.swiper.appendSlide(mobileSlidesHtml);
        slideshowComponent.swiper.update();
      } else {
        const estimatedHeight = calculateGridHeight(displayedReviews.length);
        const gridElement = document.querySelector('.homepage-product-review__grid');
        if (gridElement && isAppending) {
          gridElement.innerHTML = desktopReviewsHtml;
          gridElement.style.height = `${estimatedHeight}px`;
          gridElement.style.minHeight = `${estimatedHeight}px`;
        } else {
          desktopContent.innerHTML = `<div class="homepage-product-review__grid flex gap-16 w-full flex-column-wrap items-content-start border-box" style="height: ${estimatedHeight}px; min-height: ${estimatedHeight}px;">${desktopReviewsHtml}</div>`;
        }
        updateGridHeightAfterRender(displayedReviews.length);
        mobileSlidesContainer.innerHTML = mobileSlidesHtml;
        if (slideshowComponent) {
          if (slideshowComponent.swiper) {
            slideshowComponent.swiper.destroy(true, true);
            slideshowComponent.swiper = null;
          }
          slideshowComponent.init();
          setTimeout(() => {
            if (slideshowComponent.swiper && isMobileOrTablet()) {
              slideshowComponent.swiper.on('slideChange', function() {
                const swiper = this;
                const currentSlide = swiper.realIndex;
                const totalSlides = swiper.slides.length;
                if (currentSlide >= totalSlides - 2 && hasMoreReviews && !isLoadingMore) {
                  currentPage++;
                  fetchReviews(currentPage, true);
                }
              });
            }
          }, 150);
        }
      }
    }
    function displayNoReviews() {
      const noReviewsHtml = '<div class="text-secondary fs-23-lh-24-ls-0 p-32 text-center fs-36-lh-40-ls-0pct fw-500">No reviews available at the moment.</div>';
      desktopContent.innerHTML = noReviewsHtml;
      mobileSlidesContainer.innerHTML = `<div class="swiper-slide">${noReviewsHtml}</div>`;
    }
    function displayError() {
      const errorHtml = '<div class="text-brand fs-23-lh-24-ls-0 p-32 text-center fs-36-lh-40-ls-0pct fw-500">Unable to load reviews. Please try again later.</div>';
      desktopContent.innerHTML = errorHtml;
      mobileSlidesContainer.innerHTML = `<div class="swiper-slide">${errorHtml}</div>`;
    }
    let resizeTimeout;
    window.addEventListener('resize', () => {
      clearTimeout(resizeTimeout);
      resizeTimeout = setTimeout(() => {
        if (displayedReviews && displayedReviews.length > 0) {
          updateGridHeightAfterRender(displayedReviews.length);
        }
        if (hasMoreReviews && displayedReviews.length > 0 && !isMobileOrTablet()) {
          loadMoreContainer.style.display = 'block';
        } else {
          loadMoreContainer.style.display = 'none';
        }
      }, 250);
    });
    loadMoreBtn.addEventListener('click', function() {
      if (hasMoreReviews && !loadMoreBtn.disabled && !isMobileOrTablet()) {
        currentPage++;
        fetchReviews(currentPage, true);
      }
    });
    window.loadMoreReviewsForMobile = function() {
      if (hasMoreReviews && !isLoadingMore && isMobileOrTablet()) {
        currentPage++;
        fetchReviews(currentPage, true);
      }
    };
    window.updateReviewGridHeight = function(totalReviews) {
      updateGridHeightAfterRender(totalReviews);
    };
    window.handleImageLoad = handleImageLoad;
    fetchReviews();
    document.addEventListener("shopify:section:load", (event) => {
      if (event.target.classList.contains("homepage-product-review__section")) {
        fetchReviews();
      }
    });
    document.addEventListener("shopify:section:select", (event) => {
      if (event.target.classList.contains("homepage-product-review__section")) {
        fetchReviews();
      }
    });
  });
</script>
{% schema %}
{
  "name": "Product Reviews",
  "tag": "section",
  "disabled_on": {
    "groups": ["header", "footer"]
  },
  "settings": [
    {
      "type": "text",
      "id": "title",
      "label": "Section Title",
      "default": "SEE WHAT OUR CUSTOMERS ARE SAYING"
    },
    {
      "type": "header",
      "content": "Mobile & Tablet Slideshow Settings"
    },
    {
      "type": "checkbox",
      "id": "autoplay",
      "label": "Enable autoplay (Mobile & Tablet only)",
      "default": false
    }
  ],
  "presets": [
    {
      "name": "Product Reviews"
    }
  ]
}
{% endschema %}