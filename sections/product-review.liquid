
<section id="shopify-section-{{ section.id }}" class="bg-brand-2 pt-88 pb-64 sm:pt-24 sm:pb-24">
  <div class=" page-width gap-48 sm:gap-8 flex flex-col text-center">
    {% if section.settings.title != blank %}
      <h2 class=" ff-bebas-neue fw-400 fs-36-lh-40-ls-0 sm:fs-21-lh-24-ls-1_2pct m-0">
        {{ section.settings.title }}
      </h2>
    {% endif %}
    <div id="homepage-product-review__desktop-content" class="grid sm:hidden">
      <div class="flex justify-center items-center h-200">
        <div class=" w-40 h-40 spinner-4"></div>
      </div>
    </div>
    <div id="homepage-product-review__mobile-content" class="hidden sm:block">
      <slideshow-component
        data-autoplay="{{ section.settings.autoplay }}"
        data-pause-on-hover="false"
        data-enable-carousel="true"
        data-nav-loop="false"
        data-show-progress-bar="true"
        class="flex flex-col gap-16">
        <div class="swiper-container flex flex-col gap-16 w-full overflow-hidden">
          <div class="swiper-wrapper" id="mobile-slides-container">
            <div class="flex justify-center items-center h-200">
              <div class=" w-40 h-40 spinner-4"></div>
            </div>
          </div>
        </div>
        {% render 'slideshow-progress-bar' %}
      </slideshow-component>
    </div>
    <div id="load-more-container" class="flex sm:hidden justify-center w-full">
      <button id="load-more-btn" class="button--solid border-none rounded-6 cursor-pointer ff-general-sans fs-16-lh-100pct-ls-0 fw-600">
        {{ 'sections.product_review.load_more' | t }}
      </button>
    </div>
  </div>
</section>
<script>
  document.addEventListener('DOMContentLoaded', function () {
    const desktopContent = document.getElementById('homepage-product-review__desktop-content');
    const mobileSlidesContainer = document.getElementById('mobile-slides-container');
    const loadMoreContainer = document.getElementById('load-more-container');
    const loadMoreBtn = document.getElementById('load-more-btn');
    let currentPage = 1;
    let displayedReviews = [];
    let hasMoreReviews = true;
    let isLoadingMore = false;
    let imageLoadCount = 0;
    let totalImages = 0;
    
    function isMobileOrTablet() {
      return window.innerWidth <= 1023;
    }
    function truncateTextWithReadMore(text, url, maxLength = 100) {
      if (!text) return text;
      if (text.length > maxLength) {
        const truncatedText = text.substring(0, maxLength);
        const lastSpaceIndex = truncatedText.lastIndexOf(' ');
        const finalText = lastSpaceIndex > 0 ? truncatedText.substring(0, lastSpaceIndex) : truncatedText;
        return `${finalText}... <span class="text-brand no-underline cursor-pointer ff-general-sans fs-14-lh-20-ls-0 fw-500" onclick="window.location.href='${url}'">Read more</span>`;
      } else {
        return `${text} <span class="text-brand no-underline cursor-pointer ff-general-sans fs-14-lh-20-ls-0 fw-500" onclick="window.location.href='${url}'">Read more</span>`;
      }
    }
    function getProductTitle(productId, allProducts) {
      const product = allProducts[productId];
      return product ? product.title : 'Title is not available';
    }
    function getProductURL(productId, allProducts) {
      const product = allProducts[productId];
      return product ? product.url : 'URL is not available';
    }
    function calculateGridHeight(totalItems = displayedReviews.length) {
  const gridElement = document.querySelector('.homepage-product-review__grid');
  if (!gridElement) return 0;

  // Find out how many columns are visible (depends on CSS media queries)
  const gridWidth = gridElement.clientWidth;
  const cardWidth = gridElement.querySelector('.homepage-product-review__card')?.offsetWidth || 300;
  const columns = Math.max(1, Math.floor(gridWidth / cardWidth));

  const cardHeight = gridElement.querySelector('.homepage-product-review__card')?.offsetHeight || 320;
  const gap = parseInt(window.getComputedStyle(gridElement).gap) || 16;

  const rows = Math.ceil(totalItems / columns);

  return rows * cardHeight + (rows - 1) * gap;
  }
    function updateGridHeightAfterRender(totalItems) {
    const newHeight = calculateGridHeight(totalItems);
    const gridElement = document.querySelector('.homepage-product-review__grid');
    if (gridElement) {
      gridElement.style.height = `${newHeight}px`;
      gridElement.style.minHeight = `${newHeight}px`;
    }

}
    function handleImageLoad() {
      imageLoadCount++;
      if (imageLoadCount === totalImages && displayedReviews.length > 0) {
        clearTimeout(window.imageLoadTimeout);
        window.imageLoadTimeout = setTimeout(() => {
          updateGridHeightAfterRender(displayedReviews.length);
          imageLoadCount = 0;
        }, 100);
      }
    }
    function createStarRating(rating) {
      let starsHtml = '';
      for (let i = 1; i <= 5; i++) {
        if (i <= rating) {
          starsHtml += '<span class="text-brand fs-21-lh-24-ls-1_2">â˜…</span>';
        } else {
          starsHtml += '<span class="text-bg fs-21-lh-24-ls-1_2">â˜…</span>';
        }
      }
      return starsHtml;
    }
    function formatDate(dateString) {
      const date = new Date(dateString);
      const options = { year: 'numeric', month: 'short', day: 'numeric' };
      return date.toLocaleDateString('en-US', options);
    }

async function fetchReviews(page = 1, append = false) {
  // Define allProducts structure (from Liquid context)
  const allProducts = {
    // This block is assumed to be rendered by Liquid templating engine (e.g., Shopify)
    {% for product in collections.all.products %}
      "{{ product.id }}": {
        "title": "{{ product.title | escape }}",
        "handle": "{{ product.handle }}",
        "url": "{{ product.url }}"
      }{% unless forloop.last %},{% endunless %}
    {% endfor %}
  };

  if (isLoadingMore && append) return;
  if (append) isLoadingMore = true;

  if (!append) {
    showInitialLoaders();
    // ðŸ’¡ Setup the grid structure only when fetching the first page.
    desktopContent.innerHTML = `<div class="homepage-product-review__grid page-width flex gap-16 w-full flex-column-wrap items-content-start border-box overflow-anchor"></div>`;
    updateGridHeightAfterRender(0); // Reset height on initial load
  } else {
    showAppendLoader();
  }

  try {
    const limit = 8;
    const response = await fetch(
      `/apps/${APP_SUB_PATH}/customer/product-review/show-home?page=${page}&limit=${limit}`,
      { method: "GET", headers: { "Content-Type": "application/json" } }
    );

    if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
    const data = await response.json();

    if (data.success && Array.isArray(data.data) && data.data.length > 0) {
      hasMoreReviews = data.pagination?.hasMore ?? false;
      const newReviews = data.data;

      if (append) {
        // Append new data to the displayed list and render only the new batch
        await displayReviewsSequentially(newReviews, allProducts, true, page);
        displayedReviews = [...displayedReviews, ...newReviews];
      } else {
        // Overwrite existing data and render the first batch
        displayedReviews = newReviews;
        currentPage = 1;
        await displayReviewsSequentially(newReviews, allProducts, false, page);
      }

      totalImages = displayedReviews.filter(r => r.reviewImage).length;
      imageLoadCount = 0;

      toggleLoadMore(hasMoreReviews && displayedReviews.length > 0);
    } else {
      if (!append) displayNoReviews();
      hasMoreReviews = false;
      toggleLoadMore(false);
    }
  } catch (error) {
    console.error("Error fetching reviews:", error);
    if (!append) displayError();
    hasMoreReviews = false;
    toggleLoadMore(false);
  } finally {
    if (!isMobileOrTablet()) {
      loadMoreBtn.classList.remove("loading");
      loadMoreBtn.disabled = false;
    }
    if (append) {
      isLoadingMore = false;
    }
  }
}

async function displayReviewsSequentially(reviewsData, allProducts, isAppending = false, page) {
    const targetGrid = document.querySelector(".homepage-product-review__grid");
    if (!targetGrid || !reviewsData.length) return;

    const animationClass = isAppending ? 'review-card--new' : '';
    
    const N_COLS = 4;
    // Get the index where the new items start (0-based)
    const startGlobalIndex_0based = targetGrid.children.length; 

    // Loop through the new data batch
    for (let i = 0; i < reviewsData.length; i++) {
        const review = reviewsData[i];
        
        // --- Data Extraction (Replaced with placeholders for brevity) ---
        const productTitle = getProductTitle(review?.productId, allProducts);
        const fullText = review?.reviewText;

        const I_global = startGlobalIndex_0based + (i + 1); 
        const orderValue = ((I_global - 1) % N_COLS) + 1;
        

        // --- HTML Generation ---
        const imageHtml = review?.reviewImage
          ? `<img src="${review?.reviewImage}" alt="${productTitle}" class="h-full w-full object-cover" loading="lazy">`
          : `<div class="h-full w-full object-cover" style="background:linear-gradient(45deg,#f0f0f0,#e0e0e0);display:flex;align-items:center;justify-content:center;color:#999;font-size:0.8rem;">No Image</div>`;

        const cardHtml = `
          <div class="homepage-product-review__card ${animationClass} gap-16 box-shadow w-25pct md:w-33pct bg-bg rounded-6 p-8 flex sm:flex-auto flex-col border-box" style="order: ${orderValue}">
            <div class="relative w-full h-204 overflow-hidden shrink-0">
              ${imageHtml}
              <div class="absolute bottom-16 left-50pct translate-x--50 flex bg-brand-2 pt-8 pb-8 pl-10 pr-10 rounded-20 box-shadow gap-4">
                ${createStarRating(review.rating)}
              </div>
            </div>
            <div class="flex flex-col text-left flex-1 gap-8 pl-6 pr-6">
              <div class="fs-21-lh-24-ls-1_2pct ff-bebas-neue fw-400 uppercase">${productTitle}</div>
              <div class="ff-general-sans fs-14-lh-20-ls-0 fw-400 sm:flex-1 sm:overflow-hidden">${fullText}</div>
            </div>
            <div class="gap-4 pl-6 pr-6 flex flex-col text-left mt-auto shrink-0">
              <span class="text-primary-90pct fs-12-lh-16-ls-0_6pct ff-general-sans fw-400">${formatDate(review.reviewPlacedAt)}</span>
              <span class="fs-12-lh-16-ls-0_6pct ff-general-sans fw-400 text-primary-90pct">By ${review.customerName}</span>
            </div>
          </div>
        `;

        const tempDiv = document.createElement("div");
        tempDiv.innerHTML = cardHtml.trim();
        targetGrid.appendChild(tempDiv.firstChild);
    }
    
    // Update grid height
    updateGridHeightAfterRender(targetGrid.children.length);
}

// helper function
function showInitialLoaders() {
  desktopContent.innerHTML = `
    <div class="flex justify-center items-center h-200">
      <div class="w-40 h-40 spinner-4"></div>
    </div>`;
  mobileSlidesContainer.innerHTML = `
    <div class="flex justify-center items-center h-200">
      <div class="w-40 h-40 spinner-4"></div>
    </div>`;
  if (loadMoreContainer && !isMobileOrTablet()) {
    loadMoreContainer.style.display = 'none';
  }
}

function showAppendLoader() {
  if (!isMobileOrTablet() && loadMoreBtn) {
    loadMoreBtn.classList.add('loading');
    loadMoreBtn.disabled = true;
  }
}

function toggleLoadMore(show) {
  if (loadMoreContainer && !isMobileOrTablet()) {
    loadMoreContainer.style.display = show ? 'block' : 'none';
  }
}

function resetLoaders(append) {
  if (!isMobileOrTablet() && loadMoreBtn) {
    loadMoreBtn.classList.remove('loading');
    loadMoreBtn.disabled = false;
  }
  if (append) isLoadingMore = false;
}


    function displayNoReviews() {
      const noReviewsHtml = '<div class="text-secondary fs-23-lh-24-ls-0 p-32 text-center fs-36-lh-40-ls-0pct fw-500">No reviews available at the moment.</div>';
      desktopContent.innerHTML = noReviewsHtml;
      mobileSlidesContainer.innerHTML = `<div class="swiper-slide">${noReviewsHtml}</div>`;
    }
    function displayError() {
      const errorHtml = '<div class="text-brand fs-23-lh-24-ls-0 p-32 text-center fs-36-lh-40-ls-0pct fw-500">Unable to load reviews. Please try again later.</div>';
      desktopContent.innerHTML = errorHtml;
      mobileSlidesContainer.innerHTML = `<div class="swiper-slide">${errorHtml}</div>`;
    }
    let resizeTimeout;
    window.addEventListener('resize', () => {
      clearTimeout(resizeTimeout);
      resizeTimeout = setTimeout(() => {
        if (displayedReviews && displayedReviews.length > 0) {
          updateGridHeightAfterRender(displayedReviews.length);
        }
        if (hasMoreReviews && displayedReviews.length > 0 && !isMobileOrTablet()) {
          loadMoreContainer.style.display = 'block';
        } else {
          loadMoreContainer.style.display = 'none';
        }
      }, 250);
    });
    loadMoreBtn.addEventListener('click', function() {
      if (hasMoreReviews && !loadMoreBtn.disabled && !isMobileOrTablet()) {
        currentPage++;
        fetchReviews(currentPage, true);
      }
    });
    window.loadMoreReviewsForMobile = function() {
      if (hasMoreReviews && !isLoadingMore && isMobileOrTablet()) {
        currentPage++;
        fetchReviews(currentPage, true);
      }
    };
    window.updateReviewGridHeight = function(totalReviews) {
      updateGridHeightAfterRender(totalReviews);
    };
    window.handleImageLoad = handleImageLoad;
    fetchReviews();
    document.addEventListener("shopify:section:load", (event) => {
      if (event.target.classList.contains("homepage-product-review__section")) {
        fetchReviews();
      }
    });
    document.addEventListener("shopify:section:select", (event) => {
      if (event.target.classList.contains("homepage-product-review__section")) {
        fetchReviews();
      }
    });
  });
</script>
{% schema %}
  {
    "name": "Product Reviews",
    "tag": "section",
    "disabled_on": {
      "groups": ["header", "footer"]
    },
    "settings": [
      {
        "type": "text",
        "id": "title",
        "label": "Section Title",
        "default": "SEE WHAT OUR CUSTOMERS ARE SAYING"
      }, {
        "type": "header",
        "content": "Mobile & Tablet Slideshow Settings"
      }, {
        "type": "checkbox",
        "id": "autoplay",
        "label": "Enable autoplay (Mobile & Tablet only)",
        "default": false
      }
    ],
    "presets": [
      {
        "name": "Product Reviews"
      }
    ]
  }
{% endschema %}