{{ 'home-page-review.css' | asset_url | stylesheet_tag }}

<style>
  .homepage-product-review__section-{{ section.id }} {
    background-color: rgb(var(--color-secondary-brand));
    padding-top: 88px;
    padding-bottom: 64px;
  }


  .homepage-product-review__section-{{ section.id }} .custom-pagination {
    background: rgb(var(--color-background));
  }


  @media (max-width: 768px) {

    .homepage-product-review__section-{{ section.id }} {
      background-color: rgb(var(--color-secondary-brand));
      padding-top: 24px;
      padding-bottom: 24px;
    }

    .homepage-product-review__desktop-only {
      display: none;
    }
    .homepage-product-review__mobile-tablet-only {
      display: block;
    }

    .homepage-product-review__mobile-tablet-only .swiper-container {
      position: relative;
      padding-bottom: 20px;
    }

    .swiper-slide:last-child {
      margin-right: 0;
    }

    .homepage-product-review__mobile-tablet-only .swiper-container .swiper-wrapper {
      gap: 16px !important;
    }

    /* Product review carousel mode styles */
    .swiper-container[data-carousel-mode="true"] .homepage-product-review__card {
      width: var(--slide-width-mobile, 220px);
      flex-shrink: 0;
    }

    .homepage-product-review__card {
      text-align: left;
    }
  }

  @media screen and (min-width: 1024px) and (max-width: 1146px) {
    .homepage-product-review__grid {
      min-height: 450px;
    }
  }

  @media screen and (min-width: 768px) and (max-width: 1023px) {
    .homepage-product-review__grid {
      min-height: 500px;
    }

    .homepage-product-review__card {
      width: calc(33% - 16px);
    }
  }
</style>

<section class="homepage-product-review__section homepage-product-review__section-{{ section.id }}">
  <div class="homepage-product-review__container page-width gap-48 sm:gap-8">
    {% if section.settings.title != blank %}
      <h2 class="homepage-product-review__title ff-bebas-neue ft-400 fs-36-lh-40-ls-0 sm:fs-21-lh-24-ls-1_2pct">
        {{ section.settings.title }}
      </h2>
    {% endif %}

    <!-- Desktop Grid Content -->
    <div id="homepage-product-review__desktop-content" class="homepage-product-review__desktop-only">
      <div class="homepage-product-review__loading">
        <div class="homepage-product-review__spinner"></div>
      </div>
    </div>

    <!-- Load More Button -->
    <div
      id="load-more-container"
      class="homepage-product-review__load-more-container sm:hidden sm:m-0"
    >
      <button
        id="load-more-btn"
        class="homepage-product-review__load-more-btn ff-general-sans fs-16-lh-100pct-ls-0 fw-600 sm:hidden "
      >
        {{ 'sections.product_review.load_more' | t }}
      </button>
    </div>

    <!-- Mobile/Tablet Slideshow Content -->
    <div id="homepage-product-review__mobile-content" class="homepage-product-review__mobile-tablet-only">
      <slideshow-component
        data-autoplay="false"
        data-show-progress-bar="true"
        data-slides-per-view-desktop="3"
        data-slides-per-view-tablet="2"
        data-slides-per-view-mobile="2"
        data-single-slide-view="true"
        data-carousel-mode="true"
        data-slide-width-mobile="284px"
        data-slide-width-tablet="284px"
        data-slide-width-desktop="284px"
      >
        <div class="swiper-container flex flex-col gap-16">
          <div class="swiper-wrapper" id="mobile-slides-container">
            <div class="homepage-product-review__loading">
              <div class="homepage-product-review__spinner"></div>
            </div>
          </div>
          {% render 'slideshow-progress-bar' %}
        </div>
      </slideshow-component>
    </div>
  </div>
</section>

<script>
  document.addEventListener('DOMContentLoaded', function () {
    const desktopContent = document.getElementById('homepage-product-review__desktop-content');
    const mobileSlidesContainer = document.getElementById('mobile-slides-container');
    const loadMoreContainer = document.getElementById('load-more-container');
    const loadMoreBtn = document.getElementById('load-more-btn');
    
    // Pagination variables
    let currentPage = 1;
    let displayedReviews = []; // Store currently displayed reviews
    let hasMoreReviews = true;

    // Image loading tracking
    let imageLoadCount = 0;
    let totalImages = 0;

    const allProducts = {
      {% for product in collections.all.products limit: 250 %}
        "{{ product.id }}": {
          "title": "{{ product.title | escape }}",
          "handle": "{{ product.handle }}"
        }{% unless forloop.last %},{% endunless %}
      {% endfor %}
    };

    // Function to calculate initial grid height estimate
    function calculateGridHeight(reviewCount) {
      if (reviewCount === 0) return 200;
      
      const screenWidth = window.innerWidth;
      let columns;
      
      if (screenWidth >= 1024) {
        columns = 4; // Desktop: 4 columns
      } else if (screenWidth >= 769) {
        columns = 3; // Tablet: 3 columns  
      } else {
        columns = 2; // Mobile fallback (though grid is hidden on mobile)
      }
      
      const rows = Math.ceil(reviewCount / columns);
      const cardGap = 16; // gap between cards
      const estimatedCardHeight = 360; // More accurate estimate based on your min-height + content
      
      // Calculate total height
      const totalHeight = (rows * estimatedCardHeight) + ((rows - 1) * cardGap) + 40; // +40 for padding
      return Math.max(totalHeight, 400); // Ensure minimum height matches CSS min-height
    }

    // Improved updateGridHeightAfterRender with better error handling
    function updateGridHeightAfterRender(reviewCount) {
      if (reviewCount === 0) return;
      
      // Clear any existing timeout to prevent multiple calculations
      clearTimeout(window.heightCalculationTimeout);
      
      window.heightCalculationTimeout = setTimeout(() => {
        requestAnimationFrame(() => {
          const gridElement = document.querySelector('.homepage-product-review__grid');
          const cards = gridElement?.querySelectorAll('.homepage-product-review__card');
          
          if (!gridElement || !cards || cards.length === 0) return;
          
          setTimeout(() => {
            let maxCardHeight = 0;
            cards.forEach(card => {
              if (card.offsetHeight > 0) {
                maxCardHeight = Math.max(maxCardHeight, card.offsetHeight);
              }
            });
            
            if (maxCardHeight === 0) {
              maxCardHeight = 360; // fallback height
            }
            
            const screenWidth = window.innerWidth;
            let columns = screenWidth >= 1024 ? 4 : (screenWidth >= 769 ? 3 : 2);
            const rows = Math.ceil(reviewCount / columns);
            const cardGap = 16;
            
            const totalHeight = (rows * maxCardHeight) + ((rows - 1) * cardGap) + 40;
            const finalHeight = Math.max(totalHeight, 400);
            
            console.log(`Total reviews: ${reviewCount}, Measured card height: ${maxCardHeight}px, Final grid height: ${finalHeight}px`);
            gridElement.style.height = `${finalHeight}px`;
            gridElement.style.minHeight = `${finalHeight}px`;
          }, 200);
        });
      }, 50); // Small delay to prevent rapid fire calls
    }

    // Updated handleImageLoad function to prevent multiple height calculations
    function handleImageLoad() {
      imageLoadCount++;
      // Only recalculate when ALL images have loaded, and prevent multiple calls
      if (imageLoadCount === totalImages && displayedReviews.length > 0) {
        // Clear any existing timeout to prevent multiple calls
        clearTimeout(window.imageLoadTimeout);
        window.imageLoadTimeout = setTimeout(() => {
          updateGridHeightAfterRender(displayedReviews.length);
          imageLoadCount = 0; // reset for next load
        }, 100);
      }
    }

    function createStarRating(rating) {
      let starsHtml = '';
      for (let i = 1; i <= 5; i++) {
        if (i <= rating) {
          starsHtml += '<span class="homepage-product-review__star">★</span>';
        } else {
          starsHtml += '<span class="homepage-product-review__star homepage-product-review__star--empty">★</span>';
        }
      }
      return starsHtml;
    }

    function formatDate(dateString) {
      const date = new Date(dateString);
      const options = { year: 'numeric', month: 'short', day: 'numeric' };
      return date.toLocaleDateString('en-US', options);
    }

    function getProductTitle(productId) {
      const product = allProducts[productId];
      return product ? product.title : 'Title is not available';
    }

    // Fixed fetchReviews function to prevent height calculation issues
    async function fetchReviews(page = 1, append = false) {
      try {
        // Show loading state
        if (!append) {
          desktopContent.innerHTML = '<div class="homepage-product-review__loading"><div class="homepage-product-review__spinner"></div></div>';
          mobileSlidesContainer.innerHTML = '<div class="homepage-product-review__loading"><div class="homepage-product-review__spinner"></div></div>';
          loadMoreContainer.style.display = 'none';
        } else {
          loadMoreBtn.classList.add('loading');
          loadMoreBtn.disabled = true;
        }

        // Set limit based on whether it's initial load or load more
        const limit = page === 1 ? 8 : 4;

        const response = await fetch(`/apps/${APP_SUB_PATH}/customer/product-review/show-home?page=${page}&limit=${limit}`, {
          method: 'GET',
          headers: { 'Content-Type': 'application/json' }
        });

        if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
        const data = await response.json();

        if (data.success && data.data && data.data.length > 0) {
          if (append) {
            // Add new reviews to existing ones
            displayedReviews = [...displayedReviews, ...data.data];
          } else {
            // Initial load
            displayedReviews = data.data;
            currentPage = 1;
          }
          
          // Count images for load tracking - ONLY count images in displayedReviews
          totalImages = displayedReviews.filter(review => review.reviewImage).length;
          imageLoadCount = 0;
          
          // Check if there are more reviews using backend pagination data
          hasMoreReviews = data.pagination ? data.pagination.hasMore : false;
          
          // Display reviews with ALL reviews (not just new ones)
          displayReviews(displayedReviews, append); // Pass append flag
          
          // Show/hide load more button based on hasMore from backend
          if (hasMoreReviews && displayedReviews.length > 0) {
            loadMoreContainer.style.display = 'block';
          } else {
            loadMoreContainer.style.display = 'none';
          }
          
        } else {
          if (!append) {
            displayNoReviews();
          }
          hasMoreReviews = false;
          loadMoreContainer.style.display = 'none';
        }
      } catch (error) {
        console.error('Error fetching reviews:', error);
        if (!append) {
          displayError();
        }
        hasMoreReviews = false;
        loadMoreContainer.style.display = 'none';
      } finally {
        // Remove loading state
        loadMoreBtn.classList.remove('loading');
        loadMoreBtn.disabled = false;
      }
    }

    // Updated displayReviews function to handle append mode properly
    function displayReviews(reviews, isAppending = false) {
      // Generate desktop grid content
      const desktopReviewsHtml = reviews.map(review => {
        const productTitle = getProductTitle(review.productId);
        const imageHtml = review.reviewImage
          ? `<img src="${review.reviewImage}" alt="${productTitle}" class="homepage-product-review__image" loading="lazy" onload="handleImageLoad()">`
          : `<div class="homepage-product-review__image" style="background: linear-gradient(45deg, #f0f0f0, #e0e0e0); display: flex; align-items: center; justify-content: center; color: #999; font-size: 0.8rem;">No Image</div>`;

        return `
          <div class="homepage-product-review__card gap-16 box-shadow">
            <div class="homepage-product-review__image-container homepage-product-review__content-top">
              ${imageHtml}
              <div class="homepage-product-review__rating box-shadow gap-4">
                ${createStarRating(review.rating)}
              </div>
            </div>
            <div class="homepage-product-review__content-middle gap-8 pl-6 pr-6">
              <div class="homepage-product-review__product-title fs-21-lh-24-ls-1_2pct ff-bebas-neue fw-400">
                ${productTitle}
              </div>
              <div class="homepage-product-review__text ff-general-sans fs-14-lh-20-ls-0 fw-400">
                ${review.reviewText}
              </div>
            </div>
            <div class="homepage-product-review__content-bottom gap-4 pl-6 pr-6">
              <span class="homepage-product-review__review-date fs-12-lh-16-ls-0_6pct ff-general-sans fw-400">
                ${formatDate(review.reviewPlacedAt)}
              </span>
              <span class="homepage-product-review__customer-name fs-12-lh-16-ls-0_6pct ff-general-sans fw-400">
                By ${review.customerName}
              </span>
            </div>
          </div>
        `;
      }).join('');

      // Generate mobile slideshow content
      const mobileSlidesHtml = reviews.map(review => {
        const productTitle = getProductTitle(review.productId);
        const imageHtml = review.reviewImage
          ? `<img src="${review.reviewImage}" alt="${productTitle}" class="homepage-product-review__image" loading="lazy">`
          : `<div class="homepage-product-review__image" style="background: linear-gradient(45deg, #f0f0f0, #e0e0e0); display: flex; align-items: center; justify-content: center; color: #999; font-size: 0.8rem;">No Image</div>`;

        return `
          <div class="swiper-slide">
            <div class="homepage-product-review__card-items homepage-product-review__card gap-16 box-shadow" style="width: 284px;">
              <div class="homepage-product-review__image-container homepage-product-review__content-top">
                ${imageHtml}
                <div class="homepage-product-review__rating box-shadow gap-4">
                  ${createStarRating(review.rating)}
                </div>
              </div>
              <div class="homepage-product-review__content-middle gap-8 pl-6 pr-6 ">
                <div class="homepage-product-review__product-title fs-21-lh-24-ls-1_2pct ff-bebas-neue fw-400">
                  ${productTitle}
                </div>
                <div class="homepage-product-review__text ff-general-sans fs-14-lh-20-ls-0 fw-400">
                  ${review.reviewText}
                </div>
              </div>
              <div class="homepage-product-review__content-bottom gap-4 pl-6 pr-6">
                <span class="homepage-product-review__review-date fs-12-lh-16-ls-0_6 ff-general-sans fw-400">
                  ${formatDate(review.reviewPlacedAt)}
                </span>
                <span class="homepage-product-review__customer-name fs-12-lh-16-ls-0_6 ff-general-sans fw-400">
                  By ${review.customerName}
                </span>
              </div>
            </div>
          </div>
        `;
      }).join('');

      // Calculate height based on TOTAL reviews (not just new ones)
      const estimatedHeight = calculateGridHeight(reviews.length);
      
      // Update desktop content with proper height calculation
      const gridElement = document.querySelector('.homepage-product-review__grid');
      
      if (gridElement && isAppending) {
        // If appending, just update the content but recalculate height for ALL reviews
        gridElement.innerHTML = desktopReviewsHtml;
        gridElement.style.height = `${estimatedHeight}px`;
        gridElement.style.minHeight = `${estimatedHeight}px`;
      } else {
        // Initial load or full refresh
        desktopContent.innerHTML = `<div class="homepage-product-review__grid gap-16" style="height: ${estimatedHeight}px; min-height: ${estimatedHeight}px;">${desktopReviewsHtml}</div>`;
      }

      // Calculate precise height after render (for ALL reviews)
      updateGridHeightAfterRender(reviews.length);

      // Update mobile slideshow content
      mobileSlidesContainer.innerHTML = mobileSlidesHtml;

      // Reinitialize slideshow component after content update
      const slideshowComponent = document.querySelector('slideshow-component');
      if (slideshowComponent) {
        // Destroy existing swiper instance
        if (slideshowComponent.swiper) {
          slideshowComponent.swiper.destroy(true, true);
          slideshowComponent.swiper = null;
        }
        
        // Small delay to ensure DOM is ready
        setTimeout(() => {
          // Reinitialize the slideshow component
          slideshowComponent.initializeSwiper();
          
          // Update custom bullets if they exist
          if (typeof slideshowComponent.initializeCustomBullets === 'function') {
            slideshowComponent.initializeCustomBullets();
          }
        }, 100);
      }
    }

    function displayNoReviews() {
      const noReviewsHtml = '<div class="homepage-product-review__empty fs-36-lh-40-ls-0pct fw-500">No reviews available at the moment.</div>';
      desktopContent.innerHTML = noReviewsHtml;
      mobileSlidesContainer.innerHTML = `<div class="swiper-slide">${noReviewsHtml}</div>`;
    }

    function displayError() {
      const errorHtml = '<div class="homepage-product-review__error fs-36-lh-40-ls-0pct fw-500">Unable to load reviews. Please try again later.</div>';
      desktopContent.innerHTML = errorHtml;
      mobileSlidesContainer.innerHTML = `<div class="swiper-slide">${errorHtml}</div>`;
    }

    // Improved window resize listener with debouncing
    let resizeTimeout;
    window.addEventListener('resize', () => {
      clearTimeout(resizeTimeout);
      resizeTimeout = setTimeout(() => {
        if (displayedReviews && displayedReviews.length > 0) {
          updateGridHeightAfterRender(displayedReviews.length);
        }
      }, 250); // Debounce resize events
    });

    // Load More Button Event Listener
    loadMoreBtn.addEventListener('click', function() {
      if (hasMoreReviews && !loadMoreBtn.disabled) {
        currentPage++;
        fetchReviews(currentPage, true);
      }
    });

    // Global function for external "Load More" functionality
    window.updateReviewGridHeight = function(totalReviews) {
      updateGridHeightAfterRender(totalReviews);
    };

    // Make handleImageLoad available globally
    window.handleImageLoad = handleImageLoad;

    fetchReviews();
    
    document.addEventListener("shopify:section:load", (event) => {
      if (event.target.classList.contains("homepage-product-review__section")) {
        fetchReviews();
      }
    });

    document.addEventListener("shopify:section:select", (event) => {
      if (event.target.classList.contains("homepage-product-review__section")) {
        fetchReviews();
      }
    });

  });
</script>

{% schema %}
{
  "name": "Product Reviews",
  "tag": "section",
  "disabled_on": {
    "groups": ["header", "footer"]
  },
  "settings": [
    {
      "type": "text",
      "id": "title",
      "label": "Section Title",
      "default": "SEE WHAT OUR CUSTOMERS ARE SAYING"
    },
    {
      "type": "header",
      "content": "Mobile & Tablet Slideshow Settings"
    },
    {
      "type": "checkbox",
      "id": "autoplay",
      "label": "Enable autoplay (Mobile & Tablet only)",
      "default": false
    }
  ],
  "presets": [
    {
      "name": "Product Reviews"
    }
  ]
}
{% endschema %}
